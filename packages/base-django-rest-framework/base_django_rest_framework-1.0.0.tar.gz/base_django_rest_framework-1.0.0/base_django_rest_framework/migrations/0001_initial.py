# Generated by Django 4.2.2 on 2023-07-03 05:57

import authlib.oauth2.rfc6749.models
import base_django_rest_framework.managers.user
import base_django_rest_framework.utils.oauth2.client
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import time
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('avatar', models.ImageField(blank=True, upload_to='users/avatars')),
                ('first_name', models.CharField(max_length=128)),
                ('last_name', models.CharField(max_length=128)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-created_at'],
                'abstract': False,
            },
            managers=[
                ('objects', base_django_rest_framework.managers.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OAuth2Client',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('client_id', models.CharField(default=base_django_rest_framework.utils.oauth2.client.client_id_generator, editable=False, max_length=48, unique=True)),
                ('client_secret', models.CharField(blank=True, editable=False, max_length=48)),
                ('client_name', models.CharField(max_length=128, unique=True)),
                ('redirect_uris', models.TextField(blank=True, default='')),
                ('default_redirect_uri', models.TextField(blank=True, default='')),
                ('scope', models.TextField(blank=True, default='')),
                ('response_type', models.TextField(blank=True, default='')),
                ('grant_type', models.TextField(blank=True, default='')),
                ('token_endpoint_auth_method', models.CharField(default='client_secret_basic', max_length=48)),
                ('client_id_issued_at', models.BigIntegerField(default=time.time, editable=False)),
                ('client_secret_expires_at', models.BigIntegerField(default=0, editable=False)),
            ],
            options={
                'verbose_name': 'oAuth2 client',
                'verbose_name_plural': 'oAuth2 clients',
                'ordering': ['-client_id_issued_at'],
            },
            bases=(models.Model, authlib.oauth2.rfc6749.models.ClientMixin),
        ),
        migrations.CreateModel(
            name='OAuth2Token',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('token_type', models.CharField(editable=False, max_length=48)),
                ('access_token', models.CharField(editable=False, max_length=48, unique=True)),
                ('refresh_token', models.CharField(editable=False, max_length=48, unique=True)),
                ('scope', models.TextField(default='', editable=False)),
                ('revoked', models.BooleanField(default=False, editable=False)),
                ('issued_at', models.BigIntegerField(default=time.time, editable=False)),
                ('expires_in', models.BigIntegerField(default=0, editable=False)),
                ('client', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='tokens', related_query_name='token', to='base_django_rest_framework.oauth2client', to_field='client_id')),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='tokens', related_query_name='token', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'oAuth2 token',
                'verbose_name_plural': 'oAuth2 tokens',
                'ordering': ['-issued_at'],
            },
            bases=(models.Model, authlib.oauth2.rfc6749.models.TokenMixin),
        ),
    ]
