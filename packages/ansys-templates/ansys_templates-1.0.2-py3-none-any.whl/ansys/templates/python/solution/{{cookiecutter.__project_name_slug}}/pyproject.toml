[build-system]
requires = ["poetry-core>=1.0.0,<1.3.0", "setuptools>=65.0"]
build-backend = "poetry.core.masonry.api"

[build-system-requirements]
build-system-version = "1.5.1"

[tool.poetry]
name = "{{cookiecutter.__pkg_name}}"
version = "{{cookiecutter.__version}}"
description = "{{cookiecutter.__short_description}}"
license = "Proprietary"
authors = ["ANSYS, Inc. <solution-applications.maintainers@ansys.com>"]
maintainers = ["ANSYS, Inc. <solution-applications.maintainers@ansys.com>"]
readme = "README.rst"
repository = "{{ cookiecutter.__repository_url }}"
documentation = "{{ cookiecutter.__repository_url }}"
keywords = ["Ansys Solutions"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Other Audience",
    "License :: Other/Proprietary License",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering"
]
packages = [
    { include = "ansys", from = "src" },
]

[[tool.poetry.source]]
name = "solutions-private-pypi"
url = "https://pkgs.dev.azure.com/pyansys/_packaging/ansys-solutions/pypi/simple/"
priority = "supplemental"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

# Main dependencies
[tool.poetry.dependencies]
python = ">=3.8, <3.11"
ansys-dash-treeview = {version = "0.0.1.dev0", source = "solutions-private-pypi"}
ansys-saf-glow = {version = "0.3.dev4", source = "solutions-private-pypi" }
ansys-saf-portal = {version = "0.2.0", source = "solutions-private-pypi"}
ansys-solutions-dash-lib = {version = "^0.4", source = "solutions-private-pypi"}
{% if cookiecutter.with_dash_ui == "yes" %}
dash = {version = "^2.6"}
dash_bootstrap_components = {version = "^1.2"}
dash-extensions = {version = "^0.1"}
dash-iconify = {version = "^0.1"}
dash-uploader = {version = "^0.6"}
{% endif %}

# Optional documentation dependencies
[tool.poetry.group.doc]
optional = true
[tool.poetry.group.doc.dependencies]
ansys-sphinx-theme = {version = "^0.8.0"}
numpydoc = {version = "^1.4.0"}
sphinx = {version = "5.1.0"}
sphinx-copybutton = {version = "^0.5.1"}
sphinx_design = {version = "^0.3.0"}
sphinx_code_tabs = {version = "^0.5.3"}
sphinx-gallery = {version = "^0.11.1"}
sphinx_mdinclude= {version = "^0.5.3"}
sphinx-tabs = {version = ">=1.2.1,<3.5.0"}
toml = {version = "^0.10.0"} # Needed by conf.py

# Optional testing dependencies
[tool.poetry.group.tests]
optional = true
[tool.poetry.group.tests.dependencies]
coverage = {version = "^6.4.1"}
filelock = {version = "^3.8.0"}
mock = {version = "^4.0.3"}
pytest = {version = "^7.1.2"}
pytest-cov = {version = "^3.0.0"}
pytest-dependency = {version = "^0.5.1"}
pytest-flakes = {version = "^4.0.5"}
pytest-pep8 = {version = "*"}
pytest-pythonpath = {version = "*"}
pytest-xdist = {version = "^3.0.2"}
pytest-mock = {version = "*"}
tox = {version = "^4.4.0"}

# Optional build requirements
[tool.poetry.group.build]
optional = true
[tool.poetry.group.build.dependencies]
build = {version = "^0.8.0"}
twine = {version = "^4.0.1"}

[tool.poetry.plugins."console_scripts"]
{{ cookiecutter.__solution_name_slug }}_main = "ansys.solutions.{{ cookiecutter.__solution_name_slug }}.main:main"

[tool.black]
line-length = {{ cookiecutter.__max_linelength }}

[tool.isort]
profile = "black"
force_sort_within_sections = true
line_length = {{ cookiecutter.__max_linelength }}
default_section = "THIRDPARTY"
src_paths = ["doc", "src", "tests"]

[tool.codespell]
skip = '.github,.venv,.tox,requirements,CODEOWNERS,*.tmp'
count = ''
quiet-level = 3
check-hidden = ""
exclude-file = ".codespell.exclude"
ignore-words = ".codespell.ignore"

[tool.pydocstyle]
select = ['D107']

[tool.coverage.run]
source = ["ansys.solutions"]

[tool.coverage.report]
show_missing = true
