image: python:3.10-slim

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH =~ /^release\/.*/ || $CI_COMMIT_BRANCH =~ /^feature\/.*/

stages:
  - static-analysis
  - unit-tests
  - build
  - install-test
  - publish-test
  - publish

variables:
  PRODUCT: batcave
  VIRTUAL_ENV: venv
  ARTIFACTS_DIR: dist
  UNIT_TEST_DIR: unit_test_results
  GIT_AUTHOR_NAME: $GITLAB_USER_NAME
  GIT_AUTHOR_EMAIL: $GITLAB_USER_EMAIL
  GIT_COMMITTER_NAME: $GITLAB_USER_NAME
  GIT_COMMITTER_EMAIL: $GITLAB_USER_EMAIL
  GIT_REMOTE: gitlab_pipeline_origin

.base:
  variables:
    FLIT_ROOT_INSTALL: 1
  before_script:
    - cat /etc/os-release
    - python -V
    - apt-get update
    - apt-get -y -qq --no-install-recommends install curl git
    - python -m pip install -U pip
    - pip install -U setuptools wheel
    - pip install -U virtualenv
    - if [ ! -e $VIRTUAL_ENV ]; then virtualenv $VIRTUAL_ENV; fi
    - source $VIRTUAL_ENV/bin/activate
    - python -m pip install -U pip
    - pip install -U setuptools wheel
    - pip install -U flit
    - flit install -s --deps all
    - git remote add $GIT_REMOTE https://$GITLAB_USER_LOGIN:$GITLAB_USER_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME.git
  cache:
    paths:
      - $VIRTUAL_ENV

.bump-version:
  script:
    - bumpver update $BUMP_ARGS
    - git push $GIT_REMOTE HEAD:$CI_COMMIT_BRANCH

.publisher:
  extends: .base
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH =~ /^release\/.*/ || $CI_COMMIT_BRANCH =~ /^feature\/.*/
      when: manual
      allow_failure: false

.pypi-upload:
  script:
    - twine upload --config-file $PYPIRC -r $PYPI_REPO $ARTIFACTS_DIR/*

static-analysis:
  stage: static-analysis
  extends: .base
  script:
    - pylint $PRODUCT
    - flake8 $PRODUCT
    - mypy $PRODUCT

unit-tests:
  stage: unit-tests
  extends: .base
  script:
    - python -m xmlrunner discover -o $UNIT_TEST_DIR
  artifacts:
    reports:
      junit: $UNIT_TEST_DIR/*

build:
  stage: build
  extends: .base
  script:
    - flit build
  artifacts:
    paths:
      - $ARTIFACTS_DIR

install-test:
  stage: install-test
  script:
    - pip install $ARTIFACTS_DIR/*.tar.gz

publish-test:
  stage: publish-test
  environment: Staging
  extends: .publisher
  variables:
    PYPI_REPO: testpypi
    BUMP_ARGS: --tag-num
  script:
    - !reference [.pypi-upload, script]
    - !reference [.bump-version, script]

publish:
  stage: publish
  environment: Production
  extends: .publisher
  variables:
    PYPI_REPO: pypi
    BUMP_ARGS: --patch --tag rc --tag-num
  script:
    - curl --location --output /usr/local/bin/release-cli "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
    - git pull $GIT_REMOTE $CI_COMMIT_BRANCH
    - bumpver update --tag final --tag-commit
    - git push --tags $GIT_REMOTE HEAD:$CI_COMMIT_BRANCH
    - flit build
    - !reference [.pypi-upload, script]
    - eval $(bumpver show --env)
    - release-cli create --name "Release $CURRENT_VERSION" --description "Release $CURRENT_VERSION" --tag-name "v$CURRENT_VERSION" --milestone "Release $CURRENT_VERSION"
    - !reference [.bump-version, script]

# cSpell:ignore batcave venv virtualenv bumpver pypi pypirc mypy xmlrunner testpypi
