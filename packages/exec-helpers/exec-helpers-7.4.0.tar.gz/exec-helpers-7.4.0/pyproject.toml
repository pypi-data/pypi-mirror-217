[build-system]
# Minimum requirements for the build system to execute.
# PEP 508 specifications for PEP 518.
requires = [
    "setuptools >= 61.0.0",
    "setuptools_scm[toml]>=6.2",
    "wheel",
]
build-backend="setuptools.build_meta"

[project]
name = "exec-helpers"
description = "Execution helpers for simplified usage of subprocess and ssh."
requires-python = ">=3.7.0"
keywords = ["subprocess", "ssh"]
license={text="Apache-2.0"}  # Use SPDX classifier
readme = {file = "README.rst", content-type = "text/x-rst"}
authors=[{name="Alexey Stepanov", email="penguinolog@gmail.com"}]
maintainers=[
  {name="Aleksei Stepanov", email="penguinolog@gmail.com"},
  {name="Antonio Esposito", email="esposito.cloud@gmail.com"},
  {name="Dennis Dmitriev", email="dis-xcom@gmail.com"},
]
dynamic = ["version", "classifiers", "dependencies"]

[project.urls]
"Documentation" = "https://exec-helpers.readthedocs.io/"
"Repository" = "https://github.com/python-useful-helpers/exec-helpers"
"Bug Tracker" = "https://github.com/python-useful-helpers/exec-helpers/issues"

[tool.setuptools.package-data]
exec_helpers=[
  "py.typed",
  "*.pyi",
  "*/*.pyi"
]

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
exclude = [
  "doc",
  "docs",
  "examples",
  "test",
  "bin",
  ".*"
]
include = ["exec_helpers"]
namespaces = false

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}
classifiers = {file = ["classifiers.txt"]}

[project.optional-dependencies]
xml = ["defusedxml"]
lxml = ["lxml>=4.6.2"]
yaml = ["PyYAML>=3.12"]
all_formats = ["defusedxml", "lxml>=4.6.2", "PyYAML>=3.12"]
all-formats = ["defusedxml", "lxml>=4.6.2", "PyYAML>=3.12"]

[tool.distutils.bdist_wheel]
universal = 0

[tool.setuptools_scm]
write_to = "exec_helpers/_version.py"

[tool.black]
line-length = 120
safe = true
target-version = ["py37", "py38"]

[tool.isort]
line_length = 120
multi_line_output = 3
force_single_line = true

known_third_party = ["threaded", "logwrap", "paramiko", "tenacity", "pyyaml", "ruamel.yaml", "psutil"]

import_heading_stdlib = "Standard Library"
import_heading_thirdparty = "External Dependencies"
import_heading_firstparty = "Package Implementation"
import_heading_localfolder = "Local Implementation"

[tool.doc8]
max-line-length = 150

[tool.pydocstyle]
ignore = [
  "D401",
  "D202",
  "D203",
  "D213"
]
# First line should be in imperative mood; try rephrasing
# No blank lines allowed after function docstring
# 1 blank line required before class docstring
# Multi-line docstring summary should start at the second line
match = "(?!_version|test_)*.py"

[tool.mypy]
strict = true
warn_unused_configs = true
warn_redundant_casts = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
  "psutil",
  "defusedxml.*",
  "lxml.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-vvv -s -p no:django -p no:ipdb"
testpaths = ["test"]
mock_use_standalone_module = false
junit_family = "xunit2"

[tool.coverage.run]
omit = ["test/*"]
branch = true

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",

  # Don't complain if tests don't hit defensive assertion code:
  "raise NotImplementedError",

  # Exclude methods marked as abstract
  "@abstractmethod",

  # Exclude import statements
  "^from\b",
  "^import\b",

  # Exclude variable declarations that are executed when file is loaded
  "^[a-zA-Z_]+\b\\s=",

  # Code for static analysis is never covered:
  "if typing.TYPE_CHECKING:",

  # Fallback code with no installed deps is almost impossible to cover properly
  "except ImportError:",

  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",

  # OS Specific
  "if platform.system()",
]

[tool.coverage.json]
pretty_print = true

[tool.ruff]
line-length = 120
show-source = true
target-version = "py38"

extend-select = [
  "W",  # also pycodestyle warnings
  "A001",  # Variable is shadowing a python builtin
  "B", "T10", "EXE",  # flake8-bugbear, flake8-debugger, flake8-executable
  "ISC001", "ISC003",  # flake8-implicit-str-concat
  "RET", "SIM", "C4",  # flake8-return, flake8-simplify, flake8-comprehensions
  "ICN", "PGH",  # flake8-import-conventions, pygrep-hooks
  "Q002", "Q003",  # Double quote docstring as PEP8, Change outer quotes to avoid escaping inner quotes
  "FLY",  # Flynt
  "TRY", "UP", "I", "PL", "PERF", "RUF",  # tryceratops, pyupgrade, isort, pylint, Ruff-specific
]
extend-ignore = [
  "PLR0911", "PLR0912", "PLR0913", "PLR0915", "PLR2004",  # refactor rules (too many statements/arguments/branches)
  "PLW2901",  # `Outer variable overwritten by inner target
  "RET504",  # Unnecessary variable assignment before return statement
  "SIM108",  # Use ternary operator,
  "TRY002", "TRY003", "TRY300", "TRY301", "TRY400",  # do not raise `Exception`, long messages prepare outside, ...
]

[tool.ruff.isort]
force-single-line = true
known-third-party = []

[tool.ruff.pydocstyle]
convention = "pep257"
