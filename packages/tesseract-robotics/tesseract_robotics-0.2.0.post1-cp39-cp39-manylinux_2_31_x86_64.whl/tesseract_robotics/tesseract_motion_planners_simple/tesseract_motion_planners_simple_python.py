# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tesseract_motion_planners_simple_python
else:
    import _tesseract_motion_planners_simple_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _tesseract_motion_planners_simple_python.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_motion_planners_simple_python.delete_SwigPyIterator

    def value(self):
        return _tesseract_motion_planners_simple_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tesseract_motion_planners_simple_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tesseract_motion_planners_simple_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tesseract_motion_planners_simple_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tesseract_motion_planners_simple_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tesseract_motion_planners_simple_python.SwigPyIterator_copy(self)

    def next(self):
        return _tesseract_motion_planners_simple_python.SwigPyIterator_next(self)

    def __next__(self):
        return _tesseract_motion_planners_simple_python.SwigPyIterator___next__(self)

    def previous(self):
        return _tesseract_motion_planners_simple_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tesseract_motion_planners_simple_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tesseract_motion_planners_simple_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tesseract_motion_planners_simple_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tesseract_motion_planners_simple_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tesseract_motion_planners_simple_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tesseract_motion_planners_simple_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tesseract_motion_planners_simple_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tesseract_motion_planners_simple_python:
_tesseract_motion_planners_simple_python.SwigPyIterator_swigregister(SwigPyIterator)
import tesseract_robotics.tesseract_motion_planners.tesseract_motion_planners_python
import tesseract_robotics.tesseract_environment.tesseract_environment_python
import tesseract_robotics.tesseract_kinematics.tesseract_kinematics_python
import tesseract_robotics.tesseract_common.tesseract_common_python
import tesseract_robotics.tesseract_scene_graph.tesseract_scene_graph_python
import tesseract_robotics.tesseract_geometry.tesseract_geometry_python
import tesseract_robotics.tesseract_srdf.tesseract_srdf_python
import tesseract_robotics.tesseract_state_solver.tesseract_state_solver_python
import tesseract_robotics.tesseract_collision.tesseract_collision_python
import tesseract_robotics.tesseract_command_language.tesseract_command_language_python
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SimplePlannerPlanProfile(object):
    r"""
    Plan Profile for the simple planner. It defines some functions that handle each of the waypoint cases. The
    planner then simply loops over all of the plan instructions and calls the correct function
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_motion_planners_simple_python.delete_SimplePlannerPlanProfile

    def generate(self, prev_instruction, prev_seed, base_instruction, next_instruction, request, global_manip_info):
        r"""
        Generate a seed for the provided base_instruction
        This should not include the prev_instruction but must include the base_instruction
        :type prev_instruction: :py:class:`MoveInstructionPoly`
        :param prev_instruction: The previous instruction
        :type prev_seed: :py:class:`MoveInstructionPoly`
        :param prev_seed: The previous seed
        :type base_instruction: :py:class:`MoveInstructionPoly`
        :param base_instruction: The base/current instruction to generate the seed for
        :type next_instruction: :py:class:`InstructionPoly`
        :param next_instruction: The next instruction. This will be a null instruction for the final instruction
        :type request: :py:class:`PlannerRequest`
        :param request: The planning request
        :type global_manip_info: :py:class:`ManipulatorInfo`
        :param global_manip_info: The global manipulator information
        :rtype: std::vector< tesseract_planning::MoveInstructionPoly,std::allocator< tesseract_planning::MoveInstructionPoly > >
        :return: A vector of move instrucitons
        """
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfile_generate(self, prev_instruction, prev_seed, base_instruction, next_instruction, request, global_manip_info)

# Register SimplePlannerPlanProfile in _tesseract_motion_planners_simple_python:
_tesseract_motion_planners_simple_python.SimplePlannerPlanProfile_swigregister(SimplePlannerPlanProfile)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SimplePlannerCompositeProfile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_motion_planners_simple_python.delete_SimplePlannerCompositeProfile

    def __init__(self, *args):
        _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfile_swiginit(self, _tesseract_motion_planners_simple_python.new_SimplePlannerCompositeProfile(*args))

# Register SimplePlannerCompositeProfile in _tesseract_motion_planners_simple_python:
_tesseract_motion_planners_simple_python.SimplePlannerCompositeProfile_swigregister(SimplePlannerCompositeProfile)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SimplePlannerPlanProfileMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap___nonzero__(self)

    def __bool__(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap___bool__(self)

    def __len__(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_has_key(self, key)

    def keys(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_keys(self)

    def values(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_values(self)

    def items(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_items(self)

    def __contains__(self, key):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap___contains__(self, key)

    def key_iterator(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_key_iterator(self)

    def value_iterator(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap___setitem__(self, *args)

    def asdict(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_asdict(self)

    def __init__(self, *args):
        _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_swiginit(self, _tesseract_motion_planners_simple_python.new_SimplePlannerPlanProfileMap(*args))

    def empty(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_empty(self)

    def size(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_size(self)

    def swap(self, v):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_swap(self, v)

    def begin(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_begin(self)

    def end(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_end(self)

    def clear(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_clear(self)

    def get_allocator(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_get_allocator(self)

    def count(self, x):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_count(self, x)

    def erase(self, *args):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_erase(self, *args)

    def find(self, x):
        return _tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_find(self, x)
    __swig_destroy__ = _tesseract_motion_planners_simple_python.delete_SimplePlannerPlanProfileMap

# Register SimplePlannerPlanProfileMap in _tesseract_motion_planners_simple_python:
_tesseract_motion_planners_simple_python.SimplePlannerPlanProfileMap_swigregister(SimplePlannerPlanProfileMap)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SimplePlannerCompositeProfileMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def iterator(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap___nonzero__(self)

    def __bool__(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap___bool__(self)

    def __len__(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap___getitem__(self, key)

    def __delitem__(self, key):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap___delitem__(self, key)

    def has_key(self, key):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_has_key(self, key)

    def keys(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_keys(self)

    def values(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_values(self)

    def items(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_items(self)

    def __contains__(self, key):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap___contains__(self, key)

    def key_iterator(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_key_iterator(self)

    def value_iterator(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_value_iterator(self)

    def __setitem__(self, *args):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap___setitem__(self, *args)

    def asdict(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_asdict(self)

    def __init__(self, *args):
        _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_swiginit(self, _tesseract_motion_planners_simple_python.new_SimplePlannerCompositeProfileMap(*args))

    def empty(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_empty(self)

    def size(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_size(self)

    def swap(self, v):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_swap(self, v)

    def begin(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_begin(self)

    def end(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_end(self)

    def clear(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_clear(self)

    def get_allocator(self):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_get_allocator(self)

    def count(self, x):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_count(self, x)

    def erase(self, *args):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_erase(self, *args)

    def find(self, x):
        return _tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_find(self, x)
    __swig_destroy__ = _tesseract_motion_planners_simple_python.delete_SimplePlannerCompositeProfileMap

# Register SimplePlannerCompositeProfileMap in _tesseract_motion_planners_simple_python:
_tesseract_motion_planners_simple_python.SimplePlannerCompositeProfileMap_swigregister(SimplePlannerCompositeProfileMap)

def ProfileDictionary_hasProfileEntry_SimplePlannerPlanProfile(profile_dictionary, ns):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_hasProfileEntry_SimplePlannerPlanProfile(profile_dictionary, ns)

def ProfileDictionary_removeProfileEntry_SimplePlannerPlanProfile(profile_dictionary, ns):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_removeProfileEntry_SimplePlannerPlanProfile(profile_dictionary, ns)

def ProfileDictionary_getProfileEntry_SimplePlannerPlanProfile(profile_dictionary, ns):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_getProfileEntry_SimplePlannerPlanProfile(profile_dictionary, ns)

def ProfileDictionary_addProfile_SimplePlannerPlanProfile(profile_dictionary, ns, profile_name, profile):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_addProfile_SimplePlannerPlanProfile(profile_dictionary, ns, profile_name, profile)

def ProfileDictionary_getProfile_SimplePlannerPlanProfile(profile_dictionary, ns, profile_name):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_getProfile_SimplePlannerPlanProfile(profile_dictionary, ns, profile_name)

def ProfileDictionary_hasProfile_SimplePlannerPlanProfile(profile_dictionary, ns, profile_name):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_hasProfile_SimplePlannerPlanProfile(profile_dictionary, ns, profile_name)

def ProfileDictionary_removeProfile_SimplePlannerPlanProfile(profile_dictionary, ns, profile_name):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_removeProfile_SimplePlannerPlanProfile(profile_dictionary, ns, profile_name)

def ProfileDictionary_hasProfileEntry_SimplePlannerCompositeProfile(profile_dictionary, ns):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_hasProfileEntry_SimplePlannerCompositeProfile(profile_dictionary, ns)

def ProfileDictionary_removeProfileEntry_SimplePlannerCompositeProfile(profile_dictionary, ns):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_removeProfileEntry_SimplePlannerCompositeProfile(profile_dictionary, ns)

def ProfileDictionary_getProfileEntry_SimplePlannerCompositeProfile(profile_dictionary, ns):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_getProfileEntry_SimplePlannerCompositeProfile(profile_dictionary, ns)

def ProfileDictionary_addProfile_SimplePlannerCompositeProfile(profile_dictionary, ns, profile_name, profile):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_addProfile_SimplePlannerCompositeProfile(profile_dictionary, ns, profile_name, profile)

def ProfileDictionary_getProfile_SimplePlannerCompositeProfile(profile_dictionary, ns, profile_name):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_getProfile_SimplePlannerCompositeProfile(profile_dictionary, ns, profile_name)

def ProfileDictionary_hasProfile_SimplePlannerCompositeProfile(profile_dictionary, ns, profile_name):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_hasProfile_SimplePlannerCompositeProfile(profile_dictionary, ns, profile_name)

def ProfileDictionary_removeProfile_SimplePlannerCompositeProfile(profile_dictionary, ns, profile_name):
    return _tesseract_motion_planners_simple_python.ProfileDictionary_removeProfile_SimplePlannerCompositeProfile(profile_dictionary, ns, profile_name)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SimplePlannerLVSPlanProfile(SimplePlannerPlanProfile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        SimplePlannerLVSPlanProfile
        :type state_longest_valid_segment_length: float, optional
        :param state_longest_valid_segment_length: The maximum joint distance (norm of changes to all joint positions)
            between successive steps
        :type translation_longest_valid_segment_length: float, optional
        :param translation_longest_valid_segment_length: The maximum translation distance between successive steps
        :type rotation_longest_valid_segment_length: float, optional
        :param rotation_longest_valid_segment_length: The maximum rotational distance between successive steps
        :type min_steps: int, optional
        :param min_steps: The minimum number of steps for the plan
        """
        _tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_swiginit(self, _tesseract_motion_planners_simple_python.new_SimplePlannerLVSPlanProfile(*args))

    def generate(self, prev_instruction, prev_seed, base_instruction, next_instruction, request, global_manip_info):
        return _tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_generate(self, prev_instruction, prev_seed, base_instruction, next_instruction, request, global_manip_info)
    state_longest_valid_segment_length = property(_tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_state_longest_valid_segment_length_get, _tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_state_longest_valid_segment_length_set, doc=r""" The maximum joint distance, the norm of changes to all joint positions between successive steps.""")
    translation_longest_valid_segment_length = property(_tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_translation_longest_valid_segment_length_get, _tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_translation_longest_valid_segment_length_set, doc=r""" The maximum translation distance between successive steps""")
    rotation_longest_valid_segment_length = property(_tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_rotation_longest_valid_segment_length_get, _tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_rotation_longest_valid_segment_length_set, doc=r""" The maximum rotational distance between successive steps""")
    min_steps = property(_tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_min_steps_get, _tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_min_steps_set, doc=r""" The minimum number of steps for the plan""")
    max_steps = property(_tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_max_steps_get, _tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_max_steps_set, doc=r""" The maximum number of steps for the plan""")
    __swig_destroy__ = _tesseract_motion_planners_simple_python.delete_SimplePlannerLVSPlanProfile

# Register SimplePlannerLVSPlanProfile in _tesseract_motion_planners_simple_python:
_tesseract_motion_planners_simple_python.SimplePlannerLVSPlanProfile_swigregister(SimplePlannerLVSPlanProfile)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SimplePlannerLVSNoIKPlanProfile(SimplePlannerPlanProfile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        SimplePlannerLVSNoIKPlanProfile
        :type state_longest_valid_segment_length: float, optional
        :param state_longest_valid_segment_length: The maximum joint distance (norm of changes to all joint positions)
            between successive steps
        :type translation_longest_valid_segment_length: float, optional
        :param translation_longest_valid_segment_length: The maximum translation distance between successive steps
        :type rotation_longest_valid_segment_length: float, optional
        :param rotation_longest_valid_segment_length: The maximum rotational distance between successive steps
        :type min_steps: int, optional
        :param min_steps: The minimum number of steps for the plan
        :type max_steps: int, optional
        :param max_steps: The maximum number of steps for the plan
        """
        _tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_swiginit(self, _tesseract_motion_planners_simple_python.new_SimplePlannerLVSNoIKPlanProfile(*args))

    def generate(self, prev_instruction, prev_seed, base_instruction, next_instruction, request, global_manip_info):
        return _tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_generate(self, prev_instruction, prev_seed, base_instruction, next_instruction, request, global_manip_info)
    state_longest_valid_segment_length = property(_tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_state_longest_valid_segment_length_get, _tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_state_longest_valid_segment_length_set, doc=r""" The maximum joint distance, the norm of changes to all joint positions between successive steps.""")
    translation_longest_valid_segment_length = property(_tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_translation_longest_valid_segment_length_get, _tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_translation_longest_valid_segment_length_set, doc=r""" The maximum translation distance between successive steps""")
    rotation_longest_valid_segment_length = property(_tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_rotation_longest_valid_segment_length_get, _tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_rotation_longest_valid_segment_length_set, doc=r""" The maximum rotational distance between successive steps""")
    min_steps = property(_tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_min_steps_get, _tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_min_steps_set, doc=r""" The minimum number of steps for the plan""")
    max_steps = property(_tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_max_steps_get, _tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_max_steps_set, doc=r""" The maximum number of steps for the plan""")
    __swig_destroy__ = _tesseract_motion_planners_simple_python.delete_SimplePlannerLVSNoIKPlanProfile

# Register SimplePlannerLVSNoIKPlanProfile in _tesseract_motion_planners_simple_python:
_tesseract_motion_planners_simple_python.SimplePlannerLVSNoIKPlanProfile_swigregister(SimplePlannerLVSNoIKPlanProfile)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SimplePlannerFixedSizePlanProfile(SimplePlannerPlanProfile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, freespace_steps=10, linear_steps=10):
        r"""
        SimplePlannerFixedSizePlanProfile
        :type freespace_steps: int, optional
        :param freespace_steps: The number of steps to use for freespace instruction
        :type linear_steps: int, optional
        :param linear_steps: The number of steps to use for linear instruction
        """
        _tesseract_motion_planners_simple_python.SimplePlannerFixedSizePlanProfile_swiginit(self, _tesseract_motion_planners_simple_python.new_SimplePlannerFixedSizePlanProfile(freespace_steps, linear_steps))

    def generate(self, prev_instruction, prev_seed, base_instruction, next_instruction, request, global_manip_info):
        return _tesseract_motion_planners_simple_python.SimplePlannerFixedSizePlanProfile_generate(self, prev_instruction, prev_seed, base_instruction, next_instruction, request, global_manip_info)
    freespace_steps = property(_tesseract_motion_planners_simple_python.SimplePlannerFixedSizePlanProfile_freespace_steps_get, _tesseract_motion_planners_simple_python.SimplePlannerFixedSizePlanProfile_freespace_steps_set, doc=r""" The number of steps to use for freespace instruction""")
    linear_steps = property(_tesseract_motion_planners_simple_python.SimplePlannerFixedSizePlanProfile_linear_steps_get, _tesseract_motion_planners_simple_python.SimplePlannerFixedSizePlanProfile_linear_steps_set, doc=r""" The number of steps to use for linear instruction""")
    __swig_destroy__ = _tesseract_motion_planners_simple_python.delete_SimplePlannerFixedSizePlanProfile

# Register SimplePlannerFixedSizePlanProfile in _tesseract_motion_planners_simple_python:
_tesseract_motion_planners_simple_python.SimplePlannerFixedSizePlanProfile_swigregister(SimplePlannerFixedSizePlanProfile)
@_swig_add_metaclass(_SwigNonDynamicMeta)
class SimplePlannerFixedSizeAssignPlanProfile(SimplePlannerPlanProfile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)
    __repr__ = _swig_repr

    def __init__(self, freespace_steps=10, linear_steps=10):
        r"""
        SimplePlannerFixedSizeAssignPlanProfile
        :type freespace_steps: int, optional
        :param freespace_steps: The number of steps to use for freespace instruction
        :type linear_steps: int, optional
        :param linear_steps: The number of steps to use for linear instruction
        """
        _tesseract_motion_planners_simple_python.SimplePlannerFixedSizeAssignPlanProfile_swiginit(self, _tesseract_motion_planners_simple_python.new_SimplePlannerFixedSizeAssignPlanProfile(freespace_steps, linear_steps))

    def generate(self, prev_instruction, prev_seed, base_instruction, next_instruction, request, global_manip_info):
        return _tesseract_motion_planners_simple_python.SimplePlannerFixedSizeAssignPlanProfile_generate(self, prev_instruction, prev_seed, base_instruction, next_instruction, request, global_manip_info)
    freespace_steps = property(_tesseract_motion_planners_simple_python.SimplePlannerFixedSizeAssignPlanProfile_freespace_steps_get, _tesseract_motion_planners_simple_python.SimplePlannerFixedSizeAssignPlanProfile_freespace_steps_set, doc=r""" The number of steps to use for freespace instruction""")
    linear_steps = property(_tesseract_motion_planners_simple_python.SimplePlannerFixedSizeAssignPlanProfile_linear_steps_get, _tesseract_motion_planners_simple_python.SimplePlannerFixedSizeAssignPlanProfile_linear_steps_set, doc=r""" The number of steps to use for linear instruction""")
    __swig_destroy__ = _tesseract_motion_planners_simple_python.delete_SimplePlannerFixedSizeAssignPlanProfile

# Register SimplePlannerFixedSizeAssignPlanProfile in _tesseract_motion_planners_simple_python:
_tesseract_motion_planners_simple_python.SimplePlannerFixedSizeAssignPlanProfile_swigregister(SimplePlannerFixedSizeAssignPlanProfile)
class SimpleMotionPlanner(tesseract_robotics.tesseract_motion_planners.tesseract_motion_planners_python.MotionPlanner):
    r"""
    The simple planner is meant to be a tool for assigning values to the seed. The planner simply loops over all
    of the MoveInstructions and then calls the appropriate function from the profile. These functions do not depend on
    the seed, so this may be used to initialize the seed appropriately using e.g. linear interpolation.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r""" Construct a basic planner"""
        _tesseract_motion_planners_simple_python.SimpleMotionPlanner_swiginit(self, _tesseract_motion_planners_simple_python.new_SimpleMotionPlanner(name))
    __swig_destroy__ = _tesseract_motion_planners_simple_python.delete_SimpleMotionPlanner

    def solve(self, request):
        return _tesseract_motion_planners_simple_python.SimpleMotionPlanner_solve(self, request)

    def terminate(self):
        return _tesseract_motion_planners_simple_python.SimpleMotionPlanner_terminate(self)

    def clear(self):
        return _tesseract_motion_planners_simple_python.SimpleMotionPlanner_clear(self)

    def clone(self):
        return _tesseract_motion_planners_simple_python.SimpleMotionPlanner_clone(self)

# Register SimpleMotionPlanner in _tesseract_motion_planners_simple_python:
_tesseract_motion_planners_simple_python.SimpleMotionPlanner_swigregister(SimpleMotionPlanner)

