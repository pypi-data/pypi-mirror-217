"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class UserSiteCommonModelsNewStaticAnalyzerScan:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "arsa_file_id": "str",
        "application_file_id": "str",
        "scan_name": "str",
        "enable_mail_notification": "bool",
        "locale": "str",
        "app_id": "str",
        "execute": "bool",
        "fully_automatic": "bool",
        "personal": "bool",
        "comment": "str",
    }

    attribute_map = {
        "arsa_file_id": "ARSAFileId",
        "application_file_id": "ApplicationFileId",
        "scan_name": "ScanName",
        "enable_mail_notification": "EnableMailNotification",
        "locale": "Locale",
        "app_id": "AppId",
        "execute": "Execute",
        "fully_automatic": "FullyAutomatic",
        "personal": "Personal",
        "comment": "Comment",
    }

    def __init__(
        self,
        arsa_file_id=None,
        application_file_id=None,
        scan_name=None,
        enable_mail_notification=None,
        locale=None,
        app_id=None,
        execute=None,
        fully_automatic=None,
        personal=None,
        comment=None,
        _configuration=None,
    ):
        """UserSiteCommonModelsNewStaticAnalyzerScan - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._arsa_file_id = None
        self._application_file_id = None
        self._scan_name = None
        self._enable_mail_notification = None
        self._locale = None
        self._app_id = None
        self._execute = None
        self._fully_automatic = None
        self._personal = None
        self._comment = None
        self.discriminator = None

        if arsa_file_id is not None:
            self.arsa_file_id = arsa_file_id
        if application_file_id is not None:
            self.application_file_id = application_file_id
        self.scan_name = scan_name
        if enable_mail_notification is not None:
            self.enable_mail_notification = enable_mail_notification
        if locale is not None:
            self.locale = locale
        self.app_id = app_id
        if execute is not None:
            self.execute = execute
        if fully_automatic is not None:
            self.fully_automatic = fully_automatic
        if personal is not None:
            self.personal = personal
        if comment is not None:
            self.comment = comment

    @property
    def arsa_file_id(self):
        # type: () -> str
        """Gets the arsa_file_id of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :return: The arsa_file_id of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :rtype: str
        """
        return self._arsa_file_id

    @arsa_file_id.setter
    def arsa_file_id(self, arsa_file_id):
        """Sets the arsa_file_id of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :param arsa_file_id: The arsa_file_id of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :type: str
        """

        self._arsa_file_id = arsa_file_id

    @property
    def application_file_id(self):
        # type: () -> str
        """Gets the application_file_id of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :return: The application_file_id of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :rtype: str
        """
        return self._application_file_id

    @application_file_id.setter
    def application_file_id(self, application_file_id):
        """Sets the application_file_id of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :param application_file_id: The application_file_id of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :type: str
        """

        self._application_file_id = application_file_id

    @property
    def scan_name(self):
        # type: () -> str
        """Gets the scan_name of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :return: The scan_name of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :rtype: str
        """
        return self._scan_name

    @scan_name.setter
    def scan_name(self, scan_name):
        """Sets the scan_name of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :param scan_name: The scan_name of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :type: str
        """
        if self._configuration.client_side_validation and scan_name is None:
            raise ValueError("Invalid value for `scan_name`, must not be `None`")
        if (
            self._configuration.client_side_validation
            and scan_name is not None
            and len(scan_name) > 1024
        ):
            raise ValueError(
                "Invalid value for `scan_name`, length must be less than or equal to `1024`"
            )
        if (
            self._configuration.client_side_validation
            and scan_name is not None
            and len(scan_name) < 1
        ):
            raise ValueError(
                "Invalid value for `scan_name`, length must be greater than or equal to `1`"
            )

        self._scan_name = scan_name

    @property
    def enable_mail_notification(self):
        # type: () -> bool
        """Gets the enable_mail_notification of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :return: The enable_mail_notification of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :rtype: bool
        """
        return self._enable_mail_notification

    @enable_mail_notification.setter
    def enable_mail_notification(self, enable_mail_notification):
        """Sets the enable_mail_notification of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :param enable_mail_notification: The enable_mail_notification of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :type: bool
        """

        self._enable_mail_notification = enable_mail_notification

    @property
    def locale(self):
        # type: () -> str
        """Gets the locale of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :return: The locale of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :param locale: The locale of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :type: str
        """
        if self._configuration.client_side_validation and locale is not None and len(locale) > 10:
            raise ValueError(
                "Invalid value for `locale`, length must be less than or equal to `10`"
            )
        if self._configuration.client_side_validation and locale is not None and len(locale) < 0:
            raise ValueError(
                "Invalid value for `locale`, length must be greater than or equal to `0`"
            )

        self._locale = locale

    @property
    def app_id(self):
        # type: () -> str
        """Gets the app_id of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :return: The app_id of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :param app_id: The app_id of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :type: str
        """
        if self._configuration.client_side_validation and app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def execute(self):
        # type: () -> bool
        """Gets the execute of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :return: The execute of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :rtype: bool
        """
        return self._execute

    @execute.setter
    def execute(self, execute):
        """Sets the execute of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :param execute: The execute of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :type: bool
        """

        self._execute = execute

    @property
    def fully_automatic(self):
        # type: () -> bool
        """Gets the fully_automatic of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :return: The fully_automatic of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :rtype: bool
        """
        return self._fully_automatic

    @fully_automatic.setter
    def fully_automatic(self, fully_automatic):
        """Sets the fully_automatic of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :param fully_automatic: The fully_automatic of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :type: bool
        """

        self._fully_automatic = fully_automatic

    @property
    def personal(self):
        # type: () -> bool
        """Gets the personal of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :return: The personal of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :rtype: bool
        """
        return self._personal

    @personal.setter
    def personal(self, personal):
        """Sets the personal of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :param personal: The personal of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :type: bool
        """

        self._personal = personal

    @property
    def comment(self):
        # type: () -> str
        """Gets the comment of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :return: The comment of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UserSiteCommonModelsNewStaticAnalyzerScan.


        :param comment: The comment of this UserSiteCommonModelsNewStaticAnalyzerScan.
        :type: str
        """
        if (
            self._configuration.client_side_validation
            and comment is not None
            and len(comment) > 2048
        ):
            raise ValueError(
                "Invalid value for `comment`, length must be less than or equal to `2048`"
            )
        if self._configuration.client_side_validation and comment is not None and len(comment) < 0:
            raise ValueError(
                "Invalid value for `comment`, length must be greater than or equal to `0`"
            )

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserSiteCommonModelsNewStaticAnalyzerScan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSiteCommonModelsNewStaticAnalyzerScan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSiteCommonModelsNewStaticAnalyzerScan):
            return True

        return self.to_dict() != other.to_dict()
