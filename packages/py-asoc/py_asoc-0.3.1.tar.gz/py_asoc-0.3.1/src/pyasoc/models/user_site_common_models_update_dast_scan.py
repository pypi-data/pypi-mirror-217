"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class UserSiteCommonModelsUpdateDastScan:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "presence_id": "str",
        "recurrence_rule": "str",
        "recurrence_start_date": "datetime",
        "recurrence_end_date": "datetime",
        "name": "str",
        "enable_mail_notifications": "bool",
        "locale": "str",
        "fully_automatic": "bool",
    }

    attribute_map = {
        "presence_id": "PresenceId",
        "recurrence_rule": "RecurrenceRule",
        "recurrence_start_date": "RecurrenceStartDate",
        "recurrence_end_date": "RecurrenceEndDate",
        "name": "Name",
        "enable_mail_notifications": "EnableMailNotifications",
        "locale": "Locale",
        "fully_automatic": "FullyAutomatic",
    }

    def __init__(
        self,
        presence_id=None,
        recurrence_rule=None,
        recurrence_start_date=None,
        recurrence_end_date=None,
        name=None,
        enable_mail_notifications=None,
        locale=None,
        fully_automatic=None,
        _configuration=None,
    ):
        """UserSiteCommonModelsUpdateDastScan - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._presence_id = None
        self._recurrence_rule = None
        self._recurrence_start_date = None
        self._recurrence_end_date = None
        self._name = None
        self._enable_mail_notifications = None
        self._locale = None
        self._fully_automatic = None
        self.discriminator = None

        if presence_id is not None:
            self.presence_id = presence_id
        if recurrence_rule is not None:
            self.recurrence_rule = recurrence_rule
        if recurrence_start_date is not None:
            self.recurrence_start_date = recurrence_start_date
        if recurrence_end_date is not None:
            self.recurrence_end_date = recurrence_end_date
        if name is not None:
            self.name = name
        if enable_mail_notifications is not None:
            self.enable_mail_notifications = enable_mail_notifications
        if locale is not None:
            self.locale = locale
        if fully_automatic is not None:
            self.fully_automatic = fully_automatic

    @property
    def presence_id(self):
        # type: () -> str
        """Gets the presence_id of this UserSiteCommonModelsUpdateDastScan.


        :return: The presence_id of this UserSiteCommonModelsUpdateDastScan.
        :rtype: str
        """
        return self._presence_id

    @presence_id.setter
    def presence_id(self, presence_id):
        """Sets the presence_id of this UserSiteCommonModelsUpdateDastScan.


        :param presence_id: The presence_id of this UserSiteCommonModelsUpdateDastScan.
        :type: str
        """

        self._presence_id = presence_id

    @property
    def recurrence_rule(self):
        # type: () -> str
        """Gets the recurrence_rule of this UserSiteCommonModelsUpdateDastScan.


        :return: The recurrence_rule of this UserSiteCommonModelsUpdateDastScan.
        :rtype: str
        """
        return self._recurrence_rule

    @recurrence_rule.setter
    def recurrence_rule(self, recurrence_rule):
        """Sets the recurrence_rule of this UserSiteCommonModelsUpdateDastScan.


        :param recurrence_rule: The recurrence_rule of this UserSiteCommonModelsUpdateDastScan.
        :type: str
        """

        self._recurrence_rule = recurrence_rule

    @property
    def recurrence_start_date(self):
        # type: () -> datetime
        """Gets the recurrence_start_date of this UserSiteCommonModelsUpdateDastScan.


        :return: The recurrence_start_date of this UserSiteCommonModelsUpdateDastScan.
        :rtype: datetime
        """
        return self._recurrence_start_date

    @recurrence_start_date.setter
    def recurrence_start_date(self, recurrence_start_date):
        """Sets the recurrence_start_date of this UserSiteCommonModelsUpdateDastScan.


        :param recurrence_start_date: The recurrence_start_date of this UserSiteCommonModelsUpdateDastScan.
        :type: datetime
        """

        self._recurrence_start_date = recurrence_start_date

    @property
    def recurrence_end_date(self):
        # type: () -> datetime
        """Gets the recurrence_end_date of this UserSiteCommonModelsUpdateDastScan.


        :return: The recurrence_end_date of this UserSiteCommonModelsUpdateDastScan.
        :rtype: datetime
        """
        return self._recurrence_end_date

    @recurrence_end_date.setter
    def recurrence_end_date(self, recurrence_end_date):
        """Sets the recurrence_end_date of this UserSiteCommonModelsUpdateDastScan.


        :param recurrence_end_date: The recurrence_end_date of this UserSiteCommonModelsUpdateDastScan.
        :type: datetime
        """

        self._recurrence_end_date = recurrence_end_date

    @property
    def name(self):
        # type: () -> str
        """Gets the name of this UserSiteCommonModelsUpdateDastScan.


        :return: The name of this UserSiteCommonModelsUpdateDastScan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserSiteCommonModelsUpdateDastScan.


        :param name: The name of this UserSiteCommonModelsUpdateDastScan.
        :type: str
        """
        if self._configuration.client_side_validation and name is not None and len(name) > 1024:
            raise ValueError(
                "Invalid value for `name`, length must be less than or equal to `1024`"
            )
        if self._configuration.client_side_validation and name is not None and len(name) < 1:
            raise ValueError(
                "Invalid value for `name`, length must be greater than or equal to `1`"
            )

        self._name = name

    @property
    def enable_mail_notifications(self):
        # type: () -> bool
        """Gets the enable_mail_notifications of this UserSiteCommonModelsUpdateDastScan.


        :return: The enable_mail_notifications of this UserSiteCommonModelsUpdateDastScan.
        :rtype: bool
        """
        return self._enable_mail_notifications

    @enable_mail_notifications.setter
    def enable_mail_notifications(self, enable_mail_notifications):
        """Sets the enable_mail_notifications of this UserSiteCommonModelsUpdateDastScan.


        :param enable_mail_notifications: The enable_mail_notifications of this UserSiteCommonModelsUpdateDastScan.
        :type: bool
        """

        self._enable_mail_notifications = enable_mail_notifications

    @property
    def locale(self):
        # type: () -> str
        """Gets the locale of this UserSiteCommonModelsUpdateDastScan.


        :return: The locale of this UserSiteCommonModelsUpdateDastScan.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UserSiteCommonModelsUpdateDastScan.


        :param locale: The locale of this UserSiteCommonModelsUpdateDastScan.
        :type: str
        """
        if self._configuration.client_side_validation and locale is not None and len(locale) > 10:
            raise ValueError(
                "Invalid value for `locale`, length must be less than or equal to `10`"
            )
        if self._configuration.client_side_validation and locale is not None and len(locale) < 0:
            raise ValueError(
                "Invalid value for `locale`, length must be greater than or equal to `0`"
            )

        self._locale = locale

    @property
    def fully_automatic(self):
        # type: () -> bool
        """Gets the fully_automatic of this UserSiteCommonModelsUpdateDastScan.


        :return: The fully_automatic of this UserSiteCommonModelsUpdateDastScan.
        :rtype: bool
        """
        return self._fully_automatic

    @fully_automatic.setter
    def fully_automatic(self, fully_automatic):
        """Sets the fully_automatic of this UserSiteCommonModelsUpdateDastScan.


        :param fully_automatic: The fully_automatic of this UserSiteCommonModelsUpdateDastScan.
        :type: bool
        """

        self._fully_automatic = fully_automatic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserSiteCommonModelsUpdateDastScan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSiteCommonModelsUpdateDastScan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSiteCommonModelsUpdateDastScan):
            return True

        return self.to_dict() != other.to_dict()
