"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class MicrosoftDataEdmIEdmModel:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "schema_elements": "list[MicrosoftDataEdmIEdmSchemaElement]",
        "vocabulary_annotations": "list[MicrosoftDataEdmAnnotationsIEdmVocabularyAnnotation]",
        "referenced_models": "list[MicrosoftDataEdmIEdmModel]",
        "direct_value_annotations_manager": "MicrosoftDataEdmAnnotationsIEdmDirectValueAnnotationsManager",
    }

    attribute_map = {
        "schema_elements": "SchemaElements",
        "vocabulary_annotations": "VocabularyAnnotations",
        "referenced_models": "ReferencedModels",
        "direct_value_annotations_manager": "DirectValueAnnotationsManager",
    }

    def __init__(
        self,
        schema_elements=None,
        vocabulary_annotations=None,
        referenced_models=None,
        direct_value_annotations_manager=None,
        _configuration=None,
    ):
        """MicrosoftDataEdmIEdmModel - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._schema_elements = None
        self._vocabulary_annotations = None
        self._referenced_models = None
        self._direct_value_annotations_manager = None
        self.discriminator = None

        if schema_elements is not None:
            self.schema_elements = schema_elements
        if vocabulary_annotations is not None:
            self.vocabulary_annotations = vocabulary_annotations
        if referenced_models is not None:
            self.referenced_models = referenced_models
        if direct_value_annotations_manager is not None:
            self.direct_value_annotations_manager = direct_value_annotations_manager

    @property
    def schema_elements(self):
        # type: () -> list[MicrosoftDataEdmIEdmSchemaElement]
        """Gets the schema_elements of this MicrosoftDataEdmIEdmModel.


        :return: The schema_elements of this MicrosoftDataEdmIEdmModel.
        :rtype: list[MicrosoftDataEdmIEdmSchemaElement]
        """
        return self._schema_elements

    @schema_elements.setter
    def schema_elements(self, schema_elements):
        """Sets the schema_elements of this MicrosoftDataEdmIEdmModel.


        :param schema_elements: The schema_elements of this MicrosoftDataEdmIEdmModel.
        :type: list[MicrosoftDataEdmIEdmSchemaElement]
        """

        self._schema_elements = schema_elements

    @property
    def vocabulary_annotations(self):
        # type: () -> list[MicrosoftDataEdmAnnotationsIEdmVocabularyAnnotation]
        """Gets the vocabulary_annotations of this MicrosoftDataEdmIEdmModel.


        :return: The vocabulary_annotations of this MicrosoftDataEdmIEdmModel.
        :rtype: list[MicrosoftDataEdmAnnotationsIEdmVocabularyAnnotation]
        """
        return self._vocabulary_annotations

    @vocabulary_annotations.setter
    def vocabulary_annotations(self, vocabulary_annotations):
        """Sets the vocabulary_annotations of this MicrosoftDataEdmIEdmModel.


        :param vocabulary_annotations: The vocabulary_annotations of this MicrosoftDataEdmIEdmModel.
        :type: list[MicrosoftDataEdmAnnotationsIEdmVocabularyAnnotation]
        """

        self._vocabulary_annotations = vocabulary_annotations

    @property
    def referenced_models(self):
        # type: () -> list[MicrosoftDataEdmIEdmModel]
        """Gets the referenced_models of this MicrosoftDataEdmIEdmModel.


        :return: The referenced_models of this MicrosoftDataEdmIEdmModel.
        :rtype: list[MicrosoftDataEdmIEdmModel]
        """
        return self._referenced_models

    @referenced_models.setter
    def referenced_models(self, referenced_models):
        """Sets the referenced_models of this MicrosoftDataEdmIEdmModel.


        :param referenced_models: The referenced_models of this MicrosoftDataEdmIEdmModel.
        :type: list[MicrosoftDataEdmIEdmModel]
        """

        self._referenced_models = referenced_models

    @property
    def direct_value_annotations_manager(self):
        # type: () -> MicrosoftDataEdmAnnotationsIEdmDirectValueAnnotationsManager
        """Gets the direct_value_annotations_manager of this MicrosoftDataEdmIEdmModel.


        :return: The direct_value_annotations_manager of this MicrosoftDataEdmIEdmModel.
        :rtype: MicrosoftDataEdmAnnotationsIEdmDirectValueAnnotationsManager
        """
        return self._direct_value_annotations_manager

    @direct_value_annotations_manager.setter
    def direct_value_annotations_manager(self, direct_value_annotations_manager):
        """Sets the direct_value_annotations_manager of this MicrosoftDataEdmIEdmModel.


        :param direct_value_annotations_manager: The direct_value_annotations_manager of this MicrosoftDataEdmIEdmModel.
        :type: MicrosoftDataEdmAnnotationsIEdmDirectValueAnnotationsManager
        """

        self._direct_value_annotations_manager = direct_value_annotations_manager

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(MicrosoftDataEdmIEdmModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftDataEdmIEdmModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MicrosoftDataEdmIEdmModel):
            return True

        return self.to_dict() != other.to_dict()
