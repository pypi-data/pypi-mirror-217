"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class UserSiteCommonModelsReportStatusModel:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "name": "str",
        "status": "str",
        "progress": "int",
        "valid_until": "datetime",
        "html_instead_of_pdf": "bool",
        "download_link": "str",
        "report_file_type": "str",
    }

    attribute_map = {
        "id": "Id",
        "name": "Name",
        "status": "Status",
        "progress": "Progress",
        "valid_until": "ValidUntil",
        "html_instead_of_pdf": "HtmlInsteadOfPdf",
        "download_link": "DownloadLink",
        "report_file_type": "ReportFileType",
    }

    def __init__(
        self,
        id=None,
        name=None,
        status=None,
        progress=None,
        valid_until=None,
        html_instead_of_pdf=None,
        download_link=None,
        report_file_type=None,
        _configuration=None,
    ):
        """UserSiteCommonModelsReportStatusModel - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._status = None
        self._progress = None
        self._valid_until = None
        self._html_instead_of_pdf = None
        self._download_link = None
        self._report_file_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if progress is not None:
            self.progress = progress
        if valid_until is not None:
            self.valid_until = valid_until
        if html_instead_of_pdf is not None:
            self.html_instead_of_pdf = html_instead_of_pdf
        if download_link is not None:
            self.download_link = download_link
        if report_file_type is not None:
            self.report_file_type = report_file_type

    @property
    def id(self):
        # type: () -> str
        """Gets the id of this UserSiteCommonModelsReportStatusModel.


        :return: The id of this UserSiteCommonModelsReportStatusModel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserSiteCommonModelsReportStatusModel.


        :param id: The id of this UserSiteCommonModelsReportStatusModel.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        # type: () -> str
        """Gets the name of this UserSiteCommonModelsReportStatusModel.


        :return: The name of this UserSiteCommonModelsReportStatusModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserSiteCommonModelsReportStatusModel.


        :param name: The name of this UserSiteCommonModelsReportStatusModel.
        :type: str
        """

        self._name = name

    @property
    def status(self):
        # type: () -> str
        """Gets the status of this UserSiteCommonModelsReportStatusModel.


        :return: The status of this UserSiteCommonModelsReportStatusModel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserSiteCommonModelsReportStatusModel.


        :param status: The status of this UserSiteCommonModelsReportStatusModel.
        :type: str
        """
        allowed_values = [
            "Pending",
            "Starting",
            "Running",
            "Failed",
            "Ready",
            "Deleted",
        ]
        if self._configuration.client_side_validation and status not in allowed_values:
            raise ValueError(
                f"Invalid value for `status` ({status}), must be one of {allowed_values}"
            )

        self._status = status

    @property
    def progress(self):
        # type: () -> int
        """Gets the progress of this UserSiteCommonModelsReportStatusModel.


        :return: The progress of this UserSiteCommonModelsReportStatusModel.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this UserSiteCommonModelsReportStatusModel.


        :param progress: The progress of this UserSiteCommonModelsReportStatusModel.
        :type: int
        """

        self._progress = progress

    @property
    def valid_until(self):
        # type: () -> datetime
        """Gets the valid_until of this UserSiteCommonModelsReportStatusModel.


        :return: The valid_until of this UserSiteCommonModelsReportStatusModel.
        :rtype: datetime
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this UserSiteCommonModelsReportStatusModel.


        :param valid_until: The valid_until of this UserSiteCommonModelsReportStatusModel.
        :type: datetime
        """

        self._valid_until = valid_until

    @property
    def html_instead_of_pdf(self):
        # type: () -> bool
        """Gets the html_instead_of_pdf of this UserSiteCommonModelsReportStatusModel.


        :return: The html_instead_of_pdf of this UserSiteCommonModelsReportStatusModel.
        :rtype: bool
        """
        return self._html_instead_of_pdf

    @html_instead_of_pdf.setter
    def html_instead_of_pdf(self, html_instead_of_pdf):
        """Sets the html_instead_of_pdf of this UserSiteCommonModelsReportStatusModel.


        :param html_instead_of_pdf: The html_instead_of_pdf of this UserSiteCommonModelsReportStatusModel.
        :type: bool
        """

        self._html_instead_of_pdf = html_instead_of_pdf

    @property
    def download_link(self):
        # type: () -> str
        """Gets the download_link of this UserSiteCommonModelsReportStatusModel.


        :return: The download_link of this UserSiteCommonModelsReportStatusModel.
        :rtype: str
        """
        return self._download_link

    @download_link.setter
    def download_link(self, download_link):
        """Sets the download_link of this UserSiteCommonModelsReportStatusModel.


        :param download_link: The download_link of this UserSiteCommonModelsReportStatusModel.
        :type: str
        """

        self._download_link = download_link

    @property
    def report_file_type(self):
        # type: () -> str
        """Gets the report_file_type of this UserSiteCommonModelsReportStatusModel.


        :return: The report_file_type of this UserSiteCommonModelsReportStatusModel.
        :rtype: str
        """
        return self._report_file_type

    @report_file_type.setter
    def report_file_type(self, report_file_type):
        """Sets the report_file_type of this UserSiteCommonModelsReportStatusModel.


        :param report_file_type: The report_file_type of this UserSiteCommonModelsReportStatusModel.
        :type: str
        """

        self._report_file_type = report_file_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserSiteCommonModelsReportStatusModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSiteCommonModelsReportStatusModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSiteCommonModelsReportStatusModel):
            return True

        return self.to_dict() != other.to_dict()
