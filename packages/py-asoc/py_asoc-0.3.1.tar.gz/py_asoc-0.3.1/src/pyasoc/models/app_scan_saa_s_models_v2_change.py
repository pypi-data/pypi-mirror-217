"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class AppScanSaaSModelsV2Change:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"_property": "str", "old_value": "str", "new_value": "str"}

    attribute_map = {
        "_property": "Property",
        "old_value": "OldValue",
        "new_value": "NewValue",
    }

    def __init__(self, _property=None, old_value=None, new_value=None, _configuration=None):
        """AppScanSaaSModelsV2Change - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__property = None
        self._old_value = None
        self._new_value = None
        self.discriminator = None

        if _property is not None:
            self._property = _property
        if old_value is not None:
            self.old_value = old_value
        if new_value is not None:
            self.new_value = new_value

    @property
    def _property(self):
        # type: () -> str
        """Gets the _property of this AppScanSaaSModelsV2Change.


        :return: The _property of this AppScanSaaSModelsV2Change.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this AppScanSaaSModelsV2Change.


        :param _property: The _property of this AppScanSaaSModelsV2Change.
        :type: str
        """

        self.__property = _property

    @property
    def old_value(self):
        # type: () -> str
        """Gets the old_value of this AppScanSaaSModelsV2Change.


        :return: The old_value of this AppScanSaaSModelsV2Change.
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this AppScanSaaSModelsV2Change.


        :param old_value: The old_value of this AppScanSaaSModelsV2Change.
        :type: str
        """

        self._old_value = old_value

    @property
    def new_value(self):
        # type: () -> str
        """Gets the new_value of this AppScanSaaSModelsV2Change.


        :return: The new_value of this AppScanSaaSModelsV2Change.
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this AppScanSaaSModelsV2Change.


        :param new_value: The new_value of this AppScanSaaSModelsV2Change.
        :type: str
        """

        self._new_value = new_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AppScanSaaSModelsV2Change, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppScanSaaSModelsV2Change):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppScanSaaSModelsV2Change):
            return True

        return self.to_dict() != other.to_dict()
