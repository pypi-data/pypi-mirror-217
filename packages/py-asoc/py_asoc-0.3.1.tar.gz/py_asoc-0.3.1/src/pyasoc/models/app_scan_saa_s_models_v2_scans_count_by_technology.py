"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class AppScanSaaSModelsV2ScansCountByTechnology:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"technology": "str", "count": "int"}

    attribute_map = {"technology": "Technology", "count": "Count"}

    def __init__(self, technology=None, count=None, _configuration=None):
        """AppScanSaaSModelsV2ScansCountByTechnology - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._technology = None
        self._count = None
        self.discriminator = None

        if technology is not None:
            self.technology = technology
        if count is not None:
            self.count = count

    @property
    def technology(self):
        # type: () -> str
        """Gets the technology of this AppScanSaaSModelsV2ScansCountByTechnology.


        :return: The technology of this AppScanSaaSModelsV2ScansCountByTechnology.
        :rtype: str
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this AppScanSaaSModelsV2ScansCountByTechnology.


        :param technology: The technology of this AppScanSaaSModelsV2ScansCountByTechnology.
        :type: str
        """
        allowed_values = [
            "DynamicAnalyzer",
            "StaticAnalyzer",
            "MobileAnalyzerAndroid",
            "MobileAnalyzerIos",
            "IFA",
            "DastAutomation",
            "IASTAnalyzer",
            "ScaAnalyzer",
        ]
        if self._configuration.client_side_validation and technology not in allowed_values:
            raise ValueError(
                "Invalid value for `technology` ({}), must be one of {}".format(
                    technology, allowed_values
                )
            )

        self._technology = technology

    @property
    def count(self):
        # type: () -> int
        """Gets the count of this AppScanSaaSModelsV2ScansCountByTechnology.


        :return: The count of this AppScanSaaSModelsV2ScansCountByTechnology.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AppScanSaaSModelsV2ScansCountByTechnology.


        :param count: The count of this AppScanSaaSModelsV2ScansCountByTechnology.
        :type: int
        """

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AppScanSaaSModelsV2ScansCountByTechnology, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppScanSaaSModelsV2ScansCountByTechnology):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppScanSaaSModelsV2ScansCountByTechnology):
            return True

        return self.to_dict() != other.to_dict()
