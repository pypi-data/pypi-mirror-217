"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class UserSiteCommonModelsIssueMergeModel:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "new_issues": "int",
        "merged_issues": "int",
        "reopened_issues": "int",
    }

    attribute_map = {
        "new_issues": "NewIssues",
        "merged_issues": "MergedIssues",
        "reopened_issues": "ReopenedIssues",
    }

    def __init__(
        self,
        new_issues=None,
        merged_issues=None,
        reopened_issues=None,
        _configuration=None,
    ):
        """UserSiteCommonModelsIssueMergeModel - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._new_issues = None
        self._merged_issues = None
        self._reopened_issues = None
        self.discriminator = None

        if new_issues is not None:
            self.new_issues = new_issues
        if merged_issues is not None:
            self.merged_issues = merged_issues
        if reopened_issues is not None:
            self.reopened_issues = reopened_issues

    @property
    def new_issues(self):
        # type: () -> int
        """Gets the new_issues of this UserSiteCommonModelsIssueMergeModel.


        :return: The new_issues of this UserSiteCommonModelsIssueMergeModel.
        :rtype: int
        """
        return self._new_issues

    @new_issues.setter
    def new_issues(self, new_issues):
        """Sets the new_issues of this UserSiteCommonModelsIssueMergeModel.


        :param new_issues: The new_issues of this UserSiteCommonModelsIssueMergeModel.
        :type: int
        """

        self._new_issues = new_issues

    @property
    def merged_issues(self):
        # type: () -> int
        """Gets the merged_issues of this UserSiteCommonModelsIssueMergeModel.


        :return: The merged_issues of this UserSiteCommonModelsIssueMergeModel.
        :rtype: int
        """
        return self._merged_issues

    @merged_issues.setter
    def merged_issues(self, merged_issues):
        """Sets the merged_issues of this UserSiteCommonModelsIssueMergeModel.


        :param merged_issues: The merged_issues of this UserSiteCommonModelsIssueMergeModel.
        :type: int
        """

        self._merged_issues = merged_issues

    @property
    def reopened_issues(self):
        # type: () -> int
        """Gets the reopened_issues of this UserSiteCommonModelsIssueMergeModel.


        :return: The reopened_issues of this UserSiteCommonModelsIssueMergeModel.
        :rtype: int
        """
        return self._reopened_issues

    @reopened_issues.setter
    def reopened_issues(self, reopened_issues):
        """Sets the reopened_issues of this UserSiteCommonModelsIssueMergeModel.


        :param reopened_issues: The reopened_issues of this UserSiteCommonModelsIssueMergeModel.
        :type: int
        """

        self._reopened_issues = reopened_issues

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserSiteCommonModelsIssueMergeModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSiteCommonModelsIssueMergeModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSiteCommonModelsIssueMergeModel):
            return True

        return self.to_dict() != other.to_dict()
