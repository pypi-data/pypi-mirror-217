"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class SystemWebHttpODataQueryODataRawQueryOptions:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "filter": "str",
        "order_by": "str",
        "top": "str",
        "skip": "str",
        "select": "str",
        "expand": "str",
        "inline_count": "str",
        "format": "str",
        "skip_token": "str",
    }

    attribute_map = {
        "filter": "Filter",
        "order_by": "OrderBy",
        "top": "Top",
        "skip": "Skip",
        "select": "Select",
        "expand": "Expand",
        "inline_count": "InlineCount",
        "format": "Format",
        "skip_token": "SkipToken",
    }

    def __init__(
        self,
        filter=None,
        order_by=None,
        top=None,
        skip=None,
        select=None,
        expand=None,
        inline_count=None,
        format=None,
        skip_token=None,
        _configuration=None,
    ):
        """SystemWebHttpODataQueryODataRawQueryOptions - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._filter = None
        self._order_by = None
        self._top = None
        self._skip = None
        self._select = None
        self._expand = None
        self._inline_count = None
        self._format = None
        self._skip_token = None
        self.discriminator = None

        if filter is not None:
            self.filter = filter
        if order_by is not None:
            self.order_by = order_by
        if top is not None:
            self.top = top
        if skip is not None:
            self.skip = skip
        if select is not None:
            self.select = select
        if expand is not None:
            self.expand = expand
        if inline_count is not None:
            self.inline_count = inline_count
        if format is not None:
            self.format = format
        if skip_token is not None:
            self.skip_token = skip_token

    @property
    def filter(self):
        # type: () -> str
        """Gets the filter of this SystemWebHttpODataQueryODataRawQueryOptions.


        :return: The filter of this SystemWebHttpODataQueryODataRawQueryOptions.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SystemWebHttpODataQueryODataRawQueryOptions.


        :param filter: The filter of this SystemWebHttpODataQueryODataRawQueryOptions.
        :type: str
        """

        self._filter = filter

    @property
    def order_by(self):
        # type: () -> str
        """Gets the order_by of this SystemWebHttpODataQueryODataRawQueryOptions.


        :return: The order_by of this SystemWebHttpODataQueryODataRawQueryOptions.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this SystemWebHttpODataQueryODataRawQueryOptions.


        :param order_by: The order_by of this SystemWebHttpODataQueryODataRawQueryOptions.
        :type: str
        """

        self._order_by = order_by

    @property
    def top(self):
        # type: () -> str
        """Gets the top of this SystemWebHttpODataQueryODataRawQueryOptions.


        :return: The top of this SystemWebHttpODataQueryODataRawQueryOptions.
        :rtype: str
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this SystemWebHttpODataQueryODataRawQueryOptions.


        :param top: The top of this SystemWebHttpODataQueryODataRawQueryOptions.
        :type: str
        """

        self._top = top

    @property
    def skip(self):
        # type: () -> str
        """Gets the skip of this SystemWebHttpODataQueryODataRawQueryOptions.


        :return: The skip of this SystemWebHttpODataQueryODataRawQueryOptions.
        :rtype: str
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this SystemWebHttpODataQueryODataRawQueryOptions.


        :param skip: The skip of this SystemWebHttpODataQueryODataRawQueryOptions.
        :type: str
        """

        self._skip = skip

    @property
    def select(self):
        # type: () -> str
        """Gets the select of this SystemWebHttpODataQueryODataRawQueryOptions.


        :return: The select of this SystemWebHttpODataQueryODataRawQueryOptions.
        :rtype: str
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this SystemWebHttpODataQueryODataRawQueryOptions.


        :param select: The select of this SystemWebHttpODataQueryODataRawQueryOptions.
        :type: str
        """

        self._select = select

    @property
    def expand(self):
        # type: () -> str
        """Gets the expand of this SystemWebHttpODataQueryODataRawQueryOptions.


        :return: The expand of this SystemWebHttpODataQueryODataRawQueryOptions.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this SystemWebHttpODataQueryODataRawQueryOptions.


        :param expand: The expand of this SystemWebHttpODataQueryODataRawQueryOptions.
        :type: str
        """

        self._expand = expand

    @property
    def inline_count(self):
        # type: () -> str
        """Gets the inline_count of this SystemWebHttpODataQueryODataRawQueryOptions.


        :return: The inline_count of this SystemWebHttpODataQueryODataRawQueryOptions.
        :rtype: str
        """
        return self._inline_count

    @inline_count.setter
    def inline_count(self, inline_count):
        """Sets the inline_count of this SystemWebHttpODataQueryODataRawQueryOptions.


        :param inline_count: The inline_count of this SystemWebHttpODataQueryODataRawQueryOptions.
        :type: str
        """

        self._inline_count = inline_count

    @property
    def format(self):
        # type: () -> str
        """Gets the format of this SystemWebHttpODataQueryODataRawQueryOptions.


        :return: The format of this SystemWebHttpODataQueryODataRawQueryOptions.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SystemWebHttpODataQueryODataRawQueryOptions.


        :param format: The format of this SystemWebHttpODataQueryODataRawQueryOptions.
        :type: str
        """

        self._format = format

    @property
    def skip_token(self):
        # type: () -> str
        """Gets the skip_token of this SystemWebHttpODataQueryODataRawQueryOptions.


        :return: The skip_token of this SystemWebHttpODataQueryODataRawQueryOptions.
        :rtype: str
        """
        return self._skip_token

    @skip_token.setter
    def skip_token(self, skip_token):
        """Sets the skip_token of this SystemWebHttpODataQueryODataRawQueryOptions.


        :param skip_token: The skip_token of this SystemWebHttpODataQueryODataRawQueryOptions.
        :type: str
        """

        self._skip_token = skip_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SystemWebHttpODataQueryODataRawQueryOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemWebHttpODataQueryODataRawQueryOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemWebHttpODataQueryODataRawQueryOptions):
            return True

        return self.to_dict() != other.to_dict()
