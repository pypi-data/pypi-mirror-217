"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class CommonModelsSCXAccountSCXUserInfo:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "username": "str",
        "is_admin": "bool",
        "email": "str",
        "phone_number": "str",
        "first_name": "str",
        "last_name": "str",
        "idle_time_for_signout": "int",
    }

    attribute_map = {
        "username": "Username",
        "is_admin": "IsAdmin",
        "email": "Email",
        "phone_number": "PhoneNumber",
        "first_name": "FirstName",
        "last_name": "LastName",
        "idle_time_for_signout": "IdleTimeForSignout",
    }

    def __init__(
        self,
        username=None,
        is_admin=None,
        email=None,
        phone_number=None,
        first_name=None,
        last_name=None,
        idle_time_for_signout=None,
        _configuration=None,
    ):
        """CommonModelsSCXAccountSCXUserInfo - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._username = None
        self._is_admin = None
        self._email = None
        self._phone_number = None
        self._first_name = None
        self._last_name = None
        self._idle_time_for_signout = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if is_admin is not None:
            self.is_admin = is_admin
        if email is not None:
            self.email = email
        if phone_number is not None:
            self.phone_number = phone_number
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if idle_time_for_signout is not None:
            self.idle_time_for_signout = idle_time_for_signout

    @property
    def username(self):
        # type: () -> str
        """Gets the username of this CommonModelsSCXAccountSCXUserInfo.


        :return: The username of this CommonModelsSCXAccountSCXUserInfo.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CommonModelsSCXAccountSCXUserInfo.


        :param username: The username of this CommonModelsSCXAccountSCXUserInfo.
        :type: str
        """

        self._username = username

    @property
    def is_admin(self):
        # type: () -> bool
        """Gets the is_admin of this CommonModelsSCXAccountSCXUserInfo.


        :return: The is_admin of this CommonModelsSCXAccountSCXUserInfo.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this CommonModelsSCXAccountSCXUserInfo.


        :param is_admin: The is_admin of this CommonModelsSCXAccountSCXUserInfo.
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def email(self):
        # type: () -> str
        """Gets the email of this CommonModelsSCXAccountSCXUserInfo.


        :return: The email of this CommonModelsSCXAccountSCXUserInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CommonModelsSCXAccountSCXUserInfo.


        :param email: The email of this CommonModelsSCXAccountSCXUserInfo.
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        # type: () -> str
        """Gets the phone_number of this CommonModelsSCXAccountSCXUserInfo.


        :return: The phone_number of this CommonModelsSCXAccountSCXUserInfo.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CommonModelsSCXAccountSCXUserInfo.


        :param phone_number: The phone_number of this CommonModelsSCXAccountSCXUserInfo.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def first_name(self):
        # type: () -> str
        """Gets the first_name of this CommonModelsSCXAccountSCXUserInfo.


        :return: The first_name of this CommonModelsSCXAccountSCXUserInfo.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CommonModelsSCXAccountSCXUserInfo.


        :param first_name: The first_name of this CommonModelsSCXAccountSCXUserInfo.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        # type: () -> str
        """Gets the last_name of this CommonModelsSCXAccountSCXUserInfo.


        :return: The last_name of this CommonModelsSCXAccountSCXUserInfo.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CommonModelsSCXAccountSCXUserInfo.


        :param last_name: The last_name of this CommonModelsSCXAccountSCXUserInfo.
        :type: str
        """

        self._last_name = last_name

    @property
    def idle_time_for_signout(self):
        # type: () -> int
        """Gets the idle_time_for_signout of this CommonModelsSCXAccountSCXUserInfo.


        :return: The idle_time_for_signout of this CommonModelsSCXAccountSCXUserInfo.
        :rtype: int
        """
        return self._idle_time_for_signout

    @idle_time_for_signout.setter
    def idle_time_for_signout(self, idle_time_for_signout):
        """Sets the idle_time_for_signout of this CommonModelsSCXAccountSCXUserInfo.


        :param idle_time_for_signout: The idle_time_for_signout of this CommonModelsSCXAccountSCXUserInfo.
        :type: int
        """

        self._idle_time_for_signout = idle_time_for_signout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommonModelsSCXAccountSCXUserInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelsSCXAccountSCXUserInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommonModelsSCXAccountSCXUserInfo):
            return True

        return self.to_dict() != other.to_dict()
