"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class UserSiteCommonModelsUpdateUserModel:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"asset_group_ids": "list[str]", "role_id": "str"}

    attribute_map = {"asset_group_ids": "AssetGroupIds", "role_id": "RoleId"}

    def __init__(self, asset_group_ids=None, role_id=None, _configuration=None):
        """UserSiteCommonModelsUpdateUserModel - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset_group_ids = None
        self._role_id = None
        self.discriminator = None

        if asset_group_ids is not None:
            self.asset_group_ids = asset_group_ids
        if role_id is not None:
            self.role_id = role_id

    @property
    def asset_group_ids(self):
        # type: () -> list[str]
        """Gets the asset_group_ids of this UserSiteCommonModelsUpdateUserModel.


        :return: The asset_group_ids of this UserSiteCommonModelsUpdateUserModel.
        :rtype: list[str]
        """
        return self._asset_group_ids

    @asset_group_ids.setter
    def asset_group_ids(self, asset_group_ids):
        """Sets the asset_group_ids of this UserSiteCommonModelsUpdateUserModel.


        :param asset_group_ids: The asset_group_ids of this UserSiteCommonModelsUpdateUserModel.
        :type: list[str]
        """

        self._asset_group_ids = asset_group_ids

    @property
    def role_id(self):
        # type: () -> str
        """Gets the role_id of this UserSiteCommonModelsUpdateUserModel.


        :return: The role_id of this UserSiteCommonModelsUpdateUserModel.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this UserSiteCommonModelsUpdateUserModel.


        :param role_id: The role_id of this UserSiteCommonModelsUpdateUserModel.
        :type: str
        """

        self._role_id = role_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserSiteCommonModelsUpdateUserModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSiteCommonModelsUpdateUserModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSiteCommonModelsUpdateUserModel):
            return True

        return self.to_dict() != other.to_dict()
