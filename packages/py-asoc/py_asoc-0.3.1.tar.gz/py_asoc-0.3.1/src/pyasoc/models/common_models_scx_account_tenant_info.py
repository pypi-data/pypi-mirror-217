"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class CommonModelsSCXAccountTenantInfo:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "number_of_apps": "int",
        "tenant_id": "str",
        "tenant_name": "str",
        "contact_email": "str",
        "subscriptions": "list[CommonModelsSCXAccountSCXSubscription]",
        "hide_usage_counters": "bool",
        "issues_status_inheritance": "str",
        "subscription_technologies": "str",
        "active_technologies": "str",
        "user_info": "CommonModelsSCXAccountSCXUserInfo",
        "entitled_for_expert_on_demand": "bool",
        "num_business_units_in_org": "int",
        "apps_with_business_unit": "int",
        "apps_without_business_unit": "int",
        "sca_enabled": "bool",
        "max_scans_per_app": "int",
        "auto_delete_exceeded_scans_per_app": "bool",
        "allow_app_manager_override_auto_delete_settings": "bool",
    }

    attribute_map = {
        "number_of_apps": "NumberOfApps",
        "tenant_id": "TenantId",
        "tenant_name": "TenantName",
        "contact_email": "ContactEmail",
        "subscriptions": "Subscriptions",
        "hide_usage_counters": "HideUsageCounters",
        "issues_status_inheritance": "IssuesStatusInheritance",
        "subscription_technologies": "SubscriptionTechnologies",
        "active_technologies": "ActiveTechnologies",
        "user_info": "UserInfo",
        "entitled_for_expert_on_demand": "EntitledForExpertOnDemand",
        "num_business_units_in_org": "NumBusinessUnitsInOrg",
        "apps_with_business_unit": "AppsWithBusinessUnit",
        "apps_without_business_unit": "AppsWithoutBusinessUnit",
        "sca_enabled": "SCAEnabled",
        "max_scans_per_app": "MaxScansPerApp",
        "auto_delete_exceeded_scans_per_app": "AutoDeleteExceededScansPerApp",
        "allow_app_manager_override_auto_delete_settings": "AllowAppManagerOverrideAutoDeleteSettings",
    }

    def __init__(
        self,
        number_of_apps=None,
        tenant_id=None,
        tenant_name=None,
        contact_email=None,
        subscriptions=None,
        hide_usage_counters=None,
        issues_status_inheritance=None,
        subscription_technologies=None,
        active_technologies=None,
        user_info=None,
        entitled_for_expert_on_demand=None,
        num_business_units_in_org=None,
        apps_with_business_unit=None,
        apps_without_business_unit=None,
        sca_enabled=None,
        max_scans_per_app=None,
        auto_delete_exceeded_scans_per_app=None,
        allow_app_manager_override_auto_delete_settings=None,
        _configuration=None,
    ):
        """CommonModelsSCXAccountTenantInfo - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._number_of_apps = None
        self._tenant_id = None
        self._tenant_name = None
        self._contact_email = None
        self._subscriptions = None
        self._hide_usage_counters = None
        self._issues_status_inheritance = None
        self._subscription_technologies = None
        self._active_technologies = None
        self._user_info = None
        self._entitled_for_expert_on_demand = None
        self._num_business_units_in_org = None
        self._apps_with_business_unit = None
        self._apps_without_business_unit = None
        self._sca_enabled = None
        self._max_scans_per_app = None
        self._auto_delete_exceeded_scans_per_app = None
        self._allow_app_manager_override_auto_delete_settings = None
        self.discriminator = None

        if number_of_apps is not None:
            self.number_of_apps = number_of_apps
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if tenant_name is not None:
            self.tenant_name = tenant_name
        if contact_email is not None:
            self.contact_email = contact_email
        if subscriptions is not None:
            self.subscriptions = subscriptions
        if hide_usage_counters is not None:
            self.hide_usage_counters = hide_usage_counters
        if issues_status_inheritance is not None:
            self.issues_status_inheritance = issues_status_inheritance
        if subscription_technologies is not None:
            self.subscription_technologies = subscription_technologies
        if active_technologies is not None:
            self.active_technologies = active_technologies
        if user_info is not None:
            self.user_info = user_info
        if entitled_for_expert_on_demand is not None:
            self.entitled_for_expert_on_demand = entitled_for_expert_on_demand
        if num_business_units_in_org is not None:
            self.num_business_units_in_org = num_business_units_in_org
        if apps_with_business_unit is not None:
            self.apps_with_business_unit = apps_with_business_unit
        if apps_without_business_unit is not None:
            self.apps_without_business_unit = apps_without_business_unit
        if sca_enabled is not None:
            self.sca_enabled = sca_enabled
        if max_scans_per_app is not None:
            self.max_scans_per_app = max_scans_per_app
        if auto_delete_exceeded_scans_per_app is not None:
            self.auto_delete_exceeded_scans_per_app = auto_delete_exceeded_scans_per_app
        if allow_app_manager_override_auto_delete_settings is not None:
            self.allow_app_manager_override_auto_delete_settings = (
                allow_app_manager_override_auto_delete_settings
            )

    @property
    def number_of_apps(self):
        # type: () -> int
        """Gets the number_of_apps of this CommonModelsSCXAccountTenantInfo.


        :return: The number_of_apps of this CommonModelsSCXAccountTenantInfo.
        :rtype: int
        """
        return self._number_of_apps

    @number_of_apps.setter
    def number_of_apps(self, number_of_apps):
        """Sets the number_of_apps of this CommonModelsSCXAccountTenantInfo.


        :param number_of_apps: The number_of_apps of this CommonModelsSCXAccountTenantInfo.
        :type: int
        """

        self._number_of_apps = number_of_apps

    @property
    def tenant_id(self):
        # type: () -> str
        """Gets the tenant_id of this CommonModelsSCXAccountTenantInfo.


        :return: The tenant_id of this CommonModelsSCXAccountTenantInfo.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CommonModelsSCXAccountTenantInfo.


        :param tenant_id: The tenant_id of this CommonModelsSCXAccountTenantInfo.
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def tenant_name(self):
        # type: () -> str
        """Gets the tenant_name of this CommonModelsSCXAccountTenantInfo.


        :return: The tenant_name of this CommonModelsSCXAccountTenantInfo.
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this CommonModelsSCXAccountTenantInfo.


        :param tenant_name: The tenant_name of this CommonModelsSCXAccountTenantInfo.
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def contact_email(self):
        # type: () -> str
        """Gets the contact_email of this CommonModelsSCXAccountTenantInfo.


        :return: The contact_email of this CommonModelsSCXAccountTenantInfo.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this CommonModelsSCXAccountTenantInfo.


        :param contact_email: The contact_email of this CommonModelsSCXAccountTenantInfo.
        :type: str
        """

        self._contact_email = contact_email

    @property
    def subscriptions(self):
        # type: () -> list[CommonModelsSCXAccountSCXSubscription]
        """Gets the subscriptions of this CommonModelsSCXAccountTenantInfo.


        :return: The subscriptions of this CommonModelsSCXAccountTenantInfo.
        :rtype: list[CommonModelsSCXAccountSCXSubscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this CommonModelsSCXAccountTenantInfo.


        :param subscriptions: The subscriptions of this CommonModelsSCXAccountTenantInfo.
        :type: list[CommonModelsSCXAccountSCXSubscription]
        """

        self._subscriptions = subscriptions

    @property
    def hide_usage_counters(self):
        # type: () -> bool
        """Gets the hide_usage_counters of this CommonModelsSCXAccountTenantInfo.


        :return: The hide_usage_counters of this CommonModelsSCXAccountTenantInfo.
        :rtype: bool
        """
        return self._hide_usage_counters

    @hide_usage_counters.setter
    def hide_usage_counters(self, hide_usage_counters):
        """Sets the hide_usage_counters of this CommonModelsSCXAccountTenantInfo.


        :param hide_usage_counters: The hide_usage_counters of this CommonModelsSCXAccountTenantInfo.
        :type: bool
        """

        self._hide_usage_counters = hide_usage_counters

    @property
    def issues_status_inheritance(self):
        # type: () -> str
        """Gets the issues_status_inheritance of this CommonModelsSCXAccountTenantInfo.


        :return: The issues_status_inheritance of this CommonModelsSCXAccountTenantInfo.
        :rtype: str
        """
        return self._issues_status_inheritance

    @issues_status_inheritance.setter
    def issues_status_inheritance(self, issues_status_inheritance):
        """Sets the issues_status_inheritance of this CommonModelsSCXAccountTenantInfo.


        :param issues_status_inheritance: The issues_status_inheritance of this CommonModelsSCXAccountTenantInfo.
        :type: str
        """
        allowed_values = ["None", "Noise", "Fixed"]
        if (
            self._configuration.client_side_validation
            and issues_status_inheritance not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `issues_status_inheritance` ({}), must be one of {}".format(
                    issues_status_inheritance, allowed_values
                )
            )

        self._issues_status_inheritance = issues_status_inheritance

    @property
    def subscription_technologies(self):
        # type: () -> str
        """Gets the subscription_technologies of this CommonModelsSCXAccountTenantInfo.


        :return: The subscription_technologies of this CommonModelsSCXAccountTenantInfo.
        :rtype: str
        """
        return self._subscription_technologies

    @subscription_technologies.setter
    def subscription_technologies(self, subscription_technologies):
        """Sets the subscription_technologies of this CommonModelsSCXAccountTenantInfo.


        :param subscription_technologies: The subscription_technologies of this CommonModelsSCXAccountTenantInfo.
        :type: str
        """
        allowed_values = [
            "DynamicAnalyzer",
            "StaticAnalyzer",
            "IASTAnalyzer",
            "SCAAnalyzer",
        ]
        if (
            self._configuration.client_side_validation
            and subscription_technologies not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `subscription_technologies` ({}), must be one of {}".format(
                    subscription_technologies, allowed_values
                )
            )

        self._subscription_technologies = subscription_technologies

    @property
    def active_technologies(self):
        # type: () -> str
        """Gets the active_technologies of this CommonModelsSCXAccountTenantInfo.


        :return: The active_technologies of this CommonModelsSCXAccountTenantInfo.
        :rtype: str
        """
        return self._active_technologies

    @active_technologies.setter
    def active_technologies(self, active_technologies):
        """Sets the active_technologies of this CommonModelsSCXAccountTenantInfo.


        :param active_technologies: The active_technologies of this CommonModelsSCXAccountTenantInfo.
        :type: str
        """
        allowed_values = [
            "DynamicAnalyzer",
            "StaticAnalyzer",
            "IASTAnalyzer",
            "SCAAnalyzer",
        ]
        if self._configuration.client_side_validation and active_technologies not in allowed_values:
            raise ValueError(
                "Invalid value for `active_technologies` ({}), must be one of {}".format(
                    active_technologies, allowed_values
                )
            )

        self._active_technologies = active_technologies

    @property
    def user_info(self):
        # type: () -> CommonModelsSCXAccountSCXUserInfo
        """Gets the user_info of this CommonModelsSCXAccountTenantInfo.


        :return: The user_info of this CommonModelsSCXAccountTenantInfo.
        :rtype: CommonModelsSCXAccountSCXUserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this CommonModelsSCXAccountTenantInfo.


        :param user_info: The user_info of this CommonModelsSCXAccountTenantInfo.
        :type: CommonModelsSCXAccountSCXUserInfo
        """

        self._user_info = user_info

    @property
    def entitled_for_expert_on_demand(self):
        # type: () -> bool
        """Gets the entitled_for_expert_on_demand of this CommonModelsSCXAccountTenantInfo.


        :return: The entitled_for_expert_on_demand of this CommonModelsSCXAccountTenantInfo.
        :rtype: bool
        """
        return self._entitled_for_expert_on_demand

    @entitled_for_expert_on_demand.setter
    def entitled_for_expert_on_demand(self, entitled_for_expert_on_demand):
        """Sets the entitled_for_expert_on_demand of this CommonModelsSCXAccountTenantInfo.


        :param entitled_for_expert_on_demand: The entitled_for_expert_on_demand of this CommonModelsSCXAccountTenantInfo.
        :type: bool
        """

        self._entitled_for_expert_on_demand = entitled_for_expert_on_demand

    @property
    def num_business_units_in_org(self):
        # type: () -> int
        """Gets the num_business_units_in_org of this CommonModelsSCXAccountTenantInfo.


        :return: The num_business_units_in_org of this CommonModelsSCXAccountTenantInfo.
        :rtype: int
        """
        return self._num_business_units_in_org

    @num_business_units_in_org.setter
    def num_business_units_in_org(self, num_business_units_in_org):
        """Sets the num_business_units_in_org of this CommonModelsSCXAccountTenantInfo.


        :param num_business_units_in_org: The num_business_units_in_org of this CommonModelsSCXAccountTenantInfo.
        :type: int
        """

        self._num_business_units_in_org = num_business_units_in_org

    @property
    def apps_with_business_unit(self):
        # type: () -> int
        """Gets the apps_with_business_unit of this CommonModelsSCXAccountTenantInfo.


        :return: The apps_with_business_unit of this CommonModelsSCXAccountTenantInfo.
        :rtype: int
        """
        return self._apps_with_business_unit

    @apps_with_business_unit.setter
    def apps_with_business_unit(self, apps_with_business_unit):
        """Sets the apps_with_business_unit of this CommonModelsSCXAccountTenantInfo.


        :param apps_with_business_unit: The apps_with_business_unit of this CommonModelsSCXAccountTenantInfo.
        :type: int
        """

        self._apps_with_business_unit = apps_with_business_unit

    @property
    def apps_without_business_unit(self):
        # type: () -> int
        """Gets the apps_without_business_unit of this CommonModelsSCXAccountTenantInfo.


        :return: The apps_without_business_unit of this CommonModelsSCXAccountTenantInfo.
        :rtype: int
        """
        return self._apps_without_business_unit

    @apps_without_business_unit.setter
    def apps_without_business_unit(self, apps_without_business_unit):
        """Sets the apps_without_business_unit of this CommonModelsSCXAccountTenantInfo.


        :param apps_without_business_unit: The apps_without_business_unit of this CommonModelsSCXAccountTenantInfo.
        :type: int
        """

        self._apps_without_business_unit = apps_without_business_unit

    @property
    def sca_enabled(self):
        # type: () -> bool
        """Gets the sca_enabled of this CommonModelsSCXAccountTenantInfo.


        :return: The sca_enabled of this CommonModelsSCXAccountTenantInfo.
        :rtype: bool
        """
        return self._sca_enabled

    @sca_enabled.setter
    def sca_enabled(self, sca_enabled):
        """Sets the sca_enabled of this CommonModelsSCXAccountTenantInfo.


        :param sca_enabled: The sca_enabled of this CommonModelsSCXAccountTenantInfo.
        :type: bool
        """

        self._sca_enabled = sca_enabled

    @property
    def max_scans_per_app(self):
        # type: () -> int
        """Gets the max_scans_per_app of this CommonModelsSCXAccountTenantInfo.


        :return: The max_scans_per_app of this CommonModelsSCXAccountTenantInfo.
        :rtype: int
        """
        return self._max_scans_per_app

    @max_scans_per_app.setter
    def max_scans_per_app(self, max_scans_per_app):
        """Sets the max_scans_per_app of this CommonModelsSCXAccountTenantInfo.


        :param max_scans_per_app: The max_scans_per_app of this CommonModelsSCXAccountTenantInfo.
        :type: int
        """

        self._max_scans_per_app = max_scans_per_app

    @property
    def auto_delete_exceeded_scans_per_app(self):
        # type: () -> bool
        """Gets the auto_delete_exceeded_scans_per_app of this CommonModelsSCXAccountTenantInfo.


        :return: The auto_delete_exceeded_scans_per_app of this CommonModelsSCXAccountTenantInfo.
        :rtype: bool
        """
        return self._auto_delete_exceeded_scans_per_app

    @auto_delete_exceeded_scans_per_app.setter
    def auto_delete_exceeded_scans_per_app(self, auto_delete_exceeded_scans_per_app):
        """Sets the auto_delete_exceeded_scans_per_app of this CommonModelsSCXAccountTenantInfo.


        :param auto_delete_exceeded_scans_per_app: The auto_delete_exceeded_scans_per_app of this CommonModelsSCXAccountTenantInfo.
        :type: bool
        """

        self._auto_delete_exceeded_scans_per_app = auto_delete_exceeded_scans_per_app

    @property
    def allow_app_manager_override_auto_delete_settings(self):
        # type: () -> bool
        """Gets the allow_app_manager_override_auto_delete_settings of this CommonModelsSCXAccountTenantInfo.


        :return: The allow_app_manager_override_auto_delete_settings of this CommonModelsSCXAccountTenantInfo.
        :rtype: bool
        """
        return self._allow_app_manager_override_auto_delete_settings

    @allow_app_manager_override_auto_delete_settings.setter
    def allow_app_manager_override_auto_delete_settings(
        self, allow_app_manager_override_auto_delete_settings
    ):
        """Sets the allow_app_manager_override_auto_delete_settings of this CommonModelsSCXAccountTenantInfo.


        :param allow_app_manager_override_auto_delete_settings: The allow_app_manager_override_auto_delete_settings of this CommonModelsSCXAccountTenantInfo.
        :type: bool
        """

        self._allow_app_manager_override_auto_delete_settings = (
            allow_app_manager_override_auto_delete_settings
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommonModelsSCXAccountTenantInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelsSCXAccountTenantInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommonModelsSCXAccountTenantInfo):
            return True

        return self.to_dict() != other.to_dict()
