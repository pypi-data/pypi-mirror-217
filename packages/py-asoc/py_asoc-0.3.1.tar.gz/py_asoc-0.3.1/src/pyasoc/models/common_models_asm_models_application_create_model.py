"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class CommonModelsASMModelsApplicationCreateModel:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "asset_group_id": "str",
        "business_impact": "str",
        "url": "str",
        "description": "str",
        "business_unit_id": "str",
        "type": "str",
        "technology": "str",
        "testing_status": "str",
        "hosts": "str",
        "collateral_damage_potential": "str",
        "target_distribution": "str",
        "confidentiality_requirement": "str",
        "integrity_requirement": "str",
        "availability_requirement": "str",
        "tester": "str",
        "business_owner": "str",
        "development_contact": "str",
        "preferred_offering_type": "str",
        "auto_delete_exceeded_scans": "bool",
    }

    attribute_map = {
        "name": "Name",
        "asset_group_id": "AssetGroupId",
        "business_impact": "BusinessImpact",
        "url": "Url",
        "description": "Description",
        "business_unit_id": "BusinessUnitId",
        "type": "Type",
        "technology": "Technology",
        "testing_status": "TestingStatus",
        "hosts": "Hosts",
        "collateral_damage_potential": "CollateralDamagePotential",
        "target_distribution": "TargetDistribution",
        "confidentiality_requirement": "ConfidentialityRequirement",
        "integrity_requirement": "IntegrityRequirement",
        "availability_requirement": "AvailabilityRequirement",
        "tester": "Tester",
        "business_owner": "BusinessOwner",
        "development_contact": "DevelopmentContact",
        "preferred_offering_type": "PreferredOfferingType",
        "auto_delete_exceeded_scans": "AutoDeleteExceededScans",
    }

    def __init__(
        self,
        name=None,
        asset_group_id=None,
        business_impact=None,
        url=None,
        description=None,
        business_unit_id=None,
        type=None,
        technology=None,
        testing_status=None,
        hosts=None,
        collateral_damage_potential=None,
        target_distribution=None,
        confidentiality_requirement=None,
        integrity_requirement=None,
        availability_requirement=None,
        tester=None,
        business_owner=None,
        development_contact=None,
        preferred_offering_type=None,
        auto_delete_exceeded_scans=None,
        _configuration=None,
    ):
        """CommonModelsASMModelsApplicationCreateModel - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._asset_group_id = None
        self._business_impact = None
        self._url = None
        self._description = None
        self._business_unit_id = None
        self._type = None
        self._technology = None
        self._testing_status = None
        self._hosts = None
        self._collateral_damage_potential = None
        self._target_distribution = None
        self._confidentiality_requirement = None
        self._integrity_requirement = None
        self._availability_requirement = None
        self._tester = None
        self._business_owner = None
        self._development_contact = None
        self._preferred_offering_type = None
        self._auto_delete_exceeded_scans = None
        self.discriminator = None

        self.name = name
        self.asset_group_id = asset_group_id
        if business_impact is not None:
            self.business_impact = business_impact
        if url is not None:
            self.url = url
        if description is not None:
            self.description = description
        if business_unit_id is not None:
            self.business_unit_id = business_unit_id
        if type is not None:
            self.type = type
        if technology is not None:
            self.technology = technology
        if testing_status is not None:
            self.testing_status = testing_status
        if hosts is not None:
            self.hosts = hosts
        if collateral_damage_potential is not None:
            self.collateral_damage_potential = collateral_damage_potential
        if target_distribution is not None:
            self.target_distribution = target_distribution
        if confidentiality_requirement is not None:
            self.confidentiality_requirement = confidentiality_requirement
        if integrity_requirement is not None:
            self.integrity_requirement = integrity_requirement
        if availability_requirement is not None:
            self.availability_requirement = availability_requirement
        if tester is not None:
            self.tester = tester
        if business_owner is not None:
            self.business_owner = business_owner
        if development_contact is not None:
            self.development_contact = development_contact
        if preferred_offering_type is not None:
            self.preferred_offering_type = preferred_offering_type
        if auto_delete_exceeded_scans is not None:
            self.auto_delete_exceeded_scans = auto_delete_exceeded_scans

    @property
    def name(self):
        # type: () -> str
        """Gets the name of this CommonModelsASMModelsApplicationCreateModel.


        :return: The name of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommonModelsASMModelsApplicationCreateModel.


        :param name: The name of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if self._configuration.client_side_validation and name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if self._configuration.client_side_validation and name is not None and len(name) < 0:
            raise ValueError(
                "Invalid value for `name`, length must be greater than or equal to `0`"
            )

        self._name = name

    @property
    def asset_group_id(self):
        # type: () -> str
        """Gets the asset_group_id of this CommonModelsASMModelsApplicationCreateModel.


        :return: The asset_group_id of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._asset_group_id

    @asset_group_id.setter
    def asset_group_id(self, asset_group_id):
        """Sets the asset_group_id of this CommonModelsASMModelsApplicationCreateModel.


        :param asset_group_id: The asset_group_id of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """
        if self._configuration.client_side_validation and asset_group_id is None:
            raise ValueError("Invalid value for `asset_group_id`, must not be `None`")

        self._asset_group_id = asset_group_id

    @property
    def business_impact(self):
        # type: () -> str
        """Gets the business_impact of this CommonModelsASMModelsApplicationCreateModel.


        :return: The business_impact of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._business_impact

    @business_impact.setter
    def business_impact(self, business_impact):
        """Sets the business_impact of this CommonModelsASMModelsApplicationCreateModel.


        :param business_impact: The business_impact of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """
        allowed_values = [
            "Unspecified",
            "Low",
            "Medium",
            "High",
            "Critical",
        ]
        if self._configuration.client_side_validation and business_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `business_impact` ({}), must be one of {}".format(
                    business_impact, allowed_values
                )
            )

        self._business_impact = business_impact

    @property
    def url(self):
        # type: () -> str
        """Gets the url of this CommonModelsASMModelsApplicationCreateModel.


        :return: The url of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CommonModelsASMModelsApplicationCreateModel.


        :param url: The url of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """

        self._url = url

    @property
    def description(self):
        # type: () -> str
        """Gets the description of this CommonModelsASMModelsApplicationCreateModel.


        :return: The description of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CommonModelsASMModelsApplicationCreateModel.


        :param description: The description of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """

        self._description = description

    @property
    def business_unit_id(self):
        # type: () -> str
        """Gets the business_unit_id of this CommonModelsASMModelsApplicationCreateModel.


        :return: The business_unit_id of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._business_unit_id

    @business_unit_id.setter
    def business_unit_id(self, business_unit_id):
        """Sets the business_unit_id of this CommonModelsASMModelsApplicationCreateModel.


        :param business_unit_id: The business_unit_id of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """

        self._business_unit_id = business_unit_id

    @property
    def type(self):
        # type: () -> str
        """Gets the type of this CommonModelsASMModelsApplicationCreateModel.


        :return: The type of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CommonModelsASMModelsApplicationCreateModel.


        :param type: The type of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """

        self._type = type

    @property
    def technology(self):
        # type: () -> str
        """Gets the technology of this CommonModelsASMModelsApplicationCreateModel.


        :return: The technology of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this CommonModelsASMModelsApplicationCreateModel.


        :param technology: The technology of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """

        self._technology = technology

    @property
    def testing_status(self):
        # type: () -> str
        """Gets the testing_status of this CommonModelsASMModelsApplicationCreateModel.


        :return: The testing_status of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._testing_status

    @testing_status.setter
    def testing_status(self, testing_status):
        """Sets the testing_status of this CommonModelsASMModelsApplicationCreateModel.


        :param testing_status: The testing_status of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """
        allowed_values = ["NotStarted", "InProgress", "Completed"]
        if self._configuration.client_side_validation and testing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `testing_status` ({}), must be one of {}".format(
                    testing_status, allowed_values
                )
            )

        self._testing_status = testing_status

    @property
    def hosts(self):
        # type: () -> str
        """Gets the hosts of this CommonModelsASMModelsApplicationCreateModel.


        :return: The hosts of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this CommonModelsASMModelsApplicationCreateModel.


        :param hosts: The hosts of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """

        self._hosts = hosts

    @property
    def collateral_damage_potential(self):
        # type: () -> str
        """Gets the collateral_damage_potential of this CommonModelsASMModelsApplicationCreateModel.


        :return: The collateral_damage_potential of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._collateral_damage_potential

    @collateral_damage_potential.setter
    def collateral_damage_potential(self, collateral_damage_potential):
        """Sets the collateral_damage_potential of this CommonModelsASMModelsApplicationCreateModel.


        :param collateral_damage_potential: The collateral_damage_potential of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """
        allowed_values = [
            "NotDefined",
            "None",
            "Low",
            "LowMedium",
            "MediumHigh",
            "High",
        ]
        if (
            self._configuration.client_side_validation
            and collateral_damage_potential not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `collateral_damage_potential` ({}), must be one of {}".format(
                    collateral_damage_potential, allowed_values
                )
            )

        self._collateral_damage_potential = collateral_damage_potential

    @property
    def target_distribution(self):
        # type: () -> str
        """Gets the target_distribution of this CommonModelsASMModelsApplicationCreateModel.


        :return: The target_distribution of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._target_distribution

    @target_distribution.setter
    def target_distribution(self, target_distribution):
        """Sets the target_distribution of this CommonModelsASMModelsApplicationCreateModel.


        :param target_distribution: The target_distribution of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """
        allowed_values = ["NotDefined", "None", "Low", "Medium", "High"]
        if self._configuration.client_side_validation and target_distribution not in allowed_values:
            raise ValueError(
                "Invalid value for `target_distribution` ({}), must be one of {}".format(
                    target_distribution, allowed_values
                )
            )

        self._target_distribution = target_distribution

    @property
    def confidentiality_requirement(self):
        # type: () -> str
        """Gets the confidentiality_requirement of this CommonModelsASMModelsApplicationCreateModel.


        :return: The confidentiality_requirement of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._confidentiality_requirement

    @confidentiality_requirement.setter
    def confidentiality_requirement(self, confidentiality_requirement):
        """Sets the confidentiality_requirement of this CommonModelsASMModelsApplicationCreateModel.


        :param confidentiality_requirement: The confidentiality_requirement of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """
        allowed_values = ["NotDefined", "Low", "Medium", "High"]
        if (
            self._configuration.client_side_validation
            and confidentiality_requirement not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `confidentiality_requirement` ({}), must be one of {}".format(
                    confidentiality_requirement, allowed_values
                )
            )

        self._confidentiality_requirement = confidentiality_requirement

    @property
    def integrity_requirement(self):
        # type: () -> str
        """Gets the integrity_requirement of this CommonModelsASMModelsApplicationCreateModel.


        :return: The integrity_requirement of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._integrity_requirement

    @integrity_requirement.setter
    def integrity_requirement(self, integrity_requirement):
        """Sets the integrity_requirement of this CommonModelsASMModelsApplicationCreateModel.


        :param integrity_requirement: The integrity_requirement of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """
        allowed_values = ["NotDefined", "Low", "Medium", "High"]
        if (
            self._configuration.client_side_validation
            and integrity_requirement not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `integrity_requirement` ({}), must be one of {}".format(
                    integrity_requirement, allowed_values
                )
            )

        self._integrity_requirement = integrity_requirement

    @property
    def availability_requirement(self):
        # type: () -> str
        """Gets the availability_requirement of this CommonModelsASMModelsApplicationCreateModel.


        :return: The availability_requirement of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._availability_requirement

    @availability_requirement.setter
    def availability_requirement(self, availability_requirement):
        """Sets the availability_requirement of this CommonModelsASMModelsApplicationCreateModel.


        :param availability_requirement: The availability_requirement of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """
        allowed_values = ["NotDefined", "Low", "Medium", "High"]
        if (
            self._configuration.client_side_validation
            and availability_requirement not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `availability_requirement` ({}), must be one of {}".format(
                    availability_requirement, allowed_values
                )
            )

        self._availability_requirement = availability_requirement

    @property
    def tester(self):
        # type: () -> str
        """Gets the tester of this CommonModelsASMModelsApplicationCreateModel.


        :return: The tester of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._tester

    @tester.setter
    def tester(self, tester):
        """Sets the tester of this CommonModelsASMModelsApplicationCreateModel.


        :param tester: The tester of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """

        self._tester = tester

    @property
    def business_owner(self):
        # type: () -> str
        """Gets the business_owner of this CommonModelsASMModelsApplicationCreateModel.


        :return: The business_owner of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._business_owner

    @business_owner.setter
    def business_owner(self, business_owner):
        """Sets the business_owner of this CommonModelsASMModelsApplicationCreateModel.


        :param business_owner: The business_owner of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """

        self._business_owner = business_owner

    @property
    def development_contact(self):
        # type: () -> str
        """Gets the development_contact of this CommonModelsASMModelsApplicationCreateModel.


        :return: The development_contact of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._development_contact

    @development_contact.setter
    def development_contact(self, development_contact):
        """Sets the development_contact of this CommonModelsASMModelsApplicationCreateModel.


        :param development_contact: The development_contact of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """

        self._development_contact = development_contact

    @property
    def preferred_offering_type(self):
        # type: () -> str
        """Gets the preferred_offering_type of this CommonModelsASMModelsApplicationCreateModel.


        :return: The preferred_offering_type of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: str
        """
        return self._preferred_offering_type

    @preferred_offering_type.setter
    def preferred_offering_type(self, preferred_offering_type):
        """Sets the preferred_offering_type of this CommonModelsASMModelsApplicationCreateModel.


        :param preferred_offering_type: The preferred_offering_type of this CommonModelsASMModelsApplicationCreateModel.
        :type: str
        """
        allowed_values = ["None", "ScanExecution", "Applications"]
        if (
            self._configuration.client_side_validation
            and preferred_offering_type not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `preferred_offering_type` ({}), must be one of {}".format(
                    preferred_offering_type, allowed_values
                )
            )

        self._preferred_offering_type = preferred_offering_type

    @property
    def auto_delete_exceeded_scans(self):
        # type: () -> bool
        """Gets the auto_delete_exceeded_scans of this CommonModelsASMModelsApplicationCreateModel.


        :return: The auto_delete_exceeded_scans of this CommonModelsASMModelsApplicationCreateModel.
        :rtype: bool
        """
        return self._auto_delete_exceeded_scans

    @auto_delete_exceeded_scans.setter
    def auto_delete_exceeded_scans(self, auto_delete_exceeded_scans):
        """Sets the auto_delete_exceeded_scans of this CommonModelsASMModelsApplicationCreateModel.


        :param auto_delete_exceeded_scans: The auto_delete_exceeded_scans of this CommonModelsASMModelsApplicationCreateModel.
        :type: bool
        """

        self._auto_delete_exceeded_scans = auto_delete_exceeded_scans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommonModelsASMModelsApplicationCreateModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelsASMModelsApplicationCreateModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommonModelsASMModelsApplicationCreateModel):
            return True

        return self.to_dict() != other.to_dict()
