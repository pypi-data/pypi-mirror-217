"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class MicrosoftDataODataQuerySemanticAstOrderByClause:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "then_by": "MicrosoftDataODataQuerySemanticAstOrderByClause",
        "expression": "MicrosoftDataODataQuerySemanticAstSingleValueNode",
        "direction": "str",
        "range_variable": "MicrosoftDataODataQuerySemanticAstRangeVariable",
        "item_type": "MicrosoftDataEdmIEdmTypeReference",
    }

    attribute_map = {
        "then_by": "ThenBy",
        "expression": "Expression",
        "direction": "Direction",
        "range_variable": "RangeVariable",
        "item_type": "ItemType",
    }

    def __init__(
        self,
        then_by=None,
        expression=None,
        direction=None,
        range_variable=None,
        item_type=None,
        _configuration=None,
    ):
        """MicrosoftDataODataQuerySemanticAstOrderByClause - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._then_by = None
        self._expression = None
        self._direction = None
        self._range_variable = None
        self._item_type = None
        self.discriminator = None

        if then_by is not None:
            self.then_by = then_by
        if expression is not None:
            self.expression = expression
        if direction is not None:
            self.direction = direction
        if range_variable is not None:
            self.range_variable = range_variable
        if item_type is not None:
            self.item_type = item_type

    @property
    def then_by(self):
        # type: () -> MicrosoftDataODataQuerySemanticAstOrderByClause
        """Gets the then_by of this MicrosoftDataODataQuerySemanticAstOrderByClause.


        :return: The then_by of this MicrosoftDataODataQuerySemanticAstOrderByClause.
        :rtype: MicrosoftDataODataQuerySemanticAstOrderByClause
        """
        return self._then_by

    @then_by.setter
    def then_by(self, then_by):
        """Sets the then_by of this MicrosoftDataODataQuerySemanticAstOrderByClause.


        :param then_by: The then_by of this MicrosoftDataODataQuerySemanticAstOrderByClause.
        :type: MicrosoftDataODataQuerySemanticAstOrderByClause
        """

        self._then_by = then_by

    @property
    def expression(self):
        # type: () -> MicrosoftDataODataQuerySemanticAstSingleValueNode
        """Gets the expression of this MicrosoftDataODataQuerySemanticAstOrderByClause.


        :return: The expression of this MicrosoftDataODataQuerySemanticAstOrderByClause.
        :rtype: MicrosoftDataODataQuerySemanticAstSingleValueNode
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this MicrosoftDataODataQuerySemanticAstOrderByClause.


        :param expression: The expression of this MicrosoftDataODataQuerySemanticAstOrderByClause.
        :type: MicrosoftDataODataQuerySemanticAstSingleValueNode
        """

        self._expression = expression

    @property
    def direction(self):
        # type: () -> str
        """Gets the direction of this MicrosoftDataODataQuerySemanticAstOrderByClause.


        :return: The direction of this MicrosoftDataODataQuerySemanticAstOrderByClause.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this MicrosoftDataODataQuerySemanticAstOrderByClause.


        :param direction: The direction of this MicrosoftDataODataQuerySemanticAstOrderByClause.
        :type: str
        """
        allowed_values = ["Ascending", "Descending"]
        if self._configuration.client_side_validation and direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({}), must be one of {}".format(
                    direction, allowed_values
                )
            )

        self._direction = direction

    @property
    def range_variable(self):
        # type: () -> MicrosoftDataODataQuerySemanticAstRangeVariable
        """Gets the range_variable of this MicrosoftDataODataQuerySemanticAstOrderByClause.


        :return: The range_variable of this MicrosoftDataODataQuerySemanticAstOrderByClause.
        :rtype: MicrosoftDataODataQuerySemanticAstRangeVariable
        """
        return self._range_variable

    @range_variable.setter
    def range_variable(self, range_variable):
        """Sets the range_variable of this MicrosoftDataODataQuerySemanticAstOrderByClause.


        :param range_variable: The range_variable of this MicrosoftDataODataQuerySemanticAstOrderByClause.
        :type: MicrosoftDataODataQuerySemanticAstRangeVariable
        """

        self._range_variable = range_variable

    @property
    def item_type(self):
        # type: () -> MicrosoftDataEdmIEdmTypeReference
        """Gets the item_type of this MicrosoftDataODataQuerySemanticAstOrderByClause.


        :return: The item_type of this MicrosoftDataODataQuerySemanticAstOrderByClause.
        :rtype: MicrosoftDataEdmIEdmTypeReference
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this MicrosoftDataODataQuerySemanticAstOrderByClause.


        :param item_type: The item_type of this MicrosoftDataODataQuerySemanticAstOrderByClause.
        :type: MicrosoftDataEdmIEdmTypeReference
        """

        self._item_type = item_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(MicrosoftDataODataQuerySemanticAstOrderByClause, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MicrosoftDataODataQuerySemanticAstOrderByClause):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MicrosoftDataODataQuerySemanticAstOrderByClause):
            return True

        return self.to_dict() != other.to_dict()
