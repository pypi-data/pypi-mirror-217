"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class UserSiteCommonModelsInviteResult:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"email": "str", "invite_status": "str"}

    attribute_map = {"email": "Email", "invite_status": "InviteStatus"}

    def __init__(self, email=None, invite_status=None, _configuration=None):
        """UserSiteCommonModelsInviteResult - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email = None
        self._invite_status = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if invite_status is not None:
            self.invite_status = invite_status

    @property
    def email(self):
        # type: () -> str
        """Gets the email of this UserSiteCommonModelsInviteResult.


        :return: The email of this UserSiteCommonModelsInviteResult.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserSiteCommonModelsInviteResult.


        :param email: The email of this UserSiteCommonModelsInviteResult.
        :type: str
        """

        self._email = email

    @property
    def invite_status(self):
        # type: () -> str
        """Gets the invite_status of this UserSiteCommonModelsInviteResult.


        :return: The invite_status of this UserSiteCommonModelsInviteResult.
        :rtype: str
        """
        return self._invite_status

    @invite_status.setter
    def invite_status(self, invite_status):
        """Sets the invite_status of this UserSiteCommonModelsInviteResult.


        :param invite_status: The invite_status of this UserSiteCommonModelsInviteResult.
        :type: str
        """
        allowed_values = [
            "Success",
            "BlockedEmail",
            "InvalidEmail",
            "AlreadyExist",
            "Failed",
            "EmailSentRecently",
        ]
        if self._configuration.client_side_validation and invite_status not in allowed_values:
            raise ValueError(
                "Invalid value for `invite_status` ({}), must be one of {}".format(
                    invite_status, allowed_values
                )
            )

        self._invite_status = invite_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserSiteCommonModelsInviteResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSiteCommonModelsInviteResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSiteCommonModelsInviteResult):
            return True

        return self.to_dict() != other.to_dict()
