"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class AppScanSaaSModelsV2IastAnalyzerScanExecution:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "scan_id": "str",
        "created_at": "datetime",
        "executed_at": "datetime",
        "scan_end_time": "datetime",
        "execution_duration_sec": "int",
        "user_message": "str",
        "predefined_message_key": "str",
        "status": "str",
        "n_issues_found": "int",
        "result": "str",
        "read_status": "str",
        "progress": "int",
        "n_critical_issues": "int",
        "n_high_issues": "int",
        "n_medium_issues": "int",
        "n_low_issues": "int",
        "n_info_issues": "int",
        "n_open_source_licenses": "int",
        "n_open_source_packages": "int",
        "n_new_app_issues": "int",
        "n_new_app_critical_issues": "int",
        "n_new_app_high_issues": "int",
        "n_new_app_medium_issues": "int",
        "n_new_app_low_issues": "int",
        "n_new_app_info_issues": "int",
        "available_reports": "list[str]",
        "execution_progress": "str",
        "include_custom_user_message": "bool",
        "has_logs": "bool",
        "file_name": "str",
        "created_by": "UserSiteCommonModelsBasicUserInfo",
        "is_scan_file_available": "bool",
        "comment": "str",
        "enablement_message": "str",
        "handled_by_scan_enabler": "bool",
        "is_partial": "bool",
        "queued_duration_sec": "int",
    }

    attribute_map = {
        "id": "Id",
        "scan_id": "ScanId",
        "created_at": "CreatedAt",
        "executed_at": "ExecutedAt",
        "scan_end_time": "ScanEndTime",
        "execution_duration_sec": "ExecutionDurationSec",
        "user_message": "UserMessage",
        "predefined_message_key": "PredefinedMessageKey",
        "status": "Status",
        "n_issues_found": "NIssuesFound",
        "result": "Result",
        "read_status": "ReadStatus",
        "progress": "Progress",
        "n_critical_issues": "NCriticalIssues",
        "n_high_issues": "NHighIssues",
        "n_medium_issues": "NMediumIssues",
        "n_low_issues": "NLowIssues",
        "n_info_issues": "NInfoIssues",
        "n_open_source_licenses": "NOpenSourceLicenses",
        "n_open_source_packages": "NOpenSourcePackages",
        "n_new_app_issues": "NNewAppIssues",
        "n_new_app_critical_issues": "NNewAppCriticalIssues",
        "n_new_app_high_issues": "NNewAppHighIssues",
        "n_new_app_medium_issues": "NNewAppMediumIssues",
        "n_new_app_low_issues": "NNewAppLowIssues",
        "n_new_app_info_issues": "NNewAppInfoIssues",
        "available_reports": "AvailableReports",
        "execution_progress": "ExecutionProgress",
        "include_custom_user_message": "IncludeCustomUserMessage",
        "has_logs": "HasLogs",
        "file_name": "FileName",
        "created_by": "CreatedBy",
        "is_scan_file_available": "IsScanFileAvailable",
        "comment": "Comment",
        "enablement_message": "EnablementMessage",
        "handled_by_scan_enabler": "HandledByScanEnabler",
        "is_partial": "IsPartial",
        "queued_duration_sec": "QueuedDurationSec",
    }

    def __init__(
        self,
        id=None,
        scan_id=None,
        created_at=None,
        executed_at=None,
        scan_end_time=None,
        execution_duration_sec=None,
        user_message=None,
        predefined_message_key=None,
        status=None,
        n_issues_found=None,
        result=None,
        read_status=None,
        progress=None,
        n_critical_issues=None,
        n_high_issues=None,
        n_medium_issues=None,
        n_low_issues=None,
        n_info_issues=None,
        n_open_source_licenses=None,
        n_open_source_packages=None,
        n_new_app_issues=None,
        n_new_app_critical_issues=None,
        n_new_app_high_issues=None,
        n_new_app_medium_issues=None,
        n_new_app_low_issues=None,
        n_new_app_info_issues=None,
        available_reports=None,
        execution_progress=None,
        include_custom_user_message=None,
        has_logs=None,
        file_name=None,
        created_by=None,
        is_scan_file_available=None,
        comment=None,
        enablement_message=None,
        handled_by_scan_enabler=None,
        is_partial=None,
        queued_duration_sec=None,
        _configuration=None,
    ):
        """AppScanSaaSModelsV2IastAnalyzerScanExecution - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._scan_id = None
        self._created_at = None
        self._executed_at = None
        self._scan_end_time = None
        self._execution_duration_sec = None
        self._user_message = None
        self._predefined_message_key = None
        self._status = None
        self._n_issues_found = None
        self._result = None
        self._read_status = None
        self._progress = None
        self._n_critical_issues = None
        self._n_high_issues = None
        self._n_medium_issues = None
        self._n_low_issues = None
        self._n_info_issues = None
        self._n_open_source_licenses = None
        self._n_open_source_packages = None
        self._n_new_app_issues = None
        self._n_new_app_critical_issues = None
        self._n_new_app_high_issues = None
        self._n_new_app_medium_issues = None
        self._n_new_app_low_issues = None
        self._n_new_app_info_issues = None
        self._available_reports = None
        self._execution_progress = None
        self._include_custom_user_message = None
        self._has_logs = None
        self._file_name = None
        self._created_by = None
        self._is_scan_file_available = None
        self._comment = None
        self._enablement_message = None
        self._handled_by_scan_enabler = None
        self._is_partial = None
        self._queued_duration_sec = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if scan_id is not None:
            self.scan_id = scan_id
        if created_at is not None:
            self.created_at = created_at
        if executed_at is not None:
            self.executed_at = executed_at
        if scan_end_time is not None:
            self.scan_end_time = scan_end_time
        if execution_duration_sec is not None:
            self.execution_duration_sec = execution_duration_sec
        if user_message is not None:
            self.user_message = user_message
        if predefined_message_key is not None:
            self.predefined_message_key = predefined_message_key
        if status is not None:
            self.status = status
        if n_issues_found is not None:
            self.n_issues_found = n_issues_found
        if result is not None:
            self.result = result
        if read_status is not None:
            self.read_status = read_status
        if progress is not None:
            self.progress = progress
        if n_critical_issues is not None:
            self.n_critical_issues = n_critical_issues
        if n_high_issues is not None:
            self.n_high_issues = n_high_issues
        if n_medium_issues is not None:
            self.n_medium_issues = n_medium_issues
        if n_low_issues is not None:
            self.n_low_issues = n_low_issues
        if n_info_issues is not None:
            self.n_info_issues = n_info_issues
        if n_open_source_licenses is not None:
            self.n_open_source_licenses = n_open_source_licenses
        if n_open_source_packages is not None:
            self.n_open_source_packages = n_open_source_packages
        if n_new_app_issues is not None:
            self.n_new_app_issues = n_new_app_issues
        if n_new_app_critical_issues is not None:
            self.n_new_app_critical_issues = n_new_app_critical_issues
        if n_new_app_high_issues is not None:
            self.n_new_app_high_issues = n_new_app_high_issues
        if n_new_app_medium_issues is not None:
            self.n_new_app_medium_issues = n_new_app_medium_issues
        if n_new_app_low_issues is not None:
            self.n_new_app_low_issues = n_new_app_low_issues
        if n_new_app_info_issues is not None:
            self.n_new_app_info_issues = n_new_app_info_issues
        if available_reports is not None:
            self.available_reports = available_reports
        if execution_progress is not None:
            self.execution_progress = execution_progress
        if include_custom_user_message is not None:
            self.include_custom_user_message = include_custom_user_message
        if has_logs is not None:
            self.has_logs = has_logs
        if file_name is not None:
            self.file_name = file_name
        if created_by is not None:
            self.created_by = created_by
        if is_scan_file_available is not None:
            self.is_scan_file_available = is_scan_file_available
        if comment is not None:
            self.comment = comment
        if enablement_message is not None:
            self.enablement_message = enablement_message
        if handled_by_scan_enabler is not None:
            self.handled_by_scan_enabler = handled_by_scan_enabler
        if is_partial is not None:
            self.is_partial = is_partial
        if queued_duration_sec is not None:
            self.queued_duration_sec = queued_duration_sec

    @property
    def id(self):
        # type: () -> str
        """Gets the id of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The id of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param id: The id of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: str
        """

        self._id = id

    @property
    def scan_id(self):
        # type: () -> str
        """Gets the scan_id of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The scan_id of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: str
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param scan_id: The scan_id of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: str
        """

        self._scan_id = scan_id

    @property
    def created_at(self):
        # type: () -> datetime
        """Gets the created_at of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The created_at of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param created_at: The created_at of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def executed_at(self):
        # type: () -> datetime
        """Gets the executed_at of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The executed_at of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: datetime
        """
        return self._executed_at

    @executed_at.setter
    def executed_at(self, executed_at):
        """Sets the executed_at of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param executed_at: The executed_at of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: datetime
        """

        self._executed_at = executed_at

    @property
    def scan_end_time(self):
        # type: () -> datetime
        """Gets the scan_end_time of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The scan_end_time of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: datetime
        """
        return self._scan_end_time

    @scan_end_time.setter
    def scan_end_time(self, scan_end_time):
        """Sets the scan_end_time of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param scan_end_time: The scan_end_time of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: datetime
        """

        self._scan_end_time = scan_end_time

    @property
    def execution_duration_sec(self):
        # type: () -> int
        """Gets the execution_duration_sec of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The execution_duration_sec of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._execution_duration_sec

    @execution_duration_sec.setter
    def execution_duration_sec(self, execution_duration_sec):
        """Sets the execution_duration_sec of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param execution_duration_sec: The execution_duration_sec of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._execution_duration_sec = execution_duration_sec

    @property
    def user_message(self):
        # type: () -> str
        """Gets the user_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The user_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: str
        """
        return self._user_message

    @user_message.setter
    def user_message(self, user_message):
        """Sets the user_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param user_message: The user_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: str
        """

        self._user_message = user_message

    @property
    def predefined_message_key(self):
        # type: () -> str
        """Gets the predefined_message_key of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The predefined_message_key of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: str
        """
        return self._predefined_message_key

    @predefined_message_key.setter
    def predefined_message_key(self, predefined_message_key):
        """Sets the predefined_message_key of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param predefined_message_key: The predefined_message_key of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: str
        """

        self._predefined_message_key = predefined_message_key

    @property
    def status(self):
        # type: () -> str
        """Gets the status of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The status of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param status: The status of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: str
        """
        allowed_values = [
            "Running",
            "Stopping",
            "Pausing",
            "InQueue",
            "Paused",
            "Ready",
            "Failed",
        ]
        if self._configuration.client_side_validation and status not in allowed_values:
            raise ValueError(
                f"Invalid value for `status` ({status}), must be one of {allowed_values}"
            )

        self._status = status

    @property
    def n_issues_found(self):
        # type: () -> int
        """Gets the n_issues_found of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_issues_found of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_issues_found

    @n_issues_found.setter
    def n_issues_found(self, n_issues_found):
        """Sets the n_issues_found of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_issues_found: The n_issues_found of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_issues_found = n_issues_found

    @property
    def result(self):
        # type: () -> str
        """Gets the result of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The result of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param result: The result of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: str
        """
        allowed_values = [
            "None",
            "NoIssues",
            "Informational",
            "Low",
            "Medium",
            "High",
            "Critical",
        ]
        if self._configuration.client_side_validation and result not in allowed_values:
            raise ValueError(
                f"Invalid value for `result` ({result}), must be one of {allowed_values}"
            )

        self._result = result

    @property
    def read_status(self):
        # type: () -> str
        """Gets the read_status of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The read_status of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: str
        """
        return self._read_status

    @read_status.setter
    def read_status(self, read_status):
        """Sets the read_status of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param read_status: The read_status of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: str
        """
        allowed_values = ["None", "Unread", "Read"]
        if self._configuration.client_side_validation and read_status not in allowed_values:
            raise ValueError(
                "Invalid value for `read_status` ({}), must be one of {}".format(
                    read_status, allowed_values
                )
            )

        self._read_status = read_status

    @property
    def progress(self):
        # type: () -> int
        """Gets the progress of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The progress of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param progress: The progress of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._progress = progress

    @property
    def n_critical_issues(self):
        # type: () -> int
        """Gets the n_critical_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_critical_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_critical_issues

    @n_critical_issues.setter
    def n_critical_issues(self, n_critical_issues):
        """Sets the n_critical_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_critical_issues: The n_critical_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_critical_issues = n_critical_issues

    @property
    def n_high_issues(self):
        # type: () -> int
        """Gets the n_high_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_high_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_high_issues

    @n_high_issues.setter
    def n_high_issues(self, n_high_issues):
        """Sets the n_high_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_high_issues: The n_high_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_high_issues = n_high_issues

    @property
    def n_medium_issues(self):
        # type: () -> int
        """Gets the n_medium_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_medium_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_medium_issues

    @n_medium_issues.setter
    def n_medium_issues(self, n_medium_issues):
        """Sets the n_medium_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_medium_issues: The n_medium_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_medium_issues = n_medium_issues

    @property
    def n_low_issues(self):
        # type: () -> int
        """Gets the n_low_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_low_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_low_issues

    @n_low_issues.setter
    def n_low_issues(self, n_low_issues):
        """Sets the n_low_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_low_issues: The n_low_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_low_issues = n_low_issues

    @property
    def n_info_issues(self):
        # type: () -> int
        """Gets the n_info_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_info_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_info_issues

    @n_info_issues.setter
    def n_info_issues(self, n_info_issues):
        """Sets the n_info_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_info_issues: The n_info_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_info_issues = n_info_issues

    @property
    def n_open_source_licenses(self):
        # type: () -> int
        """Gets the n_open_source_licenses of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_open_source_licenses of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_open_source_licenses

    @n_open_source_licenses.setter
    def n_open_source_licenses(self, n_open_source_licenses):
        """Sets the n_open_source_licenses of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_open_source_licenses: The n_open_source_licenses of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_open_source_licenses = n_open_source_licenses

    @property
    def n_open_source_packages(self):
        # type: () -> int
        """Gets the n_open_source_packages of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_open_source_packages of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_open_source_packages

    @n_open_source_packages.setter
    def n_open_source_packages(self, n_open_source_packages):
        """Sets the n_open_source_packages of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_open_source_packages: The n_open_source_packages of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_open_source_packages = n_open_source_packages

    @property
    def n_new_app_issues(self):
        # type: () -> int
        """Gets the n_new_app_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_new_app_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_new_app_issues

    @n_new_app_issues.setter
    def n_new_app_issues(self, n_new_app_issues):
        """Sets the n_new_app_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_new_app_issues: The n_new_app_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_new_app_issues = n_new_app_issues

    @property
    def n_new_app_critical_issues(self):
        # type: () -> int
        """Gets the n_new_app_critical_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_new_app_critical_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_new_app_critical_issues

    @n_new_app_critical_issues.setter
    def n_new_app_critical_issues(self, n_new_app_critical_issues):
        """Sets the n_new_app_critical_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_new_app_critical_issues: The n_new_app_critical_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_new_app_critical_issues = n_new_app_critical_issues

    @property
    def n_new_app_high_issues(self):
        # type: () -> int
        """Gets the n_new_app_high_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_new_app_high_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_new_app_high_issues

    @n_new_app_high_issues.setter
    def n_new_app_high_issues(self, n_new_app_high_issues):
        """Sets the n_new_app_high_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_new_app_high_issues: The n_new_app_high_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_new_app_high_issues = n_new_app_high_issues

    @property
    def n_new_app_medium_issues(self):
        # type: () -> int
        """Gets the n_new_app_medium_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_new_app_medium_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_new_app_medium_issues

    @n_new_app_medium_issues.setter
    def n_new_app_medium_issues(self, n_new_app_medium_issues):
        """Sets the n_new_app_medium_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_new_app_medium_issues: The n_new_app_medium_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_new_app_medium_issues = n_new_app_medium_issues

    @property
    def n_new_app_low_issues(self):
        # type: () -> int
        """Gets the n_new_app_low_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_new_app_low_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_new_app_low_issues

    @n_new_app_low_issues.setter
    def n_new_app_low_issues(self, n_new_app_low_issues):
        """Sets the n_new_app_low_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_new_app_low_issues: The n_new_app_low_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_new_app_low_issues = n_new_app_low_issues

    @property
    def n_new_app_info_issues(self):
        # type: () -> int
        """Gets the n_new_app_info_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The n_new_app_info_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._n_new_app_info_issues

    @n_new_app_info_issues.setter
    def n_new_app_info_issues(self, n_new_app_info_issues):
        """Sets the n_new_app_info_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param n_new_app_info_issues: The n_new_app_info_issues of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._n_new_app_info_issues = n_new_app_info_issues

    @property
    def available_reports(self):
        # type: () -> list[str]
        """Gets the available_reports of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The available_reports of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: list[str]
        """
        return self._available_reports

    @available_reports.setter
    def available_reports(self, available_reports):
        """Sets the available_reports of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param available_reports: The available_reports of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: list[str]
        """
        allowed_values = [
            "Xml",
            "Pdf",
            "Html",
            "CompliancePdf",
            "OwaspTop10Pdf",
            "Sans25Pdf",
            "RawXml",
            "Zip",
        ]
        if self._configuration.client_side_validation and not set(available_reports).issubset(
            set(allowed_values)
        ):
            raise ValueError(
                "Invalid values for `available_reports` [{}], must be a subset of [{}]".format(
                    ", ".join(map(str, set(available_reports) - set(allowed_values))),
                    ", ".join(map(str, allowed_values)),
                )
            )

        self._available_reports = available_reports

    @property
    def execution_progress(self):
        # type: () -> str
        """Gets the execution_progress of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The execution_progress of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: str
        """
        return self._execution_progress

    @execution_progress.setter
    def execution_progress(self, execution_progress):
        """Sets the execution_progress of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param execution_progress: The execution_progress of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: str
        """
        allowed_values = [
            "Pending",
            "Running",
            "UnderReview",
            "RunningManually",
            "Paused",
            "Completed",
        ]
        if self._configuration.client_side_validation and execution_progress not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_progress` ({}), must be one of {}".format(
                    execution_progress, allowed_values
                )
            )

        self._execution_progress = execution_progress

    @property
    def include_custom_user_message(self):
        # type: () -> bool
        """Gets the include_custom_user_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The include_custom_user_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: bool
        """
        return self._include_custom_user_message

    @include_custom_user_message.setter
    def include_custom_user_message(self, include_custom_user_message):
        """Sets the include_custom_user_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param include_custom_user_message: The include_custom_user_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: bool
        """

        self._include_custom_user_message = include_custom_user_message

    @property
    def has_logs(self):
        # type: () -> bool
        """Gets the has_logs of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The has_logs of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: bool
        """
        return self._has_logs

    @has_logs.setter
    def has_logs(self, has_logs):
        """Sets the has_logs of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param has_logs: The has_logs of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: bool
        """

        self._has_logs = has_logs

    @property
    def file_name(self):
        # type: () -> str
        """Gets the file_name of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The file_name of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param file_name: The file_name of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: str
        """

        self._file_name = file_name

    @property
    def created_by(self):
        # type: () -> UserSiteCommonModelsBasicUserInfo
        """Gets the created_by of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The created_by of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: UserSiteCommonModelsBasicUserInfo
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param created_by: The created_by of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: UserSiteCommonModelsBasicUserInfo
        """

        self._created_by = created_by

    @property
    def is_scan_file_available(self):
        # type: () -> bool
        """Gets the is_scan_file_available of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The is_scan_file_available of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: bool
        """
        return self._is_scan_file_available

    @is_scan_file_available.setter
    def is_scan_file_available(self, is_scan_file_available):
        """Sets the is_scan_file_available of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param is_scan_file_available: The is_scan_file_available of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: bool
        """

        self._is_scan_file_available = is_scan_file_available

    @property
    def comment(self):
        # type: () -> str
        """Gets the comment of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The comment of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param comment: The comment of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: str
        """

        self._comment = comment

    @property
    def enablement_message(self):
        # type: () -> str
        """Gets the enablement_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The enablement_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: str
        """
        return self._enablement_message

    @enablement_message.setter
    def enablement_message(self, enablement_message):
        """Sets the enablement_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param enablement_message: The enablement_message of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: str
        """

        self._enablement_message = enablement_message

    @property
    def handled_by_scan_enabler(self):
        # type: () -> bool
        """Gets the handled_by_scan_enabler of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The handled_by_scan_enabler of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: bool
        """
        return self._handled_by_scan_enabler

    @handled_by_scan_enabler.setter
    def handled_by_scan_enabler(self, handled_by_scan_enabler):
        """Sets the handled_by_scan_enabler of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param handled_by_scan_enabler: The handled_by_scan_enabler of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: bool
        """

        self._handled_by_scan_enabler = handled_by_scan_enabler

    @property
    def is_partial(self):
        # type: () -> bool
        """Gets the is_partial of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The is_partial of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: bool
        """
        return self._is_partial

    @is_partial.setter
    def is_partial(self, is_partial):
        """Sets the is_partial of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param is_partial: The is_partial of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: bool
        """

        self._is_partial = is_partial

    @property
    def queued_duration_sec(self):
        # type: () -> int
        """Gets the queued_duration_sec of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :return: The queued_duration_sec of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :rtype: int
        """
        return self._queued_duration_sec

    @queued_duration_sec.setter
    def queued_duration_sec(self, queued_duration_sec):
        """Sets the queued_duration_sec of this AppScanSaaSModelsV2IastAnalyzerScanExecution.


        :param queued_duration_sec: The queued_duration_sec of this AppScanSaaSModelsV2IastAnalyzerScanExecution.
        :type: int
        """

        self._queued_duration_sec = queued_duration_sec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AppScanSaaSModelsV2IastAnalyzerScanExecution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppScanSaaSModelsV2IastAnalyzerScanExecution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppScanSaaSModelsV2IastAnalyzerScanExecution):
            return True

        return self.to_dict() != other.to_dict()
