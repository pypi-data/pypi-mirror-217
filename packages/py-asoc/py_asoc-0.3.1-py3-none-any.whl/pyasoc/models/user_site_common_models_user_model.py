"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class UserSiteCommonModelsUserModel:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "user_name": "str",
        "first_name": "str",
        "last_name": "str",
        "is_admin": "bool",
        "role_id": "str",
        "role_name": "str",
        "asset_group_ids": "list[str]",
        "email": "str",
        "created_at": "datetime",
        "last_login": "datetime",
        "has_api_key": "bool",
        "status": "str",
        "invited_by": "str",
    }

    attribute_map = {
        "id": "Id",
        "user_name": "UserName",
        "first_name": "FirstName",
        "last_name": "LastName",
        "is_admin": "IsAdmin",
        "role_id": "RoleId",
        "role_name": "RoleName",
        "asset_group_ids": "AssetGroupIds",
        "email": "Email",
        "created_at": "CreatedAt",
        "last_login": "LastLogin",
        "has_api_key": "HasApiKey",
        "status": "Status",
        "invited_by": "InvitedBy",
    }

    def __init__(
        self,
        id=None,
        user_name=None,
        first_name=None,
        last_name=None,
        is_admin=None,
        role_id=None,
        role_name=None,
        asset_group_ids=None,
        email=None,
        created_at=None,
        last_login=None,
        has_api_key=None,
        status=None,
        invited_by=None,
        _configuration=None,
    ):
        """UserSiteCommonModelsUserModel - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._is_admin = None
        self._role_id = None
        self._role_name = None
        self._asset_group_ids = None
        self._email = None
        self._created_at = None
        self._last_login = None
        self._has_api_key = None
        self._status = None
        self._invited_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_name is not None:
            self.user_name = user_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if is_admin is not None:
            self.is_admin = is_admin
        if role_id is not None:
            self.role_id = role_id
        if role_name is not None:
            self.role_name = role_name
        if asset_group_ids is not None:
            self.asset_group_ids = asset_group_ids
        if email is not None:
            self.email = email
        if created_at is not None:
            self.created_at = created_at
        if last_login is not None:
            self.last_login = last_login
        if has_api_key is not None:
            self.has_api_key = has_api_key
        if status is not None:
            self.status = status
        if invited_by is not None:
            self.invited_by = invited_by

    @property
    def id(self):
        # type: () -> str
        """Gets the id of this UserSiteCommonModelsUserModel.


        :return: The id of this UserSiteCommonModelsUserModel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserSiteCommonModelsUserModel.


        :param id: The id of this UserSiteCommonModelsUserModel.
        :type: str
        """

        self._id = id

    @property
    def user_name(self):
        # type: () -> str
        """Gets the user_name of this UserSiteCommonModelsUserModel.


        :return: The user_name of this UserSiteCommonModelsUserModel.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserSiteCommonModelsUserModel.


        :param user_name: The user_name of this UserSiteCommonModelsUserModel.
        :type: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        # type: () -> str
        """Gets the first_name of this UserSiteCommonModelsUserModel.


        :return: The first_name of this UserSiteCommonModelsUserModel.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserSiteCommonModelsUserModel.


        :param first_name: The first_name of this UserSiteCommonModelsUserModel.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        # type: () -> str
        """Gets the last_name of this UserSiteCommonModelsUserModel.


        :return: The last_name of this UserSiteCommonModelsUserModel.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserSiteCommonModelsUserModel.


        :param last_name: The last_name of this UserSiteCommonModelsUserModel.
        :type: str
        """

        self._last_name = last_name

    @property
    def is_admin(self):
        # type: () -> bool
        """Gets the is_admin of this UserSiteCommonModelsUserModel.


        :return: The is_admin of this UserSiteCommonModelsUserModel.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this UserSiteCommonModelsUserModel.


        :param is_admin: The is_admin of this UserSiteCommonModelsUserModel.
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def role_id(self):
        # type: () -> str
        """Gets the role_id of this UserSiteCommonModelsUserModel.


        :return: The role_id of this UserSiteCommonModelsUserModel.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this UserSiteCommonModelsUserModel.


        :param role_id: The role_id of this UserSiteCommonModelsUserModel.
        :type: str
        """

        self._role_id = role_id

    @property
    def role_name(self):
        # type: () -> str
        """Gets the role_name of this UserSiteCommonModelsUserModel.


        :return: The role_name of this UserSiteCommonModelsUserModel.
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this UserSiteCommonModelsUserModel.


        :param role_name: The role_name of this UserSiteCommonModelsUserModel.
        :type: str
        """

        self._role_name = role_name

    @property
    def asset_group_ids(self):
        # type: () -> list[str]
        """Gets the asset_group_ids of this UserSiteCommonModelsUserModel.


        :return: The asset_group_ids of this UserSiteCommonModelsUserModel.
        :rtype: list[str]
        """
        return self._asset_group_ids

    @asset_group_ids.setter
    def asset_group_ids(self, asset_group_ids):
        """Sets the asset_group_ids of this UserSiteCommonModelsUserModel.


        :param asset_group_ids: The asset_group_ids of this UserSiteCommonModelsUserModel.
        :type: list[str]
        """

        self._asset_group_ids = asset_group_ids

    @property
    def email(self):
        # type: () -> str
        """Gets the email of this UserSiteCommonModelsUserModel.


        :return: The email of this UserSiteCommonModelsUserModel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserSiteCommonModelsUserModel.


        :param email: The email of this UserSiteCommonModelsUserModel.
        :type: str
        """

        self._email = email

    @property
    def created_at(self):
        # type: () -> datetime
        """Gets the created_at of this UserSiteCommonModelsUserModel.


        :return: The created_at of this UserSiteCommonModelsUserModel.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserSiteCommonModelsUserModel.


        :param created_at: The created_at of this UserSiteCommonModelsUserModel.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def last_login(self):
        # type: () -> datetime
        """Gets the last_login of this UserSiteCommonModelsUserModel.


        :return: The last_login of this UserSiteCommonModelsUserModel.
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this UserSiteCommonModelsUserModel.


        :param last_login: The last_login of this UserSiteCommonModelsUserModel.
        :type: datetime
        """

        self._last_login = last_login

    @property
    def has_api_key(self):
        # type: () -> bool
        """Gets the has_api_key of this UserSiteCommonModelsUserModel.


        :return: The has_api_key of this UserSiteCommonModelsUserModel.
        :rtype: bool
        """
        return self._has_api_key

    @has_api_key.setter
    def has_api_key(self, has_api_key):
        """Sets the has_api_key of this UserSiteCommonModelsUserModel.


        :param has_api_key: The has_api_key of this UserSiteCommonModelsUserModel.
        :type: bool
        """

        self._has_api_key = has_api_key

    @property
    def status(self):
        # type: () -> str
        """Gets the status of this UserSiteCommonModelsUserModel.


        :return: The status of this UserSiteCommonModelsUserModel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserSiteCommonModelsUserModel.


        :param status: The status of this UserSiteCommonModelsUserModel.
        :type: str
        """
        allowed_values = [
            "Active",
            "BlockNewScans",
            "BlockAccess",
            "PendingActivation",
            "BlockAccessFromAPI",
            "Archived",
            "InvitationExpired",
        ]
        if self._configuration.client_side_validation and status not in allowed_values:
            raise ValueError(
                f"Invalid value for `status` ({status}), must be one of {allowed_values}"
            )

        self._status = status

    @property
    def invited_by(self):
        # type: () -> str
        """Gets the invited_by of this UserSiteCommonModelsUserModel.


        :return: The invited_by of this UserSiteCommonModelsUserModel.
        :rtype: str
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """Sets the invited_by of this UserSiteCommonModelsUserModel.


        :param invited_by: The invited_by of this UserSiteCommonModelsUserModel.
        :type: str
        """

        self._invited_by = invited_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserSiteCommonModelsUserModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSiteCommonModelsUserModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSiteCommonModelsUserModel):
            return True

        return self.to_dict() != other.to_dict()
