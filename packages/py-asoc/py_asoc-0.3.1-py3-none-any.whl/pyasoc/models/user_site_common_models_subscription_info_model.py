"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class UserSiteCommonModelsSubscriptionInfoModel:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "is_valid": "bool",
        "is_trial": "bool",
        "hide_counters": "bool",
        "offering_type": "str",
        "expiration_date": "datetime",
        "removal_date": "datetime",
        "subscription_id": "str",
        "tenant_id": "str",
        "total_seats": "int",
        "taken_seats": "int",
        "full_report_for_trial_enaled": "bool",
        "purchase_supplier": "str",
        "max_users": "int",
    }

    attribute_map = {
        "is_valid": "IsValid",
        "is_trial": "IsTrial",
        "hide_counters": "HideCounters",
        "offering_type": "OfferingType",
        "expiration_date": "ExpirationDate",
        "removal_date": "RemovalDate",
        "subscription_id": "SubscriptionId",
        "tenant_id": "TenantId",
        "total_seats": "TotalSeats",
        "taken_seats": "TakenSeats",
        "full_report_for_trial_enaled": "FullReportForTrialEnaled",
        "purchase_supplier": "PurchaseSupplier",
        "max_users": "MaxUsers",
    }

    def __init__(
        self,
        is_valid=None,
        is_trial=None,
        hide_counters=None,
        offering_type=None,
        expiration_date=None,
        removal_date=None,
        subscription_id=None,
        tenant_id=None,
        total_seats=None,
        taken_seats=None,
        full_report_for_trial_enaled=None,
        purchase_supplier=None,
        max_users=None,
        _configuration=None,
    ):
        """UserSiteCommonModelsSubscriptionInfoModel - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_valid = None
        self._is_trial = None
        self._hide_counters = None
        self._offering_type = None
        self._expiration_date = None
        self._removal_date = None
        self._subscription_id = None
        self._tenant_id = None
        self._total_seats = None
        self._taken_seats = None
        self._full_report_for_trial_enaled = None
        self._purchase_supplier = None
        self._max_users = None
        self.discriminator = None

        if is_valid is not None:
            self.is_valid = is_valid
        if is_trial is not None:
            self.is_trial = is_trial
        if hide_counters is not None:
            self.hide_counters = hide_counters
        if offering_type is not None:
            self.offering_type = offering_type
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if removal_date is not None:
            self.removal_date = removal_date
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if total_seats is not None:
            self.total_seats = total_seats
        if taken_seats is not None:
            self.taken_seats = taken_seats
        if full_report_for_trial_enaled is not None:
            self.full_report_for_trial_enaled = full_report_for_trial_enaled
        if purchase_supplier is not None:
            self.purchase_supplier = purchase_supplier
        if max_users is not None:
            self.max_users = max_users

    @property
    def is_valid(self):
        # type: () -> bool
        """Gets the is_valid of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The is_valid of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this UserSiteCommonModelsSubscriptionInfoModel.


        :param is_valid: The is_valid of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def is_trial(self):
        # type: () -> bool
        """Gets the is_trial of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The is_trial of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: bool
        """
        return self._is_trial

    @is_trial.setter
    def is_trial(self, is_trial):
        """Sets the is_trial of this UserSiteCommonModelsSubscriptionInfoModel.


        :param is_trial: The is_trial of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: bool
        """

        self._is_trial = is_trial

    @property
    def hide_counters(self):
        # type: () -> bool
        """Gets the hide_counters of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The hide_counters of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: bool
        """
        return self._hide_counters

    @hide_counters.setter
    def hide_counters(self, hide_counters):
        """Sets the hide_counters of this UserSiteCommonModelsSubscriptionInfoModel.


        :param hide_counters: The hide_counters of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: bool
        """

        self._hide_counters = hide_counters

    @property
    def offering_type(self):
        # type: () -> str
        """Gets the offering_type of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The offering_type of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: str
        """
        return self._offering_type

    @offering_type.setter
    def offering_type(self, offering_type):
        """Sets the offering_type of this UserSiteCommonModelsSubscriptionInfoModel.


        :param offering_type: The offering_type of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: str
        """

        self._offering_type = offering_type

    @property
    def expiration_date(self):
        # type: () -> datetime
        """Gets the expiration_date of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The expiration_date of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this UserSiteCommonModelsSubscriptionInfoModel.


        :param expiration_date: The expiration_date of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def removal_date(self):
        # type: () -> datetime
        """Gets the removal_date of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The removal_date of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: datetime
        """
        return self._removal_date

    @removal_date.setter
    def removal_date(self, removal_date):
        """Sets the removal_date of this UserSiteCommonModelsSubscriptionInfoModel.


        :param removal_date: The removal_date of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: datetime
        """

        self._removal_date = removal_date

    @property
    def subscription_id(self):
        # type: () -> str
        """Gets the subscription_id of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The subscription_id of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this UserSiteCommonModelsSubscriptionInfoModel.


        :param subscription_id: The subscription_id of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def tenant_id(self):
        # type: () -> str
        """Gets the tenant_id of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The tenant_id of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this UserSiteCommonModelsSubscriptionInfoModel.


        :param tenant_id: The tenant_id of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def total_seats(self):
        # type: () -> int
        """Gets the total_seats of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The total_seats of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: int
        """
        return self._total_seats

    @total_seats.setter
    def total_seats(self, total_seats):
        """Sets the total_seats of this UserSiteCommonModelsSubscriptionInfoModel.


        :param total_seats: The total_seats of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: int
        """

        self._total_seats = total_seats

    @property
    def taken_seats(self):
        # type: () -> int
        """Gets the taken_seats of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The taken_seats of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: int
        """
        return self._taken_seats

    @taken_seats.setter
    def taken_seats(self, taken_seats):
        """Sets the taken_seats of this UserSiteCommonModelsSubscriptionInfoModel.


        :param taken_seats: The taken_seats of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: int
        """

        self._taken_seats = taken_seats

    @property
    def full_report_for_trial_enaled(self):
        # type: () -> bool
        """Gets the full_report_for_trial_enaled of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The full_report_for_trial_enaled of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: bool
        """
        return self._full_report_for_trial_enaled

    @full_report_for_trial_enaled.setter
    def full_report_for_trial_enaled(self, full_report_for_trial_enaled):
        """Sets the full_report_for_trial_enaled of this UserSiteCommonModelsSubscriptionInfoModel.


        :param full_report_for_trial_enaled: The full_report_for_trial_enaled of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: bool
        """

        self._full_report_for_trial_enaled = full_report_for_trial_enaled

    @property
    def purchase_supplier(self):
        # type: () -> str
        """Gets the purchase_supplier of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The purchase_supplier of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: str
        """
        return self._purchase_supplier

    @purchase_supplier.setter
    def purchase_supplier(self, purchase_supplier):
        """Sets the purchase_supplier of this UserSiteCommonModelsSubscriptionInfoModel.


        :param purchase_supplier: The purchase_supplier of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: str
        """

        self._purchase_supplier = purchase_supplier

    @property
    def max_users(self):
        # type: () -> int
        """Gets the max_users of this UserSiteCommonModelsSubscriptionInfoModel.


        :return: The max_users of this UserSiteCommonModelsSubscriptionInfoModel.
        :rtype: int
        """
        return self._max_users

    @max_users.setter
    def max_users(self, max_users):
        """Sets the max_users of this UserSiteCommonModelsSubscriptionInfoModel.


        :param max_users: The max_users of this UserSiteCommonModelsSubscriptionInfoModel.
        :type: int
        """

        self._max_users = max_users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserSiteCommonModelsSubscriptionInfoModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSiteCommonModelsSubscriptionInfoModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSiteCommonModelsSubscriptionInfoModel):
            return True

        return self.to_dict() != other.to_dict()
