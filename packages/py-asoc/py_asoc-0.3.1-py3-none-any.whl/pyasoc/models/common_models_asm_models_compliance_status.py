"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class CommonModelsASMModelsComplianceStatus:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "policy_id": "str",
        "enabled": "bool",
        "name": "str",
        "associted_by": "str",
        "compliant": "bool",
        "category": "str",
        "parameters": "str",
    }

    attribute_map = {
        "policy_id": "PolicyId",
        "enabled": "Enabled",
        "name": "Name",
        "associted_by": "AssocitedBy",
        "compliant": "Compliant",
        "category": "Category",
        "parameters": "Parameters",
    }

    def __init__(
        self,
        policy_id=None,
        enabled=None,
        name=None,
        associted_by=None,
        compliant=None,
        category=None,
        parameters=None,
        _configuration=None,
    ):
        """CommonModelsASMModelsComplianceStatus - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._policy_id = None
        self._enabled = None
        self._name = None
        self._associted_by = None
        self._compliant = None
        self._category = None
        self._parameters = None
        self.discriminator = None

        if policy_id is not None:
            self.policy_id = policy_id
        if enabled is not None:
            self.enabled = enabled
        if name is not None:
            self.name = name
        if associted_by is not None:
            self.associted_by = associted_by
        if compliant is not None:
            self.compliant = compliant
        if category is not None:
            self.category = category
        if parameters is not None:
            self.parameters = parameters

    @property
    def policy_id(self):
        # type: () -> str
        """Gets the policy_id of this CommonModelsASMModelsComplianceStatus.


        :return: The policy_id of this CommonModelsASMModelsComplianceStatus.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this CommonModelsASMModelsComplianceStatus.


        :param policy_id: The policy_id of this CommonModelsASMModelsComplianceStatus.
        :type: str
        """

        self._policy_id = policy_id

    @property
    def enabled(self):
        # type: () -> bool
        """Gets the enabled of this CommonModelsASMModelsComplianceStatus.


        :return: The enabled of this CommonModelsASMModelsComplianceStatus.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CommonModelsASMModelsComplianceStatus.


        :param enabled: The enabled of this CommonModelsASMModelsComplianceStatus.
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        # type: () -> str
        """Gets the name of this CommonModelsASMModelsComplianceStatus.


        :return: The name of this CommonModelsASMModelsComplianceStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommonModelsASMModelsComplianceStatus.


        :param name: The name of this CommonModelsASMModelsComplianceStatus.
        :type: str
        """
        if self._configuration.client_side_validation and name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if self._configuration.client_side_validation and name is not None and len(name) < 0:
            raise ValueError(
                "Invalid value for `name`, length must be greater than or equal to `0`"
            )

        self._name = name

    @property
    def associted_by(self):
        # type: () -> str
        """Gets the associted_by of this CommonModelsASMModelsComplianceStatus.


        :return: The associted_by of this CommonModelsASMModelsComplianceStatus.
        :rtype: str
        """
        return self._associted_by

    @associted_by.setter
    def associted_by(self, associted_by):
        """Sets the associted_by of this CommonModelsASMModelsComplianceStatus.


        :param associted_by: The associted_by of this CommonModelsASMModelsComplianceStatus.
        :type: str
        """

        self._associted_by = associted_by

    @property
    def compliant(self):
        # type: () -> bool
        """Gets the compliant of this CommonModelsASMModelsComplianceStatus.


        :return: The compliant of this CommonModelsASMModelsComplianceStatus.
        :rtype: bool
        """
        return self._compliant

    @compliant.setter
    def compliant(self, compliant):
        """Sets the compliant of this CommonModelsASMModelsComplianceStatus.


        :param compliant: The compliant of this CommonModelsASMModelsComplianceStatus.
        :type: bool
        """

        self._compliant = compliant

    @property
    def category(self):
        # type: () -> str
        """Gets the category of this CommonModelsASMModelsComplianceStatus.


        :return: The category of this CommonModelsASMModelsComplianceStatus.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CommonModelsASMModelsComplianceStatus.


        :param category: The category of this CommonModelsASMModelsComplianceStatus.
        :type: str
        """
        allowed_values = [
            "Custom",
            "Security",
            "Regulation",
            "IndustryStandard",
        ]
        if self._configuration.client_side_validation and category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({}), must be one of {}".format(
                    category, allowed_values
                )
            )

        self._category = category

    @property
    def parameters(self):
        # type: () -> str
        """Gets the parameters of this CommonModelsASMModelsComplianceStatus.


        :return: The parameters of this CommonModelsASMModelsComplianceStatus.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CommonModelsASMModelsComplianceStatus.


        :param parameters: The parameters of this CommonModelsASMModelsComplianceStatus.
        :type: str
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommonModelsASMModelsComplianceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelsASMModelsComplianceStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommonModelsASMModelsComplianceStatus):
            return True

        return self.to_dict() != other.to_dict()
