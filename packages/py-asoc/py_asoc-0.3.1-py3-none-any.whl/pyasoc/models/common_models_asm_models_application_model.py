"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class CommonModelsASMModelsApplicationModel:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "name": "str",
        "risk_rating": "str",
        "critical_issues": "int",
        "high_issues": "int",
        "medium_issues": "int",
        "low_issues": "int",
        "informational_issues": "int",
        "issues_in_progress": "int",
        "max_severity": "str",
        "correlation_state": "str",
        "rr_max_severity": "int",
        "asset_group_id": "str",
        "business_impact": "str",
        "url": "str",
        "description": "str",
        "business_unit": "str",
        "business_unit_id": "str",
        "type": "str",
        "technology": "str",
        "testing_status": "str",
        "hosts": "str",
        "collateral_damage_potential": "str",
        "target_distribution": "str",
        "confidentiality_requirement": "str",
        "integrity_requirement": "str",
        "availability_requirement": "str",
        "tester": "str",
        "business_owner": "str",
        "development_contact": "str",
        "preferred_offering_type": "str",
        "asset_group_name": "str",
        "date_created": "datetime",
        "last_updated": "datetime",
        "last_comment": "datetime",
        "created_by": "str",
        "new_issues": "int",
        "open_issues": "int",
        "total_issues": "int",
        "overall_compliance": "bool",
        "compliance_statuses": "list[CommonModelsASMModelsComplianceStatus]",
        "can_be_deleted": "bool",
        "locked_to_subscription": "bool",
        "total_scans": "int",
        "n_scan_executions": "int",
        "has_exceeding_issues_number": "bool",
        "has_exceeding_scans_number": "bool",
        "auto_delete_exceeded_scans": "bool",
    }

    attribute_map = {
        "id": "Id",
        "name": "Name",
        "risk_rating": "RiskRating",
        "critical_issues": "CriticalIssues",
        "high_issues": "HighIssues",
        "medium_issues": "MediumIssues",
        "low_issues": "LowIssues",
        "informational_issues": "InformationalIssues",
        "issues_in_progress": "IssuesInProgress",
        "max_severity": "MaxSeverity",
        "correlation_state": "CorrelationState",
        "rr_max_severity": "RR_MaxSeverity",
        "asset_group_id": "AssetGroupId",
        "business_impact": "BusinessImpact",
        "url": "Url",
        "description": "Description",
        "business_unit": "BusinessUnit",
        "business_unit_id": "BusinessUnitId",
        "type": "Type",
        "technology": "Technology",
        "testing_status": "TestingStatus",
        "hosts": "Hosts",
        "collateral_damage_potential": "CollateralDamagePotential",
        "target_distribution": "TargetDistribution",
        "confidentiality_requirement": "ConfidentialityRequirement",
        "integrity_requirement": "IntegrityRequirement",
        "availability_requirement": "AvailabilityRequirement",
        "tester": "Tester",
        "business_owner": "BusinessOwner",
        "development_contact": "DevelopmentContact",
        "preferred_offering_type": "PreferredOfferingType",
        "asset_group_name": "AssetGroupName",
        "date_created": "DateCreated",
        "last_updated": "LastUpdated",
        "last_comment": "LastComment",
        "created_by": "CreatedBy",
        "new_issues": "NewIssues",
        "open_issues": "OpenIssues",
        "total_issues": "TotalIssues",
        "overall_compliance": "OverallCompliance",
        "compliance_statuses": "ComplianceStatuses",
        "can_be_deleted": "CanBeDeleted",
        "locked_to_subscription": "LockedToSubscription",
        "total_scans": "TotalScans",
        "n_scan_executions": "NScanExecutions",
        "has_exceeding_issues_number": "HasExceedingIssuesNumber",
        "has_exceeding_scans_number": "HasExceedingScansNumber",
        "auto_delete_exceeded_scans": "AutoDeleteExceededScans",
    }

    def __init__(
        self,
        id=None,
        name=None,
        risk_rating=None,
        critical_issues=None,
        high_issues=None,
        medium_issues=None,
        low_issues=None,
        informational_issues=None,
        issues_in_progress=None,
        max_severity=None,
        correlation_state=None,
        rr_max_severity=None,
        asset_group_id=None,
        business_impact=None,
        url=None,
        description=None,
        business_unit=None,
        business_unit_id=None,
        type=None,
        technology=None,
        testing_status=None,
        hosts=None,
        collateral_damage_potential=None,
        target_distribution=None,
        confidentiality_requirement=None,
        integrity_requirement=None,
        availability_requirement=None,
        tester=None,
        business_owner=None,
        development_contact=None,
        preferred_offering_type=None,
        asset_group_name=None,
        date_created=None,
        last_updated=None,
        last_comment=None,
        created_by=None,
        new_issues=None,
        open_issues=None,
        total_issues=None,
        overall_compliance=None,
        compliance_statuses=None,
        can_be_deleted=None,
        locked_to_subscription=None,
        total_scans=None,
        n_scan_executions=None,
        has_exceeding_issues_number=None,
        has_exceeding_scans_number=None,
        auto_delete_exceeded_scans=None,
        _configuration=None,
    ):
        """CommonModelsASMModelsApplicationModel - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._risk_rating = None
        self._critical_issues = None
        self._high_issues = None
        self._medium_issues = None
        self._low_issues = None
        self._informational_issues = None
        self._issues_in_progress = None
        self._max_severity = None
        self._correlation_state = None
        self._rr_max_severity = None
        self._asset_group_id = None
        self._business_impact = None
        self._url = None
        self._description = None
        self._business_unit = None
        self._business_unit_id = None
        self._type = None
        self._technology = None
        self._testing_status = None
        self._hosts = None
        self._collateral_damage_potential = None
        self._target_distribution = None
        self._confidentiality_requirement = None
        self._integrity_requirement = None
        self._availability_requirement = None
        self._tester = None
        self._business_owner = None
        self._development_contact = None
        self._preferred_offering_type = None
        self._asset_group_name = None
        self._date_created = None
        self._last_updated = None
        self._last_comment = None
        self._created_by = None
        self._new_issues = None
        self._open_issues = None
        self._total_issues = None
        self._overall_compliance = None
        self._compliance_statuses = None
        self._can_be_deleted = None
        self._locked_to_subscription = None
        self._total_scans = None
        self._n_scan_executions = None
        self._has_exceeding_issues_number = None
        self._has_exceeding_scans_number = None
        self._auto_delete_exceeded_scans = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if risk_rating is not None:
            self.risk_rating = risk_rating
        if critical_issues is not None:
            self.critical_issues = critical_issues
        if high_issues is not None:
            self.high_issues = high_issues
        if medium_issues is not None:
            self.medium_issues = medium_issues
        if low_issues is not None:
            self.low_issues = low_issues
        if informational_issues is not None:
            self.informational_issues = informational_issues
        if issues_in_progress is not None:
            self.issues_in_progress = issues_in_progress
        if max_severity is not None:
            self.max_severity = max_severity
        if correlation_state is not None:
            self.correlation_state = correlation_state
        if rr_max_severity is not None:
            self.rr_max_severity = rr_max_severity
        if asset_group_id is not None:
            self.asset_group_id = asset_group_id
        if business_impact is not None:
            self.business_impact = business_impact
        if url is not None:
            self.url = url
        if description is not None:
            self.description = description
        if business_unit is not None:
            self.business_unit = business_unit
        if business_unit_id is not None:
            self.business_unit_id = business_unit_id
        if type is not None:
            self.type = type
        if technology is not None:
            self.technology = technology
        if testing_status is not None:
            self.testing_status = testing_status
        if hosts is not None:
            self.hosts = hosts
        if collateral_damage_potential is not None:
            self.collateral_damage_potential = collateral_damage_potential
        if target_distribution is not None:
            self.target_distribution = target_distribution
        if confidentiality_requirement is not None:
            self.confidentiality_requirement = confidentiality_requirement
        if integrity_requirement is not None:
            self.integrity_requirement = integrity_requirement
        if availability_requirement is not None:
            self.availability_requirement = availability_requirement
        if tester is not None:
            self.tester = tester
        if business_owner is not None:
            self.business_owner = business_owner
        if development_contact is not None:
            self.development_contact = development_contact
        if preferred_offering_type is not None:
            self.preferred_offering_type = preferred_offering_type
        if asset_group_name is not None:
            self.asset_group_name = asset_group_name
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated
        if last_comment is not None:
            self.last_comment = last_comment
        if created_by is not None:
            self.created_by = created_by
        if new_issues is not None:
            self.new_issues = new_issues
        if open_issues is not None:
            self.open_issues = open_issues
        if total_issues is not None:
            self.total_issues = total_issues
        if overall_compliance is not None:
            self.overall_compliance = overall_compliance
        if compliance_statuses is not None:
            self.compliance_statuses = compliance_statuses
        if can_be_deleted is not None:
            self.can_be_deleted = can_be_deleted
        if locked_to_subscription is not None:
            self.locked_to_subscription = locked_to_subscription
        if total_scans is not None:
            self.total_scans = total_scans
        if n_scan_executions is not None:
            self.n_scan_executions = n_scan_executions
        if has_exceeding_issues_number is not None:
            self.has_exceeding_issues_number = has_exceeding_issues_number
        if has_exceeding_scans_number is not None:
            self.has_exceeding_scans_number = has_exceeding_scans_number
        if auto_delete_exceeded_scans is not None:
            self.auto_delete_exceeded_scans = auto_delete_exceeded_scans

    @property
    def id(self):
        # type: () -> str
        """Gets the id of this CommonModelsASMModelsApplicationModel.


        :return: The id of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonModelsASMModelsApplicationModel.


        :param id: The id of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        # type: () -> str
        """Gets the name of this CommonModelsASMModelsApplicationModel.


        :return: The name of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommonModelsASMModelsApplicationModel.


        :param name: The name of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        if self._configuration.client_side_validation and name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if self._configuration.client_side_validation and name is not None and len(name) < 0:
            raise ValueError(
                "Invalid value for `name`, length must be greater than or equal to `0`"
            )

        self._name = name

    @property
    def risk_rating(self):
        # type: () -> str
        """Gets the risk_rating of this CommonModelsASMModelsApplicationModel.


        :return: The risk_rating of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._risk_rating

    @risk_rating.setter
    def risk_rating(self, risk_rating):
        """Sets the risk_rating of this CommonModelsASMModelsApplicationModel.


        :param risk_rating: The risk_rating of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        allowed_values = ["Unknown", "Low", "Medium", "High", "Critical"]
        if self._configuration.client_side_validation and risk_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `risk_rating` ({}), must be one of {}".format(
                    risk_rating, allowed_values
                )
            )

        self._risk_rating = risk_rating

    @property
    def critical_issues(self):
        # type: () -> int
        """Gets the critical_issues of this CommonModelsASMModelsApplicationModel.


        :return: The critical_issues of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._critical_issues

    @critical_issues.setter
    def critical_issues(self, critical_issues):
        """Sets the critical_issues of this CommonModelsASMModelsApplicationModel.


        :param critical_issues: The critical_issues of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._critical_issues = critical_issues

    @property
    def high_issues(self):
        # type: () -> int
        """Gets the high_issues of this CommonModelsASMModelsApplicationModel.


        :return: The high_issues of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._high_issues

    @high_issues.setter
    def high_issues(self, high_issues):
        """Sets the high_issues of this CommonModelsASMModelsApplicationModel.


        :param high_issues: The high_issues of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._high_issues = high_issues

    @property
    def medium_issues(self):
        # type: () -> int
        """Gets the medium_issues of this CommonModelsASMModelsApplicationModel.


        :return: The medium_issues of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._medium_issues

    @medium_issues.setter
    def medium_issues(self, medium_issues):
        """Sets the medium_issues of this CommonModelsASMModelsApplicationModel.


        :param medium_issues: The medium_issues of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._medium_issues = medium_issues

    @property
    def low_issues(self):
        # type: () -> int
        """Gets the low_issues of this CommonModelsASMModelsApplicationModel.


        :return: The low_issues of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._low_issues

    @low_issues.setter
    def low_issues(self, low_issues):
        """Sets the low_issues of this CommonModelsASMModelsApplicationModel.


        :param low_issues: The low_issues of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._low_issues = low_issues

    @property
    def informational_issues(self):
        # type: () -> int
        """Gets the informational_issues of this CommonModelsASMModelsApplicationModel.


        :return: The informational_issues of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._informational_issues

    @informational_issues.setter
    def informational_issues(self, informational_issues):
        """Sets the informational_issues of this CommonModelsASMModelsApplicationModel.


        :param informational_issues: The informational_issues of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._informational_issues = informational_issues

    @property
    def issues_in_progress(self):
        # type: () -> int
        """Gets the issues_in_progress of this CommonModelsASMModelsApplicationModel.


        :return: The issues_in_progress of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._issues_in_progress

    @issues_in_progress.setter
    def issues_in_progress(self, issues_in_progress):
        """Sets the issues_in_progress of this CommonModelsASMModelsApplicationModel.


        :param issues_in_progress: The issues_in_progress of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._issues_in_progress = issues_in_progress

    @property
    def max_severity(self):
        # type: () -> str
        """Gets the max_severity of this CommonModelsASMModelsApplicationModel.


        :return: The max_severity of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._max_severity

    @max_severity.setter
    def max_severity(self, max_severity):
        """Sets the max_severity of this CommonModelsASMModelsApplicationModel.


        :param max_severity: The max_severity of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        allowed_values = [
            "Undetermined",
            "Informational",
            "Low",
            "Medium",
            "High",
            "Critical",
        ]
        if self._configuration.client_side_validation and max_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `max_severity` ({}), must be one of {}".format(
                    max_severity, allowed_values
                )
            )

        self._max_severity = max_severity

    @property
    def correlation_state(self):
        # type: () -> str
        """Gets the correlation_state of this CommonModelsASMModelsApplicationModel.


        :return: The correlation_state of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._correlation_state

    @correlation_state.setter
    def correlation_state(self, correlation_state):
        """Sets the correlation_state of this CommonModelsASMModelsApplicationModel.


        :param correlation_state: The correlation_state of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        allowed_values = ["None", "Active", "InProgress"]
        if self._configuration.client_side_validation and correlation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `correlation_state` ({}), must be one of {}".format(
                    correlation_state, allowed_values
                )
            )

        self._correlation_state = correlation_state

    @property
    def rr_max_severity(self):
        # type: () -> int
        """Gets the rr_max_severity of this CommonModelsASMModelsApplicationModel.


        :return: The rr_max_severity of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._rr_max_severity

    @rr_max_severity.setter
    def rr_max_severity(self, rr_max_severity):
        """Sets the rr_max_severity of this CommonModelsASMModelsApplicationModel.


        :param rr_max_severity: The rr_max_severity of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._rr_max_severity = rr_max_severity

    @property
    def asset_group_id(self):
        # type: () -> str
        """Gets the asset_group_id of this CommonModelsASMModelsApplicationModel.


        :return: The asset_group_id of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._asset_group_id

    @asset_group_id.setter
    def asset_group_id(self, asset_group_id):
        """Sets the asset_group_id of this CommonModelsASMModelsApplicationModel.


        :param asset_group_id: The asset_group_id of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._asset_group_id = asset_group_id

    @property
    def business_impact(self):
        # type: () -> str
        """Gets the business_impact of this CommonModelsASMModelsApplicationModel.


        :return: The business_impact of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._business_impact

    @business_impact.setter
    def business_impact(self, business_impact):
        """Sets the business_impact of this CommonModelsASMModelsApplicationModel.


        :param business_impact: The business_impact of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        allowed_values = [
            "Unspecified",
            "Low",
            "Medium",
            "High",
            "Critical",
        ]
        if self._configuration.client_side_validation and business_impact not in allowed_values:
            raise ValueError(
                "Invalid value for `business_impact` ({}), must be one of {}".format(
                    business_impact, allowed_values
                )
            )

        self._business_impact = business_impact

    @property
    def url(self):
        # type: () -> str
        """Gets the url of this CommonModelsASMModelsApplicationModel.


        :return: The url of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CommonModelsASMModelsApplicationModel.


        :param url: The url of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._url = url

    @property
    def description(self):
        # type: () -> str
        """Gets the description of this CommonModelsASMModelsApplicationModel.


        :return: The description of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CommonModelsASMModelsApplicationModel.


        :param description: The description of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._description = description

    @property
    def business_unit(self):
        # type: () -> str
        """Gets the business_unit of this CommonModelsASMModelsApplicationModel.


        :return: The business_unit of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this CommonModelsASMModelsApplicationModel.


        :param business_unit: The business_unit of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._business_unit = business_unit

    @property
    def business_unit_id(self):
        # type: () -> str
        """Gets the business_unit_id of this CommonModelsASMModelsApplicationModel.


        :return: The business_unit_id of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._business_unit_id

    @business_unit_id.setter
    def business_unit_id(self, business_unit_id):
        """Sets the business_unit_id of this CommonModelsASMModelsApplicationModel.


        :param business_unit_id: The business_unit_id of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._business_unit_id = business_unit_id

    @property
    def type(self):
        # type: () -> str
        """Gets the type of this CommonModelsASMModelsApplicationModel.


        :return: The type of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CommonModelsASMModelsApplicationModel.


        :param type: The type of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._type = type

    @property
    def technology(self):
        # type: () -> str
        """Gets the technology of this CommonModelsASMModelsApplicationModel.


        :return: The technology of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this CommonModelsASMModelsApplicationModel.


        :param technology: The technology of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._technology = technology

    @property
    def testing_status(self):
        # type: () -> str
        """Gets the testing_status of this CommonModelsASMModelsApplicationModel.


        :return: The testing_status of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._testing_status

    @testing_status.setter
    def testing_status(self, testing_status):
        """Sets the testing_status of this CommonModelsASMModelsApplicationModel.


        :param testing_status: The testing_status of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        allowed_values = ["NotStarted", "InProgress", "Completed"]
        if self._configuration.client_side_validation and testing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `testing_status` ({}), must be one of {}".format(
                    testing_status, allowed_values
                )
            )

        self._testing_status = testing_status

    @property
    def hosts(self):
        # type: () -> str
        """Gets the hosts of this CommonModelsASMModelsApplicationModel.


        :return: The hosts of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this CommonModelsASMModelsApplicationModel.


        :param hosts: The hosts of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._hosts = hosts

    @property
    def collateral_damage_potential(self):
        # type: () -> str
        """Gets the collateral_damage_potential of this CommonModelsASMModelsApplicationModel.


        :return: The collateral_damage_potential of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._collateral_damage_potential

    @collateral_damage_potential.setter
    def collateral_damage_potential(self, collateral_damage_potential):
        """Sets the collateral_damage_potential of this CommonModelsASMModelsApplicationModel.


        :param collateral_damage_potential: The collateral_damage_potential of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        allowed_values = [
            "NotDefined",
            "None",
            "Low",
            "LowMedium",
            "MediumHigh",
            "High",
        ]
        if (
            self._configuration.client_side_validation
            and collateral_damage_potential not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `collateral_damage_potential` ({}), must be one of {}".format(
                    collateral_damage_potential, allowed_values
                )
            )

        self._collateral_damage_potential = collateral_damage_potential

    @property
    def target_distribution(self):
        # type: () -> str
        """Gets the target_distribution of this CommonModelsASMModelsApplicationModel.


        :return: The target_distribution of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._target_distribution

    @target_distribution.setter
    def target_distribution(self, target_distribution):
        """Sets the target_distribution of this CommonModelsASMModelsApplicationModel.


        :param target_distribution: The target_distribution of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        allowed_values = ["NotDefined", "None", "Low", "Medium", "High"]
        if self._configuration.client_side_validation and target_distribution not in allowed_values:
            raise ValueError(
                "Invalid value for `target_distribution` ({}), must be one of {}".format(
                    target_distribution, allowed_values
                )
            )

        self._target_distribution = target_distribution

    @property
    def confidentiality_requirement(self):
        # type: () -> str
        """Gets the confidentiality_requirement of this CommonModelsASMModelsApplicationModel.


        :return: The confidentiality_requirement of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._confidentiality_requirement

    @confidentiality_requirement.setter
    def confidentiality_requirement(self, confidentiality_requirement):
        """Sets the confidentiality_requirement of this CommonModelsASMModelsApplicationModel.


        :param confidentiality_requirement: The confidentiality_requirement of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        allowed_values = ["NotDefined", "Low", "Medium", "High"]
        if (
            self._configuration.client_side_validation
            and confidentiality_requirement not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `confidentiality_requirement` ({}), must be one of {}".format(
                    confidentiality_requirement, allowed_values
                )
            )

        self._confidentiality_requirement = confidentiality_requirement

    @property
    def integrity_requirement(self):
        # type: () -> str
        """Gets the integrity_requirement of this CommonModelsASMModelsApplicationModel.


        :return: The integrity_requirement of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._integrity_requirement

    @integrity_requirement.setter
    def integrity_requirement(self, integrity_requirement):
        """Sets the integrity_requirement of this CommonModelsASMModelsApplicationModel.


        :param integrity_requirement: The integrity_requirement of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        allowed_values = ["NotDefined", "Low", "Medium", "High"]
        if (
            self._configuration.client_side_validation
            and integrity_requirement not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `integrity_requirement` ({}), must be one of {}".format(
                    integrity_requirement, allowed_values
                )
            )

        self._integrity_requirement = integrity_requirement

    @property
    def availability_requirement(self):
        # type: () -> str
        """Gets the availability_requirement of this CommonModelsASMModelsApplicationModel.


        :return: The availability_requirement of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._availability_requirement

    @availability_requirement.setter
    def availability_requirement(self, availability_requirement):
        """Sets the availability_requirement of this CommonModelsASMModelsApplicationModel.


        :param availability_requirement: The availability_requirement of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        allowed_values = ["NotDefined", "Low", "Medium", "High"]
        if (
            self._configuration.client_side_validation
            and availability_requirement not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `availability_requirement` ({}), must be one of {}".format(
                    availability_requirement, allowed_values
                )
            )

        self._availability_requirement = availability_requirement

    @property
    def tester(self):
        # type: () -> str
        """Gets the tester of this CommonModelsASMModelsApplicationModel.


        :return: The tester of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._tester

    @tester.setter
    def tester(self, tester):
        """Sets the tester of this CommonModelsASMModelsApplicationModel.


        :param tester: The tester of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._tester = tester

    @property
    def business_owner(self):
        # type: () -> str
        """Gets the business_owner of this CommonModelsASMModelsApplicationModel.


        :return: The business_owner of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._business_owner

    @business_owner.setter
    def business_owner(self, business_owner):
        """Sets the business_owner of this CommonModelsASMModelsApplicationModel.


        :param business_owner: The business_owner of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._business_owner = business_owner

    @property
    def development_contact(self):
        # type: () -> str
        """Gets the development_contact of this CommonModelsASMModelsApplicationModel.


        :return: The development_contact of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._development_contact

    @development_contact.setter
    def development_contact(self, development_contact):
        """Sets the development_contact of this CommonModelsASMModelsApplicationModel.


        :param development_contact: The development_contact of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._development_contact = development_contact

    @property
    def preferred_offering_type(self):
        # type: () -> str
        """Gets the preferred_offering_type of this CommonModelsASMModelsApplicationModel.


        :return: The preferred_offering_type of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._preferred_offering_type

    @preferred_offering_type.setter
    def preferred_offering_type(self, preferred_offering_type):
        """Sets the preferred_offering_type of this CommonModelsASMModelsApplicationModel.


        :param preferred_offering_type: The preferred_offering_type of this CommonModelsASMModelsApplicationModel.
        :type: str
        """
        allowed_values = ["None", "ScanExecution", "Applications"]
        if (
            self._configuration.client_side_validation
            and preferred_offering_type not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `preferred_offering_type` ({}), must be one of {}".format(
                    preferred_offering_type, allowed_values
                )
            )

        self._preferred_offering_type = preferred_offering_type

    @property
    def asset_group_name(self):
        # type: () -> str
        """Gets the asset_group_name of this CommonModelsASMModelsApplicationModel.


        :return: The asset_group_name of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._asset_group_name

    @asset_group_name.setter
    def asset_group_name(self, asset_group_name):
        """Sets the asset_group_name of this CommonModelsASMModelsApplicationModel.


        :param asset_group_name: The asset_group_name of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._asset_group_name = asset_group_name

    @property
    def date_created(self):
        # type: () -> datetime
        """Gets the date_created of this CommonModelsASMModelsApplicationModel.


        :return: The date_created of this CommonModelsASMModelsApplicationModel.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CommonModelsASMModelsApplicationModel.


        :param date_created: The date_created of this CommonModelsASMModelsApplicationModel.
        :type: datetime
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        # type: () -> datetime
        """Gets the last_updated of this CommonModelsASMModelsApplicationModel.


        :return: The last_updated of this CommonModelsASMModelsApplicationModel.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CommonModelsASMModelsApplicationModel.


        :param last_updated: The last_updated of this CommonModelsASMModelsApplicationModel.
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def last_comment(self):
        # type: () -> datetime
        """Gets the last_comment of this CommonModelsASMModelsApplicationModel.


        :return: The last_comment of this CommonModelsASMModelsApplicationModel.
        :rtype: datetime
        """
        return self._last_comment

    @last_comment.setter
    def last_comment(self, last_comment):
        """Sets the last_comment of this CommonModelsASMModelsApplicationModel.


        :param last_comment: The last_comment of this CommonModelsASMModelsApplicationModel.
        :type: datetime
        """

        self._last_comment = last_comment

    @property
    def created_by(self):
        # type: () -> str
        """Gets the created_by of this CommonModelsASMModelsApplicationModel.


        :return: The created_by of this CommonModelsASMModelsApplicationModel.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CommonModelsASMModelsApplicationModel.


        :param created_by: The created_by of this CommonModelsASMModelsApplicationModel.
        :type: str
        """

        self._created_by = created_by

    @property
    def new_issues(self):
        # type: () -> int
        """Gets the new_issues of this CommonModelsASMModelsApplicationModel.


        :return: The new_issues of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._new_issues

    @new_issues.setter
    def new_issues(self, new_issues):
        """Sets the new_issues of this CommonModelsASMModelsApplicationModel.


        :param new_issues: The new_issues of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._new_issues = new_issues

    @property
    def open_issues(self):
        # type: () -> int
        """Gets the open_issues of this CommonModelsASMModelsApplicationModel.


        :return: The open_issues of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._open_issues

    @open_issues.setter
    def open_issues(self, open_issues):
        """Sets the open_issues of this CommonModelsASMModelsApplicationModel.


        :param open_issues: The open_issues of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._open_issues = open_issues

    @property
    def total_issues(self):
        # type: () -> int
        """Gets the total_issues of this CommonModelsASMModelsApplicationModel.


        :return: The total_issues of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._total_issues

    @total_issues.setter
    def total_issues(self, total_issues):
        """Sets the total_issues of this CommonModelsASMModelsApplicationModel.


        :param total_issues: The total_issues of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._total_issues = total_issues

    @property
    def overall_compliance(self):
        # type: () -> bool
        """Gets the overall_compliance of this CommonModelsASMModelsApplicationModel.


        :return: The overall_compliance of this CommonModelsASMModelsApplicationModel.
        :rtype: bool
        """
        return self._overall_compliance

    @overall_compliance.setter
    def overall_compliance(self, overall_compliance):
        """Sets the overall_compliance of this CommonModelsASMModelsApplicationModel.


        :param overall_compliance: The overall_compliance of this CommonModelsASMModelsApplicationModel.
        :type: bool
        """

        self._overall_compliance = overall_compliance

    @property
    def compliance_statuses(self):
        # type: () -> list[CommonModelsASMModelsComplianceStatus]
        """Gets the compliance_statuses of this CommonModelsASMModelsApplicationModel.


        :return: The compliance_statuses of this CommonModelsASMModelsApplicationModel.
        :rtype: list[CommonModelsASMModelsComplianceStatus]
        """
        return self._compliance_statuses

    @compliance_statuses.setter
    def compliance_statuses(self, compliance_statuses):
        """Sets the compliance_statuses of this CommonModelsASMModelsApplicationModel.


        :param compliance_statuses: The compliance_statuses of this CommonModelsASMModelsApplicationModel.
        :type: list[CommonModelsASMModelsComplianceStatus]
        """

        self._compliance_statuses = compliance_statuses

    @property
    def can_be_deleted(self):
        # type: () -> bool
        """Gets the can_be_deleted of this CommonModelsASMModelsApplicationModel.


        :return: The can_be_deleted of this CommonModelsASMModelsApplicationModel.
        :rtype: bool
        """
        return self._can_be_deleted

    @can_be_deleted.setter
    def can_be_deleted(self, can_be_deleted):
        """Sets the can_be_deleted of this CommonModelsASMModelsApplicationModel.


        :param can_be_deleted: The can_be_deleted of this CommonModelsASMModelsApplicationModel.
        :type: bool
        """

        self._can_be_deleted = can_be_deleted

    @property
    def locked_to_subscription(self):
        # type: () -> bool
        """Gets the locked_to_subscription of this CommonModelsASMModelsApplicationModel.


        :return: The locked_to_subscription of this CommonModelsASMModelsApplicationModel.
        :rtype: bool
        """
        return self._locked_to_subscription

    @locked_to_subscription.setter
    def locked_to_subscription(self, locked_to_subscription):
        """Sets the locked_to_subscription of this CommonModelsASMModelsApplicationModel.


        :param locked_to_subscription: The locked_to_subscription of this CommonModelsASMModelsApplicationModel.
        :type: bool
        """

        self._locked_to_subscription = locked_to_subscription

    @property
    def total_scans(self):
        # type: () -> int
        """Gets the total_scans of this CommonModelsASMModelsApplicationModel.


        :return: The total_scans of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._total_scans

    @total_scans.setter
    def total_scans(self, total_scans):
        """Sets the total_scans of this CommonModelsASMModelsApplicationModel.


        :param total_scans: The total_scans of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._total_scans = total_scans

    @property
    def n_scan_executions(self):
        # type: () -> int
        """Gets the n_scan_executions of this CommonModelsASMModelsApplicationModel.


        :return: The n_scan_executions of this CommonModelsASMModelsApplicationModel.
        :rtype: int
        """
        return self._n_scan_executions

    @n_scan_executions.setter
    def n_scan_executions(self, n_scan_executions):
        """Sets the n_scan_executions of this CommonModelsASMModelsApplicationModel.


        :param n_scan_executions: The n_scan_executions of this CommonModelsASMModelsApplicationModel.
        :type: int
        """

        self._n_scan_executions = n_scan_executions

    @property
    def has_exceeding_issues_number(self):
        # type: () -> bool
        """Gets the has_exceeding_issues_number of this CommonModelsASMModelsApplicationModel.


        :return: The has_exceeding_issues_number of this CommonModelsASMModelsApplicationModel.
        :rtype: bool
        """
        return self._has_exceeding_issues_number

    @has_exceeding_issues_number.setter
    def has_exceeding_issues_number(self, has_exceeding_issues_number):
        """Sets the has_exceeding_issues_number of this CommonModelsASMModelsApplicationModel.


        :param has_exceeding_issues_number: The has_exceeding_issues_number of this CommonModelsASMModelsApplicationModel.
        :type: bool
        """

        self._has_exceeding_issues_number = has_exceeding_issues_number

    @property
    def has_exceeding_scans_number(self):
        # type: () -> bool
        """Gets the has_exceeding_scans_number of this CommonModelsASMModelsApplicationModel.


        :return: The has_exceeding_scans_number of this CommonModelsASMModelsApplicationModel.
        :rtype: bool
        """
        return self._has_exceeding_scans_number

    @has_exceeding_scans_number.setter
    def has_exceeding_scans_number(self, has_exceeding_scans_number):
        """Sets the has_exceeding_scans_number of this CommonModelsASMModelsApplicationModel.


        :param has_exceeding_scans_number: The has_exceeding_scans_number of this CommonModelsASMModelsApplicationModel.
        :type: bool
        """

        self._has_exceeding_scans_number = has_exceeding_scans_number

    @property
    def auto_delete_exceeded_scans(self):
        # type: () -> bool
        """Gets the auto_delete_exceeded_scans of this CommonModelsASMModelsApplicationModel.


        :return: The auto_delete_exceeded_scans of this CommonModelsASMModelsApplicationModel.
        :rtype: bool
        """
        return self._auto_delete_exceeded_scans

    @auto_delete_exceeded_scans.setter
    def auto_delete_exceeded_scans(self, auto_delete_exceeded_scans):
        """Sets the auto_delete_exceeded_scans of this CommonModelsASMModelsApplicationModel.


        :param auto_delete_exceeded_scans: The auto_delete_exceeded_scans of this CommonModelsASMModelsApplicationModel.
        :type: bool
        """

        self._auto_delete_exceeded_scans = auto_delete_exceeded_scans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommonModelsASMModelsApplicationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelsASMModelsApplicationModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommonModelsASMModelsApplicationModel):
            return True

        return self.to_dict() != other.to_dict()
