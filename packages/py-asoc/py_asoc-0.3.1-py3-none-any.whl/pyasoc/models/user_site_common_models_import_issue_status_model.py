"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class UserSiteCommonModelsImportIssueStatusModel:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"imported": "int", "updated": "int", "skipped": "int"}

    attribute_map = {"imported": "Imported", "updated": "Updated", "skipped": "Skipped"}

    def __init__(self, imported=None, updated=None, skipped=None, _configuration=None):
        """UserSiteCommonModelsImportIssueStatusModel - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._imported = None
        self._updated = None
        self._skipped = None
        self.discriminator = None

        if imported is not None:
            self.imported = imported
        if updated is not None:
            self.updated = updated
        if skipped is not None:
            self.skipped = skipped

    @property
    def imported(self):
        # type: () -> int
        """Gets the imported of this UserSiteCommonModelsImportIssueStatusModel.


        :return: The imported of this UserSiteCommonModelsImportIssueStatusModel.
        :rtype: int
        """
        return self._imported

    @imported.setter
    def imported(self, imported):
        """Sets the imported of this UserSiteCommonModelsImportIssueStatusModel.


        :param imported: The imported of this UserSiteCommonModelsImportIssueStatusModel.
        :type: int
        """

        self._imported = imported

    @property
    def updated(self):
        # type: () -> int
        """Gets the updated of this UserSiteCommonModelsImportIssueStatusModel.


        :return: The updated of this UserSiteCommonModelsImportIssueStatusModel.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this UserSiteCommonModelsImportIssueStatusModel.


        :param updated: The updated of this UserSiteCommonModelsImportIssueStatusModel.
        :type: int
        """

        self._updated = updated

    @property
    def skipped(self):
        # type: () -> int
        """Gets the skipped of this UserSiteCommonModelsImportIssueStatusModel.


        :return: The skipped of this UserSiteCommonModelsImportIssueStatusModel.
        :rtype: int
        """
        return self._skipped

    @skipped.setter
    def skipped(self, skipped):
        """Sets the skipped of this UserSiteCommonModelsImportIssueStatusModel.


        :param skipped: The skipped of this UserSiteCommonModelsImportIssueStatusModel.
        :type: int
        """

        self._skipped = skipped

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserSiteCommonModelsImportIssueStatusModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSiteCommonModelsImportIssueStatusModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSiteCommonModelsImportIssueStatusModel):
            return True

        return self.to_dict() != other.to_dict()
