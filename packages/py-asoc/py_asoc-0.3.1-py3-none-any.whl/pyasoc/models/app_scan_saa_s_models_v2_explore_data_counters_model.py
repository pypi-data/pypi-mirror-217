"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class AppScanSaaSModelsV2ExploreDataCountersModel:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "requests": "int",
        "failed_requests": "int",
        "parameters": "int",
        "cookies": "int",
        "headers": "int",
        "pages": "int",
    }

    attribute_map = {
        "requests": "Requests",
        "failed_requests": "FailedRequests",
        "parameters": "Parameters",
        "cookies": "Cookies",
        "headers": "Headers",
        "pages": "Pages",
    }

    def __init__(
        self,
        requests=None,
        failed_requests=None,
        parameters=None,
        cookies=None,
        headers=None,
        pages=None,
        _configuration=None,
    ):
        """AppScanSaaSModelsV2ExploreDataCountersModel - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._requests = None
        self._failed_requests = None
        self._parameters = None
        self._cookies = None
        self._headers = None
        self._pages = None
        self.discriminator = None

        if requests is not None:
            self.requests = requests
        if failed_requests is not None:
            self.failed_requests = failed_requests
        if parameters is not None:
            self.parameters = parameters
        if cookies is not None:
            self.cookies = cookies
        if headers is not None:
            self.headers = headers
        if pages is not None:
            self.pages = pages

    @property
    def requests(self):
        # type: () -> int
        """Gets the requests of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :return: The requests of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :rtype: int
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :param requests: The requests of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :type: int
        """

        self._requests = requests

    @property
    def failed_requests(self):
        # type: () -> int
        """Gets the failed_requests of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :return: The failed_requests of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :rtype: int
        """
        return self._failed_requests

    @failed_requests.setter
    def failed_requests(self, failed_requests):
        """Sets the failed_requests of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :param failed_requests: The failed_requests of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :type: int
        """

        self._failed_requests = failed_requests

    @property
    def parameters(self):
        # type: () -> int
        """Gets the parameters of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :return: The parameters of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :rtype: int
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :param parameters: The parameters of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :type: int
        """

        self._parameters = parameters

    @property
    def cookies(self):
        # type: () -> int
        """Gets the cookies of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :return: The cookies of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :rtype: int
        """
        return self._cookies

    @cookies.setter
    def cookies(self, cookies):
        """Sets the cookies of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :param cookies: The cookies of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :type: int
        """

        self._cookies = cookies

    @property
    def headers(self):
        # type: () -> int
        """Gets the headers of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :return: The headers of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :rtype: int
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :param headers: The headers of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :type: int
        """

        self._headers = headers

    @property
    def pages(self):
        # type: () -> int
        """Gets the pages of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :return: The pages of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this AppScanSaaSModelsV2ExploreDataCountersModel.


        :param pages: The pages of this AppScanSaaSModelsV2ExploreDataCountersModel.
        :type: int
        """

        self._pages = pages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AppScanSaaSModelsV2ExploreDataCountersModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppScanSaaSModelsV2ExploreDataCountersModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppScanSaaSModelsV2ExploreDataCountersModel):
            return True

        return self.to_dict() != other.to_dict()
