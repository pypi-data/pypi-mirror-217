"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class AppScanSaaSModelsV2Webhook:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "uri": "str",
        "presence": "UserSiteCommonModelsPresence",
        "asset_group": "UserSiteCommonModelsAssetGroupShortModel",
        "_global": "bool",
        "event": "str",
    }

    attribute_map = {
        "id": "Id",
        "uri": "Uri",
        "presence": "Presence",
        "asset_group": "AssetGroup",
        "_global": "Global",
        "event": "Event",
    }

    def __init__(
        self,
        id=None,
        uri=None,
        presence=None,
        asset_group=None,
        _global=None,
        event=None,
        _configuration=None,
    ):
        """AppScanSaaSModelsV2Webhook - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._uri = None
        self._presence = None
        self._asset_group = None
        self.__global = None
        self._event = None
        self.discriminator = None

        self.id = id
        self.uri = uri
        self.presence = presence
        if asset_group is not None:
            self.asset_group = asset_group
        self._global = _global
        self.event = event

    @property
    def id(self):
        # type: () -> str
        """Gets the id of this AppScanSaaSModelsV2Webhook.


        :return: The id of this AppScanSaaSModelsV2Webhook.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppScanSaaSModelsV2Webhook.


        :param id: The id of this AppScanSaaSModelsV2Webhook.
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def uri(self):
        # type: () -> str
        """Gets the uri of this AppScanSaaSModelsV2Webhook.


        :return: The uri of this AppScanSaaSModelsV2Webhook.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AppScanSaaSModelsV2Webhook.


        :param uri: The uri of this AppScanSaaSModelsV2Webhook.
        :type: str
        """
        if self._configuration.client_side_validation and uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def presence(self):
        # type: () -> UserSiteCommonModelsPresence
        """Gets the presence of this AppScanSaaSModelsV2Webhook.


        :return: The presence of this AppScanSaaSModelsV2Webhook.
        :rtype: UserSiteCommonModelsPresence
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this AppScanSaaSModelsV2Webhook.


        :param presence: The presence of this AppScanSaaSModelsV2Webhook.
        :type: UserSiteCommonModelsPresence
        """
        if self._configuration.client_side_validation and presence is None:
            raise ValueError("Invalid value for `presence`, must not be `None`")

        self._presence = presence

    @property
    def asset_group(self):
        # type: () -> UserSiteCommonModelsAssetGroupShortModel
        """Gets the asset_group of this AppScanSaaSModelsV2Webhook.


        :return: The asset_group of this AppScanSaaSModelsV2Webhook.
        :rtype: UserSiteCommonModelsAssetGroupShortModel
        """
        return self._asset_group

    @asset_group.setter
    def asset_group(self, asset_group):
        """Sets the asset_group of this AppScanSaaSModelsV2Webhook.


        :param asset_group: The asset_group of this AppScanSaaSModelsV2Webhook.
        :type: UserSiteCommonModelsAssetGroupShortModel
        """

        self._asset_group = asset_group

    @property
    def _global(self):
        # type: () -> bool
        """Gets the _global of this AppScanSaaSModelsV2Webhook.


        :return: The _global of this AppScanSaaSModelsV2Webhook.
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this AppScanSaaSModelsV2Webhook.


        :param _global: The _global of this AppScanSaaSModelsV2Webhook.
        :type: bool
        """
        if self._configuration.client_side_validation and _global is None:
            raise ValueError("Invalid value for `_global`, must not be `None`")

        self.__global = _global

    @property
    def event(self):
        # type: () -> str
        """Gets the event of this AppScanSaaSModelsV2Webhook.


        :return: The event of this AppScanSaaSModelsV2Webhook.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AppScanSaaSModelsV2Webhook.


        :param event: The event of this AppScanSaaSModelsV2Webhook.
        :type: str
        """
        if self._configuration.client_side_validation and event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")
        allowed_values = ["ScanExecutionCompleted", "ApplicationUpdated"]
        if self._configuration.client_side_validation and event not in allowed_values:
            raise ValueError(
                f"Invalid value for `event` ({event}), must be one of {allowed_values}"
            )

        self._event = event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AppScanSaaSModelsV2Webhook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppScanSaaSModelsV2Webhook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppScanSaaSModelsV2Webhook):
            return True

        return self.to_dict() != other.to_dict()
