"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class CommonModelsSCXAccountSCXSubscription:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "license_key_postfix": "str",
        "subscription_id": "int",
        "overage_support": "bool",
        "expiration_date": "datetime",
        "renewal_date": "datetime",
        "purchase_date": "datetime",
        "offering_type": "str",
        "n_seats": "int",
        "n_taken_seats": "int",
        "n_executions": "int",
        "n_apps": "int",
        "full_report": "bool",
        "max_concurrent_scans": "int",
        "purchase_supplier": "str",
        "state": "str",
        "include_open_source": "bool",
        "include_iast": "bool",
        "max_iast_concurrency": "int",
        "is3_pm_order": "bool",
    }

    attribute_map = {
        "license_key_postfix": "LicenseKeyPostfix",
        "subscription_id": "SubscriptionId",
        "overage_support": "OverageSupport",
        "expiration_date": "ExpirationDate",
        "renewal_date": "RenewalDate",
        "purchase_date": "PurchaseDate",
        "offering_type": "OfferingType",
        "n_seats": "NSeats",
        "n_taken_seats": "NTakenSeats",
        "n_executions": "NExecutions",
        "n_apps": "NApps",
        "full_report": "FullReport",
        "max_concurrent_scans": "MaxConcurrentScans",
        "purchase_supplier": "PurchaseSupplier",
        "state": "State",
        "include_open_source": "IncludeOpenSource",
        "include_iast": "IncludeIAST",
        "max_iast_concurrency": "MaxIASTConcurrency",
        "is3_pm_order": "Is3PMOrder",
    }

    def __init__(
        self,
        license_key_postfix=None,
        subscription_id=None,
        overage_support=None,
        expiration_date=None,
        renewal_date=None,
        purchase_date=None,
        offering_type=None,
        n_seats=None,
        n_taken_seats=None,
        n_executions=None,
        n_apps=None,
        full_report=None,
        max_concurrent_scans=None,
        purchase_supplier=None,
        state=None,
        include_open_source=None,
        include_iast=None,
        max_iast_concurrency=None,
        is3_pm_order=None,
        _configuration=None,
    ):
        """CommonModelsSCXAccountSCXSubscription - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._license_key_postfix = None
        self._subscription_id = None
        self._overage_support = None
        self._expiration_date = None
        self._renewal_date = None
        self._purchase_date = None
        self._offering_type = None
        self._n_seats = None
        self._n_taken_seats = None
        self._n_executions = None
        self._n_apps = None
        self._full_report = None
        self._max_concurrent_scans = None
        self._purchase_supplier = None
        self._state = None
        self._include_open_source = None
        self._include_iast = None
        self._max_iast_concurrency = None
        self._is3_pm_order = None
        self.discriminator = None

        if license_key_postfix is not None:
            self.license_key_postfix = license_key_postfix
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if overage_support is not None:
            self.overage_support = overage_support
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if renewal_date is not None:
            self.renewal_date = renewal_date
        if purchase_date is not None:
            self.purchase_date = purchase_date
        if offering_type is not None:
            self.offering_type = offering_type
        if n_seats is not None:
            self.n_seats = n_seats
        if n_taken_seats is not None:
            self.n_taken_seats = n_taken_seats
        if n_executions is not None:
            self.n_executions = n_executions
        if n_apps is not None:
            self.n_apps = n_apps
        if full_report is not None:
            self.full_report = full_report
        if max_concurrent_scans is not None:
            self.max_concurrent_scans = max_concurrent_scans
        if purchase_supplier is not None:
            self.purchase_supplier = purchase_supplier
        if state is not None:
            self.state = state
        if include_open_source is not None:
            self.include_open_source = include_open_source
        if include_iast is not None:
            self.include_iast = include_iast
        if max_iast_concurrency is not None:
            self.max_iast_concurrency = max_iast_concurrency
        if is3_pm_order is not None:
            self.is3_pm_order = is3_pm_order

    @property
    def license_key_postfix(self):
        # type: () -> str
        """Gets the license_key_postfix of this CommonModelsSCXAccountSCXSubscription.


        :return: The license_key_postfix of this CommonModelsSCXAccountSCXSubscription.
        :rtype: str
        """
        return self._license_key_postfix

    @license_key_postfix.setter
    def license_key_postfix(self, license_key_postfix):
        """Sets the license_key_postfix of this CommonModelsSCXAccountSCXSubscription.


        :param license_key_postfix: The license_key_postfix of this CommonModelsSCXAccountSCXSubscription.
        :type: str
        """

        self._license_key_postfix = license_key_postfix

    @property
    def subscription_id(self):
        # type: () -> int
        """Gets the subscription_id of this CommonModelsSCXAccountSCXSubscription.


        :return: The subscription_id of this CommonModelsSCXAccountSCXSubscription.
        :rtype: int
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this CommonModelsSCXAccountSCXSubscription.


        :param subscription_id: The subscription_id of this CommonModelsSCXAccountSCXSubscription.
        :type: int
        """

        self._subscription_id = subscription_id

    @property
    def overage_support(self):
        # type: () -> bool
        """Gets the overage_support of this CommonModelsSCXAccountSCXSubscription.


        :return: The overage_support of this CommonModelsSCXAccountSCXSubscription.
        :rtype: bool
        """
        return self._overage_support

    @overage_support.setter
    def overage_support(self, overage_support):
        """Sets the overage_support of this CommonModelsSCXAccountSCXSubscription.


        :param overage_support: The overage_support of this CommonModelsSCXAccountSCXSubscription.
        :type: bool
        """

        self._overage_support = overage_support

    @property
    def expiration_date(self):
        # type: () -> datetime
        """Gets the expiration_date of this CommonModelsSCXAccountSCXSubscription.


        :return: The expiration_date of this CommonModelsSCXAccountSCXSubscription.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CommonModelsSCXAccountSCXSubscription.


        :param expiration_date: The expiration_date of this CommonModelsSCXAccountSCXSubscription.
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def renewal_date(self):
        # type: () -> datetime
        """Gets the renewal_date of this CommonModelsSCXAccountSCXSubscription.


        :return: The renewal_date of this CommonModelsSCXAccountSCXSubscription.
        :rtype: datetime
        """
        return self._renewal_date

    @renewal_date.setter
    def renewal_date(self, renewal_date):
        """Sets the renewal_date of this CommonModelsSCXAccountSCXSubscription.


        :param renewal_date: The renewal_date of this CommonModelsSCXAccountSCXSubscription.
        :type: datetime
        """

        self._renewal_date = renewal_date

    @property
    def purchase_date(self):
        # type: () -> datetime
        """Gets the purchase_date of this CommonModelsSCXAccountSCXSubscription.


        :return: The purchase_date of this CommonModelsSCXAccountSCXSubscription.
        :rtype: datetime
        """
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, purchase_date):
        """Sets the purchase_date of this CommonModelsSCXAccountSCXSubscription.


        :param purchase_date: The purchase_date of this CommonModelsSCXAccountSCXSubscription.
        :type: datetime
        """

        self._purchase_date = purchase_date

    @property
    def offering_type(self):
        # type: () -> str
        """Gets the offering_type of this CommonModelsSCXAccountSCXSubscription.


        :return: The offering_type of this CommonModelsSCXAccountSCXSubscription.
        :rtype: str
        """
        return self._offering_type

    @offering_type.setter
    def offering_type(self, offering_type):
        """Sets the offering_type of this CommonModelsSCXAccountSCXSubscription.


        :param offering_type: The offering_type of this CommonModelsSCXAccountSCXSubscription.
        :type: str
        """
        allowed_values = [
            "None",
            "Trial",
            "HTrial",
            "Applications",
            "ScanExecution",
            "AnalyzerConcurrent",
            "ConsultantServices",
            "Premium",
            "OpenSourcePerApplication",
            "OpenSourcePremium",
            "OpenSourceConcurrent",
            "IASTConcurrent",
            "IASTPayPerApp",
            "Promotional",
            "Silver",
            "Gold",
            "Platinum",
            "SCAPerApplication",
        ]
        if self._configuration.client_side_validation and offering_type not in allowed_values:
            raise ValueError(
                "Invalid value for `offering_type` ({}), must be one of {}".format(
                    offering_type, allowed_values
                )
            )

        self._offering_type = offering_type

    @property
    def n_seats(self):
        # type: () -> int
        """Gets the n_seats of this CommonModelsSCXAccountSCXSubscription.


        :return: The n_seats of this CommonModelsSCXAccountSCXSubscription.
        :rtype: int
        """
        return self._n_seats

    @n_seats.setter
    def n_seats(self, n_seats):
        """Sets the n_seats of this CommonModelsSCXAccountSCXSubscription.


        :param n_seats: The n_seats of this CommonModelsSCXAccountSCXSubscription.
        :type: int
        """

        self._n_seats = n_seats

    @property
    def n_taken_seats(self):
        # type: () -> int
        """Gets the n_taken_seats of this CommonModelsSCXAccountSCXSubscription.


        :return: The n_taken_seats of this CommonModelsSCXAccountSCXSubscription.
        :rtype: int
        """
        return self._n_taken_seats

    @n_taken_seats.setter
    def n_taken_seats(self, n_taken_seats):
        """Sets the n_taken_seats of this CommonModelsSCXAccountSCXSubscription.


        :param n_taken_seats: The n_taken_seats of this CommonModelsSCXAccountSCXSubscription.
        :type: int
        """

        self._n_taken_seats = n_taken_seats

    @property
    def n_executions(self):
        # type: () -> int
        """Gets the n_executions of this CommonModelsSCXAccountSCXSubscription.


        :return: The n_executions of this CommonModelsSCXAccountSCXSubscription.
        :rtype: int
        """
        return self._n_executions

    @n_executions.setter
    def n_executions(self, n_executions):
        """Sets the n_executions of this CommonModelsSCXAccountSCXSubscription.


        :param n_executions: The n_executions of this CommonModelsSCXAccountSCXSubscription.
        :type: int
        """

        self._n_executions = n_executions

    @property
    def n_apps(self):
        # type: () -> int
        """Gets the n_apps of this CommonModelsSCXAccountSCXSubscription.


        :return: The n_apps of this CommonModelsSCXAccountSCXSubscription.
        :rtype: int
        """
        return self._n_apps

    @n_apps.setter
    def n_apps(self, n_apps):
        """Sets the n_apps of this CommonModelsSCXAccountSCXSubscription.


        :param n_apps: The n_apps of this CommonModelsSCXAccountSCXSubscription.
        :type: int
        """

        self._n_apps = n_apps

    @property
    def full_report(self):
        # type: () -> bool
        """Gets the full_report of this CommonModelsSCXAccountSCXSubscription.


        :return: The full_report of this CommonModelsSCXAccountSCXSubscription.
        :rtype: bool
        """
        return self._full_report

    @full_report.setter
    def full_report(self, full_report):
        """Sets the full_report of this CommonModelsSCXAccountSCXSubscription.


        :param full_report: The full_report of this CommonModelsSCXAccountSCXSubscription.
        :type: bool
        """

        self._full_report = full_report

    @property
    def max_concurrent_scans(self):
        # type: () -> int
        """Gets the max_concurrent_scans of this CommonModelsSCXAccountSCXSubscription.


        :return: The max_concurrent_scans of this CommonModelsSCXAccountSCXSubscription.
        :rtype: int
        """
        return self._max_concurrent_scans

    @max_concurrent_scans.setter
    def max_concurrent_scans(self, max_concurrent_scans):
        """Sets the max_concurrent_scans of this CommonModelsSCXAccountSCXSubscription.


        :param max_concurrent_scans: The max_concurrent_scans of this CommonModelsSCXAccountSCXSubscription.
        :type: int
        """

        self._max_concurrent_scans = max_concurrent_scans

    @property
    def purchase_supplier(self):
        # type: () -> str
        """Gets the purchase_supplier of this CommonModelsSCXAccountSCXSubscription.


        :return: The purchase_supplier of this CommonModelsSCXAccountSCXSubscription.
        :rtype: str
        """
        return self._purchase_supplier

    @purchase_supplier.setter
    def purchase_supplier(self, purchase_supplier):
        """Sets the purchase_supplier of this CommonModelsSCXAccountSCXSubscription.


        :param purchase_supplier: The purchase_supplier of this CommonModelsSCXAccountSCXSubscription.
        :type: str
        """

        self._purchase_supplier = purchase_supplier

    @property
    def state(self):
        # type: () -> str
        """Gets the state of this CommonModelsSCXAccountSCXSubscription.


        :return: The state of this CommonModelsSCXAccountSCXSubscription.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CommonModelsSCXAccountSCXSubscription.


        :param state: The state of this CommonModelsSCXAccountSCXSubscription.
        :type: str
        """

        self._state = state

    @property
    def include_open_source(self):
        # type: () -> bool
        """Gets the include_open_source of this CommonModelsSCXAccountSCXSubscription.


        :return: The include_open_source of this CommonModelsSCXAccountSCXSubscription.
        :rtype: bool
        """
        return self._include_open_source

    @include_open_source.setter
    def include_open_source(self, include_open_source):
        """Sets the include_open_source of this CommonModelsSCXAccountSCXSubscription.


        :param include_open_source: The include_open_source of this CommonModelsSCXAccountSCXSubscription.
        :type: bool
        """

        self._include_open_source = include_open_source

    @property
    def include_iast(self):
        # type: () -> bool
        """Gets the include_iast of this CommonModelsSCXAccountSCXSubscription.


        :return: The include_iast of this CommonModelsSCXAccountSCXSubscription.
        :rtype: bool
        """
        return self._include_iast

    @include_iast.setter
    def include_iast(self, include_iast):
        """Sets the include_iast of this CommonModelsSCXAccountSCXSubscription.


        :param include_iast: The include_iast of this CommonModelsSCXAccountSCXSubscription.
        :type: bool
        """

        self._include_iast = include_iast

    @property
    def max_iast_concurrency(self):
        # type: () -> int
        """Gets the max_iast_concurrency of this CommonModelsSCXAccountSCXSubscription.


        :return: The max_iast_concurrency of this CommonModelsSCXAccountSCXSubscription.
        :rtype: int
        """
        return self._max_iast_concurrency

    @max_iast_concurrency.setter
    def max_iast_concurrency(self, max_iast_concurrency):
        """Sets the max_iast_concurrency of this CommonModelsSCXAccountSCXSubscription.


        :param max_iast_concurrency: The max_iast_concurrency of this CommonModelsSCXAccountSCXSubscription.
        :type: int
        """

        self._max_iast_concurrency = max_iast_concurrency

    @property
    def is3_pm_order(self):
        # type: () -> bool
        """Gets the is3_pm_order of this CommonModelsSCXAccountSCXSubscription.


        :return: The is3_pm_order of this CommonModelsSCXAccountSCXSubscription.
        :rtype: bool
        """
        return self._is3_pm_order

    @is3_pm_order.setter
    def is3_pm_order(self, is3_pm_order):
        """Sets the is3_pm_order of this CommonModelsSCXAccountSCXSubscription.


        :param is3_pm_order: The is3_pm_order of this CommonModelsSCXAccountSCXSubscription.
        :type: bool
        """

        self._is3_pm_order = is3_pm_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommonModelsSCXAccountSCXSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonModelsSCXAccountSCXSubscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommonModelsSCXAccountSCXSubscription):
            return True

        return self.to_dict() != other.to_dict()
