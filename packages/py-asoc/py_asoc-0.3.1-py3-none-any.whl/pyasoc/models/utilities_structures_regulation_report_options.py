"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class UtilitiesStructuresRegulationReportOptions:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "regulation_report_type": "str",
        "report_file_type": "str",
        "title": "str",
        "notes": "str",
        "locale": "str",
    }

    attribute_map = {
        "regulation_report_type": "RegulationReportType",
        "report_file_type": "ReportFileType",
        "title": "Title",
        "notes": "Notes",
        "locale": "Locale",
    }

    def __init__(
        self,
        regulation_report_type=None,
        report_file_type=None,
        title=None,
        notes=None,
        locale=None,
        _configuration=None,
    ):
        """UtilitiesStructuresRegulationReportOptions - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._regulation_report_type = None
        self._report_file_type = None
        self._title = None
        self._notes = None
        self._locale = None
        self.discriminator = None

        self.regulation_report_type = regulation_report_type
        if report_file_type is not None:
            self.report_file_type = report_file_type
        if title is not None:
            self.title = title
        if notes is not None:
            self.notes = notes
        if locale is not None:
            self.locale = locale

    @property
    def regulation_report_type(self):
        # type: () -> str
        """Gets the regulation_report_type of this UtilitiesStructuresRegulationReportOptions.


        :return: The regulation_report_type of this UtilitiesStructuresRegulationReportOptions.
        :rtype: str
        """
        return self._regulation_report_type

    @regulation_report_type.setter
    def regulation_report_type(self, regulation_report_type):
        """Sets the regulation_report_type of this UtilitiesStructuresRegulationReportOptions.


        :param regulation_report_type: The regulation_report_type of this UtilitiesStructuresRegulationReportOptions.
        :type: str
        """
        if self._configuration.client_side_validation and regulation_report_type is None:
            raise ValueError("Invalid value for `regulation_report_type`, must not be `None`")
        allowed_values = [
            "None",
            "OwaspTop10_2017",
            "Sans25",
            "EuGdpr_2016",
            "PCI",
            "Hipaa",
            "OwaspTop10Mobile_2016",
            "ISO27001",
            "ISO27002",
            "Wasc",
            "Nist",
            "Sox",
            "Fisma",
            "Fippa",
            "Efta",
            "DisaStig",
            "Padss",
            "OwaspTop10_2021",
            "OwaspTop10OpenApi_2019",
            "Ccpa",
        ]
        if (
            self._configuration.client_side_validation
            and regulation_report_type not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `regulation_report_type` ({}), must be one of {}".format(
                    regulation_report_type, allowed_values
                )
            )

        self._regulation_report_type = regulation_report_type

    @property
    def report_file_type(self):
        # type: () -> str
        """Gets the report_file_type of this UtilitiesStructuresRegulationReportOptions.


        :return: The report_file_type of this UtilitiesStructuresRegulationReportOptions.
        :rtype: str
        """
        return self._report_file_type

    @report_file_type.setter
    def report_file_type(self, report_file_type):
        """Sets the report_file_type of this UtilitiesStructuresRegulationReportOptions.


        :param report_file_type: The report_file_type of this UtilitiesStructuresRegulationReportOptions.
        :type: str
        """
        allowed_values = ["Pdf", "Html", "Xml", "Csv", "Sarif"]
        if self._configuration.client_side_validation and report_file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `report_file_type` ({}), must be one of {}".format(
                    report_file_type, allowed_values
                )
            )

        self._report_file_type = report_file_type

    @property
    def title(self):
        # type: () -> str
        """Gets the title of this UtilitiesStructuresRegulationReportOptions.


        :return: The title of this UtilitiesStructuresRegulationReportOptions.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UtilitiesStructuresRegulationReportOptions.


        :param title: The title of this UtilitiesStructuresRegulationReportOptions.
        :type: str
        """

        self._title = title

    @property
    def notes(self):
        # type: () -> str
        """Gets the notes of this UtilitiesStructuresRegulationReportOptions.


        :return: The notes of this UtilitiesStructuresRegulationReportOptions.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UtilitiesStructuresRegulationReportOptions.


        :param notes: The notes of this UtilitiesStructuresRegulationReportOptions.
        :type: str
        """

        self._notes = notes

    @property
    def locale(self):
        # type: () -> str
        """Gets the locale of this UtilitiesStructuresRegulationReportOptions.


        :return: The locale of this UtilitiesStructuresRegulationReportOptions.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UtilitiesStructuresRegulationReportOptions.


        :param locale: The locale of this UtilitiesStructuresRegulationReportOptions.
        :type: str
        """

        self._locale = locale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UtilitiesStructuresRegulationReportOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UtilitiesStructuresRegulationReportOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UtilitiesStructuresRegulationReportOptions):
            return True

        return self.to_dict() != other.to_dict()
