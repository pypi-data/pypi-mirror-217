"""
    HCL AppScan on Cloud (v2)

    This API allows you to interact with the service. The API allows you to perform many of the operations available in the UI and more.</br>For authentication, use the relevant APIs in the Account section. A successful authentication response includes a bearer token for use in subsequent API calls. Pasting this token in the 'Access token' field above will automatically add the authorization header to any API call that requires a valid session.

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

from pyasoc.configuration import Configuration


class UtilitiesStructuresTenantInfoModel:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "tenant_name": "str",
        "contact_email": "str",
        "subscription_technologies": "str",
        "auto_delete_exceeded_scans_per_app": "bool",
        "allow_app_manager_override_auto_delete_settings": "bool",
    }

    attribute_map = {
        "tenant_name": "TenantName",
        "contact_email": "ContactEmail",
        "subscription_technologies": "SubscriptionTechnologies",
        "auto_delete_exceeded_scans_per_app": "AutoDeleteExceededScansPerApp",
        "allow_app_manager_override_auto_delete_settings": "AllowAppManagerOverrideAutoDeleteSettings",
    }

    def __init__(
        self,
        tenant_name=None,
        contact_email=None,
        subscription_technologies=None,
        auto_delete_exceeded_scans_per_app=None,
        allow_app_manager_override_auto_delete_settings=None,
        _configuration=None,
    ):
        """UtilitiesStructuresTenantInfoModel - a model defined in Swagger"""
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._tenant_name = None
        self._contact_email = None
        self._subscription_technologies = None
        self._auto_delete_exceeded_scans_per_app = None
        self._allow_app_manager_override_auto_delete_settings = None
        self.discriminator = None

        if tenant_name is not None:
            self.tenant_name = tenant_name
        if contact_email is not None:
            self.contact_email = contact_email
        if subscription_technologies is not None:
            self.subscription_technologies = subscription_technologies
        if auto_delete_exceeded_scans_per_app is not None:
            self.auto_delete_exceeded_scans_per_app = auto_delete_exceeded_scans_per_app
        if allow_app_manager_override_auto_delete_settings is not None:
            self.allow_app_manager_override_auto_delete_settings = (
                allow_app_manager_override_auto_delete_settings
            )

    @property
    def tenant_name(self):
        # type: () -> str
        """Gets the tenant_name of this UtilitiesStructuresTenantInfoModel.


        :return: The tenant_name of this UtilitiesStructuresTenantInfoModel.
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this UtilitiesStructuresTenantInfoModel.


        :param tenant_name: The tenant_name of this UtilitiesStructuresTenantInfoModel.
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def contact_email(self):
        # type: () -> str
        """Gets the contact_email of this UtilitiesStructuresTenantInfoModel.


        :return: The contact_email of this UtilitiesStructuresTenantInfoModel.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this UtilitiesStructuresTenantInfoModel.


        :param contact_email: The contact_email of this UtilitiesStructuresTenantInfoModel.
        :type: str
        """

        self._contact_email = contact_email

    @property
    def subscription_technologies(self):
        # type: () -> str
        """Gets the subscription_technologies of this UtilitiesStructuresTenantInfoModel.


        :return: The subscription_technologies of this UtilitiesStructuresTenantInfoModel.
        :rtype: str
        """
        return self._subscription_technologies

    @subscription_technologies.setter
    def subscription_technologies(self, subscription_technologies):
        """Sets the subscription_technologies of this UtilitiesStructuresTenantInfoModel.


        :param subscription_technologies: The subscription_technologies of this UtilitiesStructuresTenantInfoModel.
        :type: str
        """
        allowed_values = [
            "DynamicAnalyzer",
            "StaticAnalyzer",
            "IASTAnalyzer",
            "SCAAnalyzer",
        ]
        if (
            self._configuration.client_side_validation
            and subscription_technologies not in allowed_values
        ):
            raise ValueError(
                "Invalid value for `subscription_technologies` ({}), must be one of {}".format(
                    subscription_technologies, allowed_values
                )
            )

        self._subscription_technologies = subscription_technologies

    @property
    def auto_delete_exceeded_scans_per_app(self):
        # type: () -> bool
        """Gets the auto_delete_exceeded_scans_per_app of this UtilitiesStructuresTenantInfoModel.


        :return: The auto_delete_exceeded_scans_per_app of this UtilitiesStructuresTenantInfoModel.
        :rtype: bool
        """
        return self._auto_delete_exceeded_scans_per_app

    @auto_delete_exceeded_scans_per_app.setter
    def auto_delete_exceeded_scans_per_app(self, auto_delete_exceeded_scans_per_app):
        """Sets the auto_delete_exceeded_scans_per_app of this UtilitiesStructuresTenantInfoModel.


        :param auto_delete_exceeded_scans_per_app: The auto_delete_exceeded_scans_per_app of this UtilitiesStructuresTenantInfoModel.
        :type: bool
        """

        self._auto_delete_exceeded_scans_per_app = auto_delete_exceeded_scans_per_app

    @property
    def allow_app_manager_override_auto_delete_settings(self):
        # type: () -> bool
        """Gets the allow_app_manager_override_auto_delete_settings of this UtilitiesStructuresTenantInfoModel.


        :return: The allow_app_manager_override_auto_delete_settings of this UtilitiesStructuresTenantInfoModel.
        :rtype: bool
        """
        return self._allow_app_manager_override_auto_delete_settings

    @allow_app_manager_override_auto_delete_settings.setter
    def allow_app_manager_override_auto_delete_settings(
        self, allow_app_manager_override_auto_delete_settings
    ):
        """Sets the allow_app_manager_override_auto_delete_settings of this UtilitiesStructuresTenantInfoModel.


        :param allow_app_manager_override_auto_delete_settings: The allow_app_manager_override_auto_delete_settings of this UtilitiesStructuresTenantInfoModel.
        :type: bool
        """

        self._allow_app_manager_override_auto_delete_settings = (
            allow_app_manager_override_auto_delete_settings
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UtilitiesStructuresTenantInfoModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UtilitiesStructuresTenantInfoModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UtilitiesStructuresTenantInfoModel):
            return True

        return self.to_dict() != other.to_dict()
