# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import AuthenticationTest_pb2 as AuthenticationTest__pb2


class AuthenticationTestStub(object):
    """Contains commands that requires authentication. A client should be able to obtain an authorization Token through the Login command of the Authentication Service feature using the following credentials: username: 'test', password: 'test'"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequiresToken = channel.unary_unary(
            "/sila2.org.silastandard.test.authenticationtest.v1.AuthenticationTest/RequiresToken",
            request_serializer=AuthenticationTest__pb2.RequiresToken_Parameters.SerializeToString,
            response_deserializer=AuthenticationTest__pb2.RequiresToken_Responses.FromString,
        )
        self.RequiresTokenForBinaryUpload = channel.unary_unary(
            "/sila2.org.silastandard.test.authenticationtest.v1.AuthenticationTest/RequiresTokenForBinaryUpload",
            request_serializer=AuthenticationTest__pb2.RequiresTokenForBinaryUpload_Parameters.SerializeToString,
            response_deserializer=AuthenticationTest__pb2.RequiresTokenForBinaryUpload_Responses.FromString,
        )


class AuthenticationTestServicer(object):
    """Contains commands that requires authentication. A client should be able to obtain an authorization Token through the Login command of the Authentication Service feature using the following credentials: username: 'test', password: 'test'"""

    def RequiresToken(self, request, context):
        """Requires an authorization token in order to be executed"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RequiresTokenForBinaryUpload(self, request, context):
        """Requires an authorization token in order to be executed and to upload a binary parameter"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AuthenticationTestServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "RequiresToken": grpc.unary_unary_rpc_method_handler(
            servicer.RequiresToken,
            request_deserializer=AuthenticationTest__pb2.RequiresToken_Parameters.FromString,
            response_serializer=AuthenticationTest__pb2.RequiresToken_Responses.SerializeToString,
        ),
        "RequiresTokenForBinaryUpload": grpc.unary_unary_rpc_method_handler(
            servicer.RequiresTokenForBinaryUpload,
            request_deserializer=AuthenticationTest__pb2.RequiresTokenForBinaryUpload_Parameters.FromString,
            response_serializer=AuthenticationTest__pb2.RequiresTokenForBinaryUpload_Responses.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "sila2.org.silastandard.test.authenticationtest.v1.AuthenticationTest", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AuthenticationTest(object):
    """Contains commands that requires authentication. A client should be able to obtain an authorization Token through the Login command of the Authentication Service feature using the following credentials: username: 'test', password: 'test'"""

    @staticmethod
    def RequiresToken(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/sila2.org.silastandard.test.authenticationtest.v1.AuthenticationTest/RequiresToken",
            AuthenticationTest__pb2.RequiresToken_Parameters.SerializeToString,
            AuthenticationTest__pb2.RequiresToken_Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RequiresTokenForBinaryUpload(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/sila2.org.silastandard.test.authenticationtest.v1.AuthenticationTest/RequiresTokenForBinaryUpload",
            AuthenticationTest__pb2.RequiresTokenForBinaryUpload_Parameters.SerializeToString,
            AuthenticationTest__pb2.RequiresTokenForBinaryUpload_Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
