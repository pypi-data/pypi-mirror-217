# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import UnobservableCommandTest_pb2 as UnobservableCommandTest__pb2


class UnobservableCommandTestStub(object):
    """Feature for testing unobservable commands"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CommandWithoutParametersAndResponses = channel.unary_unary(
            "/sila2.org.silastandard.test.unobservablecommandtest.v1.UnobservableCommandTest/CommandWithoutParametersAndResponses",
            request_serializer=UnobservableCommandTest__pb2.CommandWithoutParametersAndResponses_Parameters.SerializeToString,
            response_deserializer=UnobservableCommandTest__pb2.CommandWithoutParametersAndResponses_Responses.FromString,
        )
        self.ConvertIntegerToString = channel.unary_unary(
            "/sila2.org.silastandard.test.unobservablecommandtest.v1.UnobservableCommandTest/ConvertIntegerToString",
            request_serializer=UnobservableCommandTest__pb2.ConvertIntegerToString_Parameters.SerializeToString,
            response_deserializer=UnobservableCommandTest__pb2.ConvertIntegerToString_Responses.FromString,
        )
        self.JoinIntegerAndString = channel.unary_unary(
            "/sila2.org.silastandard.test.unobservablecommandtest.v1.UnobservableCommandTest/JoinIntegerAndString",
            request_serializer=UnobservableCommandTest__pb2.JoinIntegerAndString_Parameters.SerializeToString,
            response_deserializer=UnobservableCommandTest__pb2.JoinIntegerAndString_Responses.FromString,
        )
        self.SplitStringAfterFirstCharacter = channel.unary_unary(
            "/sila2.org.silastandard.test.unobservablecommandtest.v1.UnobservableCommandTest/SplitStringAfterFirstCharacter",
            request_serializer=UnobservableCommandTest__pb2.SplitStringAfterFirstCharacter_Parameters.SerializeToString,
            response_deserializer=UnobservableCommandTest__pb2.SplitStringAfterFirstCharacter_Responses.FromString,
        )


class UnobservableCommandTestServicer(object):
    """Feature for testing unobservable commands"""

    def CommandWithoutParametersAndResponses(self, request, context):
        """A command that takes no parameters and returns no responses"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ConvertIntegerToString(self, request, context):
        """A command that takes one integer parameter and returns its string representation."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def JoinIntegerAndString(self, request, context):
        """A command which takes an integer and a string parameter and returns a string with both joined (e.g. "123abc")"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SplitStringAfterFirstCharacter(self, request, context):
        """A command which splits a given string after its first character. Returns empty parts if the input was too short."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_UnobservableCommandTestServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CommandWithoutParametersAndResponses": grpc.unary_unary_rpc_method_handler(
            servicer.CommandWithoutParametersAndResponses,
            request_deserializer=UnobservableCommandTest__pb2.CommandWithoutParametersAndResponses_Parameters.FromString,
            response_serializer=UnobservableCommandTest__pb2.CommandWithoutParametersAndResponses_Responses.SerializeToString,
        ),
        "ConvertIntegerToString": grpc.unary_unary_rpc_method_handler(
            servicer.ConvertIntegerToString,
            request_deserializer=UnobservableCommandTest__pb2.ConvertIntegerToString_Parameters.FromString,
            response_serializer=UnobservableCommandTest__pb2.ConvertIntegerToString_Responses.SerializeToString,
        ),
        "JoinIntegerAndString": grpc.unary_unary_rpc_method_handler(
            servicer.JoinIntegerAndString,
            request_deserializer=UnobservableCommandTest__pb2.JoinIntegerAndString_Parameters.FromString,
            response_serializer=UnobservableCommandTest__pb2.JoinIntegerAndString_Responses.SerializeToString,
        ),
        "SplitStringAfterFirstCharacter": grpc.unary_unary_rpc_method_handler(
            servicer.SplitStringAfterFirstCharacter,
            request_deserializer=UnobservableCommandTest__pb2.SplitStringAfterFirstCharacter_Parameters.FromString,
            response_serializer=UnobservableCommandTest__pb2.SplitStringAfterFirstCharacter_Responses.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "sila2.org.silastandard.test.unobservablecommandtest.v1.UnobservableCommandTest", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class UnobservableCommandTest(object):
    """Feature for testing unobservable commands"""

    @staticmethod
    def CommandWithoutParametersAndResponses(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/sila2.org.silastandard.test.unobservablecommandtest.v1.UnobservableCommandTest/CommandWithoutParametersAndResponses",
            UnobservableCommandTest__pb2.CommandWithoutParametersAndResponses_Parameters.SerializeToString,
            UnobservableCommandTest__pb2.CommandWithoutParametersAndResponses_Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ConvertIntegerToString(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/sila2.org.silastandard.test.unobservablecommandtest.v1.UnobservableCommandTest/ConvertIntegerToString",
            UnobservableCommandTest__pb2.ConvertIntegerToString_Parameters.SerializeToString,
            UnobservableCommandTest__pb2.ConvertIntegerToString_Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def JoinIntegerAndString(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/sila2.org.silastandard.test.unobservablecommandtest.v1.UnobservableCommandTest/JoinIntegerAndString",
            UnobservableCommandTest__pb2.JoinIntegerAndString_Parameters.SerializeToString,
            UnobservableCommandTest__pb2.JoinIntegerAndString_Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SplitStringAfterFirstCharacter(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/sila2.org.silastandard.test.unobservablecommandtest.v1.UnobservableCommandTest/SplitStringAfterFirstCharacter",
            UnobservableCommandTest__pb2.SplitStringAfterFirstCharacter_Parameters.SerializeToString,
            UnobservableCommandTest__pb2.SplitStringAfterFirstCharacter_Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
