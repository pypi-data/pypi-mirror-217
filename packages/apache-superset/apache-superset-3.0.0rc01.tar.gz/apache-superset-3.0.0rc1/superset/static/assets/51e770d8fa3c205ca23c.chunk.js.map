{"version":3,"file":"51e770d8fa3c205ca23c.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-echarts/src/components/ExtraControls.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/Timeseries/EchartsTimeseries.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/components/Echart.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { HandlerFunction, JsonValue, styled } from '@superset-ui/core';\nimport {\n  RadioButtonOption,\n  sharedControlComponents,\n} from '@superset-ui/chart-controls';\nimport { AreaChartStackControlOptions } from '../constants';\n\nconst { RadioButtonControl } = sharedControlComponents;\n\nconst ExtraControlsWrapper = styled.div`\n  text-align: center;\n`;\n\nexport function useExtraControl<\n  F extends {\n    stack: any;\n    area: boolean;\n  },\n>({\n  formData,\n  setControlValue,\n}: {\n  formData: F;\n  setControlValue?: HandlerFunction;\n}) {\n  const { stack, area } = formData;\n  const [extraValue, setExtraValue] = useState<JsonValue | undefined>(\n    stack ?? undefined,\n  );\n\n  useEffect(() => {\n    setExtraValue(stack);\n  }, [stack]);\n\n  const extraControlsOptions = useMemo(() => {\n    if (area) {\n      return AreaChartStackControlOptions;\n    }\n    return [];\n  }, [area]);\n\n  const extraControlsHandler = useCallback(\n    (value: RadioButtonOption[0]) => {\n      if (area) {\n        if (setControlValue) {\n          setControlValue('stack', value);\n          setExtraValue(value);\n        }\n      }\n    },\n    [area, setControlValue],\n  );\n\n  return {\n    extraControlsOptions,\n    extraControlsHandler,\n    extraValue,\n  };\n}\n\nexport function ExtraControls<\n  F extends {\n    stack: any;\n    area: boolean;\n    showExtraControls: boolean;\n  },\n>({\n  formData,\n  setControlValue,\n}: {\n  formData: F;\n  setControlValue?: HandlerFunction;\n}) {\n  const { extraControlsOptions, extraControlsHandler, extraValue } =\n    useExtraControl<F>({\n      formData,\n      setControlValue,\n    });\n\n  if (!formData.showExtraControls) {\n    return null;\n  }\n\n  return (\n    <ExtraControlsWrapper>\n      <RadioButtonControl\n        options={extraControlsOptions}\n        onChange={extraControlsHandler}\n        value={extraValue}\n      />\n    </ExtraControlsWrapper>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport {\n  DTTM_ALIAS,\n  BinaryQueryObjectFilterClause,\n  AxisType,\n  getTimeFormatter,\n  getColumnLabel,\n  getNumberFormatter,\n  LegendState,\n} from '@superset-ui/core';\nimport { ViewRootGroup } from 'echarts/types/src/util/types';\nimport GlobalModel from 'echarts/types/src/model/Global';\nimport ComponentModel from 'echarts/types/src/model/Component';\nimport { EchartsHandler, EventHandlers } from '../types';\nimport Echart from '../components/Echart';\nimport { TimeseriesChartTransformedProps } from './types';\nimport { formatSeriesName } from '../utils/series';\nimport { ExtraControls } from '../components/ExtraControls';\n\nconst TIMER_DURATION = 300;\n\nexport default function EchartsTimeseries({\n  formData,\n  height,\n  width,\n  echartOptions,\n  groupby,\n  labelMap,\n  selectedValues,\n  setDataMask,\n  setControlValue,\n  legendData = [],\n  onContextMenu,\n  onLegendStateChanged,\n  xValueFormatter,\n  xAxis,\n  refs,\n  emitCrossFilters,\n  coltypeMapping,\n}: TimeseriesChartTransformedProps) {\n  const { stack } = formData;\n  const echartRef = useRef<EchartsHandler | null>(null);\n  // eslint-disable-next-line no-param-reassign\n  refs.echartRef = echartRef;\n  const clickTimer = useRef<ReturnType<typeof setTimeout>>();\n  const extraControlRef = useRef<HTMLDivElement>(null);\n  const [extraControlHeight, setExtraControlHeight] = useState(0);\n  useEffect(() => {\n    const updatedHeight = extraControlRef.current?.offsetHeight || 0;\n    setExtraControlHeight(updatedHeight);\n  }, [formData.showExtraControls]);\n\n  const getModelInfo = (target: ViewRootGroup, globalModel: GlobalModel) => {\n    let el = target;\n    let model: ComponentModel | null = null;\n    while (el) {\n      // eslint-disable-next-line no-underscore-dangle\n      const modelInfo = el.__ecComponentInfo;\n      if (modelInfo != null) {\n        model = globalModel.getComponent(modelInfo.mainType, modelInfo.index);\n        break;\n      }\n      el = el.parent;\n    }\n    return model;\n  };\n\n  const getCrossFilterDataMask = useCallback(\n    (value: string) => {\n      const selected: string[] = Object.values(selectedValues);\n      let values: string[];\n      if (selected.includes(value)) {\n        values = selected.filter(v => v !== value);\n      } else {\n        values = [value];\n      }\n      const groupbyValues = values.map(value => labelMap[value]);\n      return {\n        dataMask: {\n          extraFormData: {\n            filters:\n              values.length === 0\n                ? []\n                : groupby.map((col, idx) => {\n                    const val = groupbyValues.map(v => v[idx]);\n                    if (val === null || val === undefined)\n                      return {\n                        col,\n                        op: 'IS NULL' as const,\n                      };\n                    return {\n                      col,\n                      op: 'IN' as const,\n                      val: val as (string | number | boolean)[],\n                    };\n                  }),\n          },\n          filterState: {\n            label: groupbyValues.length ? groupbyValues : undefined,\n            value: groupbyValues.length ? groupbyValues : null,\n            selectedValues: values.length ? values : null,\n          },\n        },\n        isCurrentValueSelected: selected.includes(value),\n      };\n    },\n    [groupby, labelMap, selectedValues],\n  );\n\n  const handleChange = useCallback(\n    (value: string) => {\n      if (!emitCrossFilters) {\n        return;\n      }\n      setDataMask(getCrossFilterDataMask(value).dataMask);\n    },\n    [emitCrossFilters, setDataMask, getCrossFilterDataMask],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      // Ensure that double-click events do not trigger single click event. So we put it in the timer.\n      clickTimer.current = setTimeout(() => {\n        const { seriesName: name } = props;\n        handleChange(name);\n      }, TIMER_DURATION);\n    },\n    legendselectchanged: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n    legendselectall: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n    legendinverseselect: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n    contextmenu: async eventParams => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, seriesName } = eventParams;\n        const drillToDetailFilters: BinaryQueryObjectFilterClause[] = [];\n        const drillByFilters: BinaryQueryObjectFilterClause[] = [];\n        const pointerEvent = eventParams.event.event;\n        const values = [\n          ...(eventParams.name ? [eventParams.name] : []),\n          ...(labelMap[seriesName] ?? []),\n        ];\n        if (data && xAxis.type === AxisType.time) {\n          drillToDetailFilters.push({\n            col:\n              // if the xAxis is '__timestamp', granularity_sqla will be the column of filter\n              xAxis.label === DTTM_ALIAS\n                ? formData.granularitySqla\n                : xAxis.label,\n            grain: formData.timeGrainSqla,\n            op: '==',\n            val: data[0],\n            formattedVal: xValueFormatter(data[0]),\n          });\n        }\n        [\n          ...(xAxis.type === AxisType.category && data ? [xAxis.label] : []),\n          ...formData.groupby,\n        ].forEach((dimension, i) =>\n          drillToDetailFilters.push({\n            col: dimension,\n            op: '==',\n            val: values[i],\n            formattedVal: String(values[i]),\n          }),\n        );\n        formData.groupby.forEach((dimension, i) => {\n          const val = labelMap[seriesName][i];\n          drillByFilters.push({\n            col: dimension,\n            op: '==',\n            val,\n            formattedVal: formatSeriesName(values[i], {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype: coltypeMapping?.[getColumnLabel(dimension)],\n            }),\n          });\n        });\n\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          crossFilter: getCrossFilterDataMask(seriesName),\n          drillBy: { filters: drillByFilters, groupbyFieldName: 'groupby' },\n        });\n      }\n    },\n  };\n\n  const zrEventHandlers: EventHandlers = {\n    dblclick: params => {\n      // clear single click timer\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      const pointInPixel = [params.offsetX, params.offsetY];\n      const echartInstance = echartRef.current?.getEchartInstance();\n      if (echartInstance?.containPixel('grid', pointInPixel)) {\n        // do not trigger if click unstacked chart's blank area\n        if (!stack && params.target?.type === 'ec-polygon') return;\n        // @ts-ignore\n        const globalModel = echartInstance.getModel();\n        const model = getModelInfo(params.target, globalModel);\n        if (model) {\n          const { name } = model;\n          const legendState: LegendState = legendData.reduce(\n            (previous, datum) => ({\n              ...previous,\n              [datum]: datum === name,\n            }),\n            {},\n          );\n          onLegendStateChanged?.(legendState);\n        }\n      }\n    },\n  };\n\n  return (\n    <>\n      <div ref={extraControlRef}>\n        <ExtraControls formData={formData} setControlValue={setControlValue} />\n      </div>\n      <Echart\n        ref={echartRef}\n        refs={refs}\n        height={height - extraControlHeight}\n        width={width}\n        echartOptions={echartOptions}\n        eventHandlers={eventHandlers}\n        zrEventHandlers={zrEventHandlers}\n        selectedValues={selectedValues}\n      />\n    </>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useCallback,\n} from 'react';\nimport { styled } from '@superset-ui/core';\nimport { ECharts, init } from 'echarts';\nimport { EchartsHandler, EchartsProps, EchartsStylesProps } from '../types';\n\nconst Styles = styled.div<EchartsStylesProps>`\n  height: ${({ height }) => height};\n  width: ${({ width }) => width};\n`;\n\nfunction Echart(\n  {\n    width,\n    height,\n    echartOptions,\n    eventHandlers,\n    zrEventHandlers,\n    selectedValues = {},\n    refs,\n  }: EchartsProps,\n  ref: React.Ref<EchartsHandler>,\n) {\n  const divRef = useRef<HTMLDivElement>(null);\n  if (refs) {\n    // eslint-disable-next-line no-param-reassign\n    refs.divRef = divRef;\n  }\n  const chartRef = useRef<ECharts>();\n  const currentSelection = useMemo(\n    () => Object.keys(selectedValues) || [],\n    [selectedValues],\n  );\n  const previousSelection = useRef<string[]>([]);\n\n  useImperativeHandle(ref, () => ({\n    getEchartInstance: () => chartRef.current,\n  }));\n\n  useEffect(() => {\n    if (!divRef.current) return;\n    if (!chartRef.current) {\n      chartRef.current = init(divRef.current);\n    }\n\n    Object.entries(eventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.off(name);\n      chartRef.current?.on(name, handler);\n    });\n\n    Object.entries(zrEventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.getZr().off(name);\n      chartRef.current?.getZr().on(name, handler);\n    });\n\n    chartRef.current.setOption(echartOptions, true);\n  }, [echartOptions, eventHandlers, zrEventHandlers]);\n\n  // highlighting\n  useEffect(() => {\n    if (!chartRef.current) return;\n    chartRef.current.dispatchAction({\n      type: 'downplay',\n      dataIndex: previousSelection.current.filter(\n        value => !currentSelection.includes(value),\n      ),\n    });\n    if (currentSelection.length) {\n      chartRef.current.dispatchAction({\n        type: 'highlight',\n        dataIndex: currentSelection,\n      });\n    }\n    previousSelection.current = currentSelection;\n  }, [currentSelection]);\n\n  const handleSizeChange = useCallback(\n    ({ width, height }: { width: number; height: number }) => {\n      if (chartRef.current) {\n        chartRef.current.resize({ width, height });\n      }\n    },\n    [],\n  );\n\n  // did mount\n  useEffect(() => {\n    handleSizeChange({ width, height });\n    return () => chartRef.current?.dispose();\n  }, []);\n\n  useLayoutEffect(() => {\n    handleSizeChange({ width, height });\n  }, [width, height, handleSizeChange]);\n\n  return <Styles ref={divRef} height={height} width={width} />;\n}\n\nexport default forwardRef(Echart);\n"],"names":["RadioButtonControl","sharedControlComponents","ExtraControlsWrapper","styled","ExtraControls","formData","setControlValue","extraControlsOptions","extraControlsHandler","extraValue","stack","area","setExtraValue","useState","undefined","useEffect","useMemo","AreaChartStackControlOptions","useCallback","value","useExtraControl","showExtraControls","options","onChange","EchartsTimeseries","height","width","echartOptions","groupby","labelMap","selectedValues","setDataMask","legendData","onContextMenu","onLegendStateChanged","xValueFormatter","xAxis","refs","emitCrossFilters","coltypeMapping","echartRef","useRef","clickTimer","extraControlRef","extraControlHeight","setExtraControlHeight","updatedHeight","current","offsetHeight","getCrossFilterDataMask","selected","Object","values","filter","v","groupbyValues","map","dataMask","extraFormData","filters","length","col","idx","val","op","filterState","label","isCurrentValueSelected","handleChange","eventHandlers","click","props","clearTimeout","setTimeout","seriesName","name","legendselectchanged","payload","legendselectall","legendinverseselect","contextmenu","async","eventParams","event","stop","data","drillToDetailFilters","drillByFilters","pointerEvent","type","AxisType","push","DTTM_ALIAS","granularitySqla","grain","timeGrainSqla","formattedVal","forEach","dimension","i","String","formatSeriesName","timeFormatter","getTimeFormatter","dateFormat","numberFormatter","getNumberFormatter","numberFormat","coltype","getColumnLabel","clientX","clientY","drillToDetail","crossFilter","drillBy","groupbyFieldName","zrEventHandlers","dblclick","params","pointInPixel","offsetX","offsetY","echartInstance","getEchartInstance","containPixel","target","globalModel","getModel","model","el","modelInfo","__ecComponentInfo","getComponent","mainType","index","parent","getModelInfo","legendState","reduce","previous","datum","ref","Echart","Styles","divRef","chartRef","currentSelection","keys","previousSelection","useImperativeHandle","init","entries","handler","off","on","getZr","setOption","dispatchAction","dataIndex","handleSizeChange","resize","dispose","useLayoutEffect","forwardRef"],"sourceRoot":""}