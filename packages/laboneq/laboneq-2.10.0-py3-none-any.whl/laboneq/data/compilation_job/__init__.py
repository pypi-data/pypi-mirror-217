# Copyright 2023 Zurich Instruments AG
# SPDX-License-Identifier: Apache-2.0


# __init__.py of 'compilation_job' package - autogenerated, do not edit
from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum, auto
from typing import Any, Dict, List, Optional


#
# Enums
#
class DeviceInfoType(Enum):
    UHFQA = auto()
    HDAWG = auto()
    SHFQA = auto()
    SHFSG = auto()
    SHFQC = auto()
    PQSC = auto()

    def __repr__(self):
        return f"{self.__class__.__name__}.{self.name}"


class ReferenceClockSourceInfo(Enum):
    INTERNAL = auto()
    EXTERNAL = auto()

    def __repr__(self):
        return f"{self.__class__.__name__}.{self.name}"


class SectionInfoAlignment(Enum):
    LEFT = auto()
    RIGHT = auto()

    def __repr__(self):
        return f"{self.__class__.__name__}.{self.name}"


class SignalInfoType(Enum):
    IQ = auto()
    RF = auto()
    INTEGRATION = auto()

    def __repr__(self):
        return f"{self.__class__.__name__}.{self.name}"


#
# Data Classes
#


@dataclass
class DeviceInfo:
    uid: str = None
    device_type: DeviceInfoType = None
    reference_clock_source: ReferenceClockSourceInfo = None


@dataclass
class OscillatorInfo:
    uid: str = None
    frequency: float = None
    is_hardware: bool = None


@dataclass
class PulseDef:
    uid: str = None
    length: float = None
    amplitude: float = None
    phase: float = None
    increment_oscillator_phase: float = None
    set_oscillator_phase: float = None
    precompensation_clear: bool = None
    samples: List[float] = field(default_factory=list)
    function: Optional[str] = None
    pulse_parameters: Optional[Dict] = None


@dataclass
class SectionInfo:
    uid: str = None
    length: float = None
    alignment: SectionInfoAlignment = None
    count: int = None
    chunk_count: int = None
    execution_type: str = None
    averaging_type: str = None
    children: List[Any] = field(default_factory=list)
    on_system_grid: bool = None
    trigger: Dict = field(default_factory=dict)


@dataclass
class SignalInfo:
    uid: str = None
    device: DeviceInfo = None
    oscillators: List[OscillatorInfo] = field(default_factory=list)
    channels: List[int] = field(default_factory=list)
    type: SignalInfoType = None


@dataclass
class SectionSignalPulse:
    uid: str = None
    section: SectionInfo = None
    signal: SignalInfo = None
    pulse_def: Optional[PulseDef] = None
    delay: Optional[float] = None
    increment_oscillator_phase: Optional[float] = None
    set_oscillator_phase: Optional[float] = None
    precompensation_clear: Optional[bool] = None
    pulse_parameters: Dict = field(default_factory=dict)
    marker: Optional[Dict] = None


@dataclass
class ExperimentInfo:
    uid: str = None
    signals: List[SignalInfo] = field(default_factory=list)
    sections: List[Any] = field(default_factory=list)
    section_signal_pulses: List[SectionSignalPulse] = field(default_factory=list)
    global_leader_device: Optional[DeviceInfo] = None
    pulse_defs: List[PulseDef] = field(default_factory=list)


@dataclass
class CompilationJob:
    uid: str = None
    experiment_hash: str = None
    experiment_info: ExperimentInfo = None
