# Copyright 2023 Zurich Instruments AG
# SPDX-License-Identifier: Apache-2.0


# __init__.py of 'calibration' package - autogenerated, do not edit
from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum, auto
from typing import Any, Dict, List, Optional

from numpy.typing import ArrayLike


#
# Enums
#
class CarrierType(Enum):
    IF = auto()
    RF = auto()

    def __repr__(self):
        return f"{self.__class__.__name__}.{self.name}"


class ModulationType(Enum):
    AUTO = auto()
    HARDWARE = auto()
    SOFTWARE = auto()

    def __repr__(self):
        return f"{self.__class__.__name__}.{self.name}"


#
# Data Classes
#


@dataclass
class BounceCompensation:
    delay: float = None
    amplitude: float = None


@dataclass
class Calibration:
    calibration_items: Dict = field(default_factory=dict)


@dataclass
class MixerCalibration:
    uid: str = None
    voltage_offsets: Optional[List[float]] = None
    correction_matrix: Optional[List[List[float]]] = None


@dataclass
class Signal:
    uid: str = None


@dataclass
class ExponentialCompensation:
    timeconstant: float = None
    amplitude: float = None


@dataclass
class FIRCompensation:
    coefficients: ArrayLike = None


@dataclass
class HighPassCompensation:
    timeconstant: float = None


@dataclass
class Oscillator:
    uid: str = None
    frequency: Optional[Any] = None
    modulation_type: ModulationType = None
    carrier_type: CarrierType = None


@dataclass
class Precompensation:
    uid: str = None
    exponential: Optional[List[ExponentialCompensation]] = None
    high_pass: Optional[HighPassCompensation] = None
    bounce: Optional[BounceCompensation] = None
    FIR: Optional[FIRCompensation] = None
