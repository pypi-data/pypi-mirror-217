import asyncio
import pytest_asyncio
from dataclasses import dataclass
from typing import List, Any, AsyncGenerator, Coroutine, Callable


@dataclass
class AsyncGeneratorSubscriber:
    wait_for_messages: Callable[[], Coroutine[Any, Any, List[Any]]]


@pytest_asyncio.fixture
async def subscribe_to_messages() -> Callable:
    async def _subscribe_to_messages(
        generator: AsyncGenerator,
    ) -> AsyncGeneratorSubscriber:
        results = []

        async def collector() -> None:
            async for value in generator:
                results.append(value)

        collector_task = asyncio.create_task(collector())

        async def wait_for_messages() -> List[Any]:
            await collector_task
            return results

        return AsyncGeneratorSubscriber(wait_for_messages=wait_for_messages)

    return _subscribe_to_messages


def pytest_addoption(parser: Any) -> None:
    parser.addini(
        "subscribe_to_messages",
        "Collect messages generated by an async generator",
        default="default_value",
    )
