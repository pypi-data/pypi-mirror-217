# -*- coding: utf-8 -*-

from fdi.dataset.abstractcomposite import AbstractComposite
from fdi.dataset.listener import EventSender, EventType
from fdi.dataset.eq import deepcmp
from fdi.dataset.copyable import Copyable
from fdi.dataset.history import History

from collections import OrderedDict
import copy

import logging

$WARNING

$IMPORTS


# create logger
logger = logging.getLogger(__name__)


class $MODELNAME($PARENTS AbstractComposite, Copyable, EventSender):
    """ A BaseProduct is the starting point of te whole  product tree, and a generic result that can be passed on between processes.

    In general a Product contains zero or more datasets, history,
    optional reference pointers and metadata some required metadata fields.
    A Product is expected to fully describe itself; this includes
    the way how this product was achieved (its history). As it is
    the result of a process, it should be able to save to and restore
    from an Archive device.

    Many times a Product may contain a single dataset and for this
    purpose the first dataset entry can be accessed by the getDefault()
    method. Note that the datasets may be a composite of datasets
    by themselves.

    A built-in attributes in `Model['metadata']` ("MetaData Parameter" or `MDP`) can be accessed with e.g. ``p.creator``, or p.meta['creator'].value::

        p.creator='foo'
        assert p.creatur=='foo'
        assert p.meta['creator']=='foo'
        p.meta['creator']=Parameter('bar')
        assert p.meta['creator']==Parameter('bar')

    =====
    $CLASSDOC

    """

    def __init__(self,
$INITARGS
                 zInfo=None,
                 **kwds):

        # collect MDPs from args-turned-local-variables.
        metasToBeInstalled = copy.copy(locals())
        metasToBeInstalled.pop('__class__', None)
        metasToBeInstalled.pop('kwds', None)
        metasToBeInstalled.pop('self', None)
        metasToBeInstalled.pop('zInfo', None)

        global Model
        # instance variable for Model to be passed down inhritance chains.
        if zInfo is None:
            zInfo = Model

        # must be the first line to initiate meta and zInfo
        # :class: `Attributable` will process MDPs
        super().__init__(zInfo=zInfo, **metasToBeInstalled, **kwds)

        self._history = History()

    @property
    def history(self):
        """ xx must be a property for ``self.xx = yy`` to work in super class after xx is set as a property also by a subclass.
        """
        return self._history

    @history.setter
    def history(self, history):
        self._history = history

    def accept(self, visitor):
        """ Hook for adding functionality to meta data object
        through visitor pattern."""
        visitor.visit(self)

    def targetChanged(self, event):
        pass
        if event.source == self.meta:
            if event.type_ == EventType.PARAMETER_ADDED or \
               event.type_ == EventType.PARAMETER_CHANGED:
                # logger.debug(event.source.__class__.__name__ +   ' ' + str(event.change))
                pass

    def toString(self, level=0,
                 tablefmt='grid', tablefmt1='rst', tablefmt2='psql',
                 extra=False, param_widths=None,
                 matprint=None, trans=True, beforedata='', **kwds):
        """ like AbstractComposite but with history.
        """
        h = self.history.toString(
            level=level,
            tablefmt=tablefmt, tablefmt1=tablefmt1, tablefmt2=tablefmt2,
            matprint=matprint, trans=trans, **kwds)
        s = super(BaseProduct, self).toString(
            level=level,
            tablefmt=tablefmt, tablefmt1=tablefmt1, tablefmt2=tablefmt2,
            extra=extra,
            matprint=matprint, trans=trans, beforedata=h, **kwds)
        return s

    string = toString
    txt = toString

    def __getstate__(self):
        """ Can be encoded with serializableEncoder """
        s = OrderedDict(
            _ATTR_meta=getattr(self, '_meta', None),
            **self.data,
            _ATTR_history=getattr(self, '_history', None),
            _ATTR_listeners=getattr(self, 'listeners', None))
        return s


$PROPERTIES

# Data Model specification for mandatory components
$MODELSPEC

Model = copy.deepcopy(_Model_Spec)

MdpInfo = Model['metadata']
