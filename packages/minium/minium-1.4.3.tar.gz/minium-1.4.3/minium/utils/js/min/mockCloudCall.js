function mockCloudCall(){if(!global.__minium_cloud_call_mocked){function e(r,i){if(typeof r!=typeof i)return!1;switch(typeof r){case"string":return!!new RegExp(r).exec(i);case"number":return r===i;case"object":if(r instanceof Array){if(r.length!=i.length)return!1;for(var n=0;n<r.length;n++)if(!e(r[n],i[n]))return!1;return!0}for(var l in r)if("success"!=l&&"fail"!=l&&"complete"!=l&&"_miniMockType"!=l){if(void 0===i[l])return!1;if(!e(r[l],i[l]))return!1}return!0}return!1}Object.defineProperty(global,"__minium_cloud_call_mocked",{value:!0,writable:!1});const i={};function r(r){return function(n){if(!global[`__minium_${r}_mock_rule`])return i[r].call(this,n);for(var l=0;l<global[`__minium_${r}_mock_rule`].length;l++){var o=global[`__minium_${r}_mock_rule`][l];if(e(o,n)){if(1===o._miniMockType&&([o]=global[`__minium_${r}_mock_rule`].splice(l,1)),console.log(`[minium] ${r} rule match`,o),o.success)return Promise.resolve(o.success);if(o.fail)return Promise.reject(o.fail);if(1===o._miniMockType)return}}return i[r].call(this,n)}}const n=["callContainer","callFunction"];if(n.forEach((e=>{i[e]=wx.cloud[e]})),"undefined"!=typeof Proxy){const l=new Proxy(wx.cloud,{get:(e,i)=>-1!==n.indexOf(i)?r(i):e[i]});wx.cloud=l,Object.defineProperty(wx,"cloud",{writable:!0,value:l})}else n.forEach((e=>{const i=r(e);Object.defineProperty(wx.cloud,e,{writable:!0,value:i}),wx.cloud[e]=i}))}}
