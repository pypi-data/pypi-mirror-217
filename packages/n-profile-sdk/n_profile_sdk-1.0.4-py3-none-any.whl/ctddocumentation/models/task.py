# -*- coding: utf-8 -*-

"""
ctddocumentation

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from ctddocumentation.api_helper import APIHelper
from ctddocumentation.models.taskextraparams import Taskextraparams


class Task(object):

    """Implementation of the 'Task' model.

    TODO: type model description here.

    Attributes:
        allowed_days (string): A string that represents specific days in a
            week, Sunday being 0 and Friday being 6. To select more than a
            specific day just concatenate the day number to the string
        allowed_run_time_end (string): TODO: type description here.
        allowed_run_time_start (string): TODO: type description here.
        mtype (int): TODO: type description here.
        end_time (string): TODO: type description here.
        interval (string): TODO: type description here.
        is_recurring (bool): TODO: type description here.
        name (string): TODO: type description here.
        resource_id (string): TODO: type description here.
        site_id (float): TODO: type description here.
        status (string): TODO: type description here.
        valid (bool): TODO: type description here.
        start_time (string): TODO: type description here.
        assets_count (int): TODO: type description here.
        extra_params (Taskextraparams): TODO: type description here.
        enabled (bool): TODO: type description here.
        id (string): TODO: type description here.
        last_start_run_time (string): TODO: type description here.
        network_id (int): TODO: type description here.
        active_type (int): Indicating 1 for query and 2 for task

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "allowed_days": 'allowed_days',
        "allowed_run_time_end": 'allowed_run_time_end',
        "allowed_run_time_start": 'allowed_run_time_start',
        "mtype": 'type',
        "end_time": 'end_time',
        "interval": 'interval',
        "is_recurring": 'is_recurring',
        "name": 'name',
        "resource_id": 'resource_id',
        "site_id": 'site_id',
        "status": 'status',
        "valid": 'valid',
        "start_time": 'start_time',
        "assets_count": 'assets_count',
        "extra_params": 'extra_params',
        "enabled": 'enabled',
        "id": 'id',
        "last_start_run_time": 'last_start_run_time',
        "network_id": 'network_id',
        "active_type": 'active_type'
    }

    _optionals = [
        'allowed_days',
        'allowed_run_time_end',
        'allowed_run_time_start',
        'mtype',
        'end_time',
        'interval',
        'is_recurring',
        'name',
        'resource_id',
        'site_id',
        'status',
        'valid',
        'start_time',
        'assets_count',
        'extra_params',
        'enabled',
        'id',
        'last_start_run_time',
        'network_id',
        'active_type',
    ]

    def __init__(self,
                 allowed_days=APIHelper.SKIP,
                 allowed_run_time_end=APIHelper.SKIP,
                 allowed_run_time_start=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 end_time=APIHelper.SKIP,
                 interval=APIHelper.SKIP,
                 is_recurring=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 resource_id=APIHelper.SKIP,
                 site_id=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 valid=APIHelper.SKIP,
                 start_time=APIHelper.SKIP,
                 assets_count=APIHelper.SKIP,
                 extra_params=APIHelper.SKIP,
                 enabled=APIHelper.SKIP,
                 id=APIHelper.SKIP,
                 last_start_run_time=APIHelper.SKIP,
                 network_id=APIHelper.SKIP,
                 active_type=APIHelper.SKIP):
        """Constructor for the Task class"""

        # Initialize members of the class
        if allowed_days is not APIHelper.SKIP:
            self.allowed_days = allowed_days 
        if allowed_run_time_end is not APIHelper.SKIP:
            self.allowed_run_time_end = allowed_run_time_end 
        if allowed_run_time_start is not APIHelper.SKIP:
            self.allowed_run_time_start = allowed_run_time_start 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if end_time is not APIHelper.SKIP:
            self.end_time = end_time 
        if interval is not APIHelper.SKIP:
            self.interval = interval 
        if is_recurring is not APIHelper.SKIP:
            self.is_recurring = is_recurring 
        if name is not APIHelper.SKIP:
            self.name = name 
        if resource_id is not APIHelper.SKIP:
            self.resource_id = resource_id 
        if site_id is not APIHelper.SKIP:
            self.site_id = site_id 
        if status is not APIHelper.SKIP:
            self.status = status 
        if valid is not APIHelper.SKIP:
            self.valid = valid 
        if start_time is not APIHelper.SKIP:
            self.start_time = start_time 
        if assets_count is not APIHelper.SKIP:
            self.assets_count = assets_count 
        if extra_params is not APIHelper.SKIP:
            self.extra_params = extra_params 
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if id is not APIHelper.SKIP:
            self.id = id 
        if last_start_run_time is not APIHelper.SKIP:
            self.last_start_run_time = last_start_run_time 
        if network_id is not APIHelper.SKIP:
            self.network_id = network_id 
        if active_type is not APIHelper.SKIP:
            self.active_type = active_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        allowed_days = dictionary.get("allowed_days") if dictionary.get("allowed_days") else APIHelper.SKIP
        allowed_run_time_end = dictionary.get("allowed_run_time_end") if dictionary.get("allowed_run_time_end") else APIHelper.SKIP
        allowed_run_time_start = dictionary.get("allowed_run_time_start") if dictionary.get("allowed_run_time_start") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        end_time = dictionary.get("end_time") if dictionary.get("end_time") else APIHelper.SKIP
        interval = dictionary.get("interval") if dictionary.get("interval") else APIHelper.SKIP
        is_recurring = dictionary.get("is_recurring") if "is_recurring" in dictionary.keys() else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        resource_id = dictionary.get("resource_id") if dictionary.get("resource_id") else APIHelper.SKIP
        site_id = dictionary.get("site_id") if dictionary.get("site_id") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        valid = dictionary.get("valid") if "valid" in dictionary.keys() else APIHelper.SKIP
        start_time = dictionary.get("start_time") if dictionary.get("start_time") else APIHelper.SKIP
        assets_count = dictionary.get("assets_count") if dictionary.get("assets_count") else APIHelper.SKIP
        extra_params = Taskextraparams.from_dictionary(dictionary.get('extra_params')) if 'extra_params' in dictionary.keys() else APIHelper.SKIP
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        last_start_run_time = dictionary.get("last_start_run_time") if dictionary.get("last_start_run_time") else APIHelper.SKIP
        network_id = dictionary.get("network_id") if dictionary.get("network_id") else APIHelper.SKIP
        active_type = dictionary.get("active_type") if dictionary.get("active_type") else APIHelper.SKIP
        # Return an object of this model
        return cls(allowed_days,
                   allowed_run_time_end,
                   allowed_run_time_start,
                   mtype,
                   end_time,
                   interval,
                   is_recurring,
                   name,
                   resource_id,
                   site_id,
                   status,
                   valid,
                   start_time,
                   assets_count,
                   extra_params,
                   enabled,
                   id,
                   last_start_run_time,
                   network_id,
                   active_type)
