import numpy as np
from .hilbert import *


def test_allpass():
    assert np.allclose(allpass(1 / 2, 2), [1, 2, 1 / 5])
    assert np.allclose(allpass(1 / 2, 3), [1, 5, 3, 1 / 7])


def test_leja():
    N = 100
    roots = np.exp(1j * np.arange(N) * 2 * np.pi / N)
    poly = np.poly(leja(roots))
    poly_expected = np.zeros(N + 1)
    poly_expected[0] = 1
    poly_expected[-1] = -1
    assert np.allclose(poly, poly_expected)


def test_sfact_real():
    N = 100
    g = np.random.rand(N)
    h = np.convolve(g, g[::-1])
    g = sfact(h)
    assert np.allclose(g, g.real)
    assert np.allclose(h, np.convolve(g, g[::-1]))


def test_sfact_complex_with_roots_of_unity():
    h = np.array(
        [
            0.43425381 - 0.18336412j,
            0.71110204 - 0.918327j,
            1.24821629 - 1.44787976j,
            1.79003041 - 1.20961102j,
            1.98969243 - 1.39545961j,
            2.22283689 + 0.14085804j,
            2.82608146 - 0.86514556j,
            4.13505927 - 0.30998745j,
            4.26900508 - 1.701867j,
            5.36227024 - 1.3746804j,
            4.93920896 - 1.43514001j,
            5.98352231 - 0.55508354j,
            6.68446901 - 0.34642712j,
            8.33099346 - 0.49798879j,
            8.31683595 - 0.0960952j,
            8.58864589 + 0.09975477j,
            8.32635192 - 1.2960538j,
            8.75795094 + 0.66703495j,
            9.96611291 + 0.40261806j,
            10.65498218 + 1.80587907j,
            11.19078845 + 1.26573776j,
            11.79404433 + 1.43370386j,
            10.34118388 + 1.66208114j,
            11.12279385 - 0.10728973j,
            10.69553291 + 1.31549674j,
            11.99801791 + 1.41276755j,
            12.11098216 + 1.42033377j,
            12.9989956 + 1.80791944j,
            12.47671891 - 0.02586259j,
            13.26510152 + 0.63193095j,
            13.73602714 + 0.28720715j,
            13.07044089 + 1.08827514j,
            12.62529612 + 1.05917982j,
            14.7651339 - 1.00454364j,
            14.81218187 - 0.2880957j,
            15.31047773 - 1.62834755j,
            14.49434696 + 0.10770962j,
            14.37502041 - 1.31906661j,
            15.48727671 - 0.57743464j,
            16.60060288 - 1.07921349j,
            18.43947827 - 1.24063315j,
            17.34344126 - 0.73902794j,
            18.16794761 - 1.50799259j,
            19.134347 - 1.656412j,
            19.25569374 - 0.37283225j,
            20.68452318 - 1.47666314j,
            20.25600336 + 0.35301881j,
            21.02087789 - 0.0224943j,
            19.10461257 - 0.06188717j,
            22.56280915 + 0.45834613j,
            22.36668974 + 0.20518082j,
            22.84540496 - 0.04791573j,
            21.77028668 + 0.29673434j,
            22.71494463 + 0.12558175j,
            23.32058437 - 0.56054112j,
            23.8858294 + 2.01439095j,
            23.81094145 - 0.38120244j,
            25.2397786 - 1.04690355j,
            24.51971142 - 1.49037799j,
            25.31237296 - 0.27144752j,
            24.68093856 - 0.54120818j,
            26.8238186 - 0.33047647j,
            27.21471513 - 0.53366938j,
            27.72740862 + 0.16308235j,
            26.63229009 - 0.10749622j,
            27.00879679 - 0.94421556j,
            29.41728494 + 0.04286415j,
            28.41512791 + 0.69031608j,
            30.57069496 + 0.1269662j,
            29.63455064 + 0.59016851j,
            29.06127716 - 0.23826976j,
            29.3733007 + 1.53835322j,
            30.70805653 + 1.42874271j,
            30.54872834 + 0.8906459j,
            31.46370319 + 0.59311502j,
            31.803718 + 1.10302893j,
            30.70000544 + 1.10683152j,
            32.03578628 + 2.05968897j,
            31.05129695 + 0.80009713j,
            32.21198208 + 1.51720567j,
            32.65741993 + 0.59245722j,
            31.21898131 - 0.44274674j,
            33.19463194 - 1.17075324j,
            33.27986482 + 0.28308366j,
            34.65469795 + 0.20711011j,
            34.48222303 + 0.56827616j,
            34.29278471 + 0.58859172j,
            36.49233293 - 1.71564377j,
            35.08024254 - 2.19686239j,
            37.41844911 - 2.60489353j,
            37.37380086 - 1.55401398j,
            37.79356105 - 0.05355684j,
            40.75219348 - 0.60582116j,
            41.85894989 - 2.18329552j,
            40.76731728 - 3.14693272j,
            40.16396673 - 1.32187247j,
            39.13097215 - 0.80713388j,
            41.22916022 + 0.03430964j,
            41.67670984 - 0.84731891j,
            56.9073256 + 0.0j,
            41.67670984 + 0.84731891j,
            41.22916022 - 0.03430964j,
            39.13097215 + 0.80713388j,
            40.16396673 + 1.32187247j,
            40.76731728 + 3.14693272j,
            41.85894989 + 2.18329552j,
            40.75219348 + 0.60582116j,
            37.79356105 + 0.05355684j,
            37.37380086 + 1.55401398j,
            37.41844911 + 2.60489353j,
            35.08024254 + 2.19686239j,
            36.49233293 + 1.71564377j,
            34.29278471 - 0.58859172j,
            34.48222303 - 0.56827616j,
            34.65469795 - 0.20711011j,
            33.27986482 - 0.28308366j,
            33.19463194 + 1.17075324j,
            31.21898131 + 0.44274674j,
            32.65741993 - 0.59245722j,
            32.21198208 - 1.51720567j,
            31.05129695 - 0.80009713j,
            32.03578628 - 2.05968897j,
            30.70000544 - 1.10683152j,
            31.803718 - 1.10302893j,
            31.46370319 - 0.59311502j,
            30.54872834 - 0.8906459j,
            30.70805653 - 1.42874271j,
            29.3733007 - 1.53835322j,
            29.06127716 + 0.23826976j,
            29.63455064 - 0.59016851j,
            30.57069496 - 0.1269662j,
            28.41512791 - 0.69031608j,
            29.41728494 - 0.04286415j,
            27.00879679 + 0.94421556j,
            26.63229009 + 0.10749622j,
            27.72740862 - 0.16308235j,
            27.21471513 + 0.53366938j,
            26.8238186 + 0.33047647j,
            24.68093856 + 0.54120818j,
            25.31237296 + 0.27144752j,
            24.51971142 + 1.49037799j,
            25.2397786 + 1.04690355j,
            23.81094145 + 0.38120244j,
            23.8858294 - 2.01439095j,
            23.32058437 + 0.56054112j,
            22.71494463 - 0.12558175j,
            21.77028668 - 0.29673434j,
            22.84540496 + 0.04791573j,
            22.36668974 - 0.20518082j,
            22.56280915 - 0.45834613j,
            19.10461257 + 0.06188717j,
            21.02087789 + 0.0224943j,
            20.25600336 - 0.35301881j,
            20.68452318 + 1.47666314j,
            19.25569374 + 0.37283225j,
            19.134347 + 1.656412j,
            18.16794761 + 1.50799259j,
            17.34344126 + 0.73902794j,
            18.43947827 + 1.24063315j,
            16.60060288 + 1.07921349j,
            15.48727671 + 0.57743464j,
            14.37502041 + 1.31906661j,
            14.49434696 - 0.10770962j,
            15.31047773 + 1.62834755j,
            14.81218187 + 0.2880957j,
            14.7651339 + 1.00454364j,
            12.62529612 - 1.05917982j,
            13.07044089 - 1.08827514j,
            13.73602714 - 0.28720715j,
            13.26510152 - 0.63193095j,
            12.47671891 + 0.02586259j,
            12.9989956 - 1.80791944j,
            12.11098216 - 1.42033377j,
            11.99801791 - 1.41276755j,
            10.69553291 - 1.31549674j,
            11.12279385 + 0.10728973j,
            10.34118388 - 1.66208114j,
            11.79404433 - 1.43370386j,
            11.19078845 - 1.26573776j,
            10.65498218 - 1.80587907j,
            9.96611291 - 0.40261806j,
            8.75795094 - 0.66703495j,
            8.32635192 + 1.2960538j,
            8.58864589 - 0.09975477j,
            8.31683595 + 0.0960952j,
            8.33099346 + 0.49798879j,
            6.68446901 + 0.34642712j,
            5.98352231 + 0.55508354j,
            4.93920896 + 1.43514001j,
            5.36227024 + 1.3746804j,
            4.26900508 + 1.701867j,
            4.13505927 + 0.30998745j,
            2.82608146 + 0.86514556j,
            2.22283689 - 0.14085804j,
            1.98969243 + 1.39545961j,
            1.79003041 + 1.20961102j,
            1.24821629 + 1.44787976j,
            0.71110204 + 0.918327j,
            0.43425381 + 0.18336412j,
        ]
    )
    g = sfact(h)
    assert np.allclose(h, np.convolve(g, g[::-1].conj()))


def test_sfact_complex():
    N = 100
    g = np.random.rand(N) + 1j * np.random.rand(N)
    h = np.convolve(g, g[::-1].conj())
    g = sfact(h)
    assert np.allclose(h, np.convolve(g, g[::-1].conj()))


# def test_sfact_roots_of_unity():
#     N = 100
#     roots = np.r_[np.exp(1j * np.arange(N) * 2 * np.pi / N), [-1, +1]]
#     h = np.poly(leja(roots))
#     g = sfact(h)
#     assert np.allclose(h, np.convolve(g, g[::-1].conj()))


def test_sfact_vs_matlab_sfactM():
    h = [
        0.235_008_08,
        0.402_926_36,
        0.197_671_72,
        0.803_147_86,
        1.148_414_6,
        0.660_625_1,
        1.129_839_91,
        1.761_512_14,
        1.817_220_44,
        1.966_754_52,
        2.036_778_09,
        1.618_078_76,
        2.180_165_04,
        3.004_016_2,
        2.997_601_05,
        3.029_040_11,
        3.362_371_75,
        2.917_115_83,
        3.702_461_32,
        5.510_760_04,
        3.702_461_32,
        2.917_115_83,
        3.362_371_75,
        3.029_040_11,
        2.997_601_05,
        3.004_016_2,
        2.180_165_04,
        1.618_078_76,
        2.036_778_09,
        1.966_754_52,
        1.817_220_44,
        1.761_512_14,
        1.129_839_91,
        0.660_625_1,
        1.148_414_6,
        0.803_147_86,
        0.197_671_72,
        0.402_926_36,
        0.235_008_08,
    ]
    g = sfact(h)
    assert np.allclose(h, np.convolve(g, g[::-1]))

    g_expected = [
        0.492_896_11,
        0.871_309_89,
        0.065_187_86,
        0.152_110_69,
        0.444_786,
        0.179_639_09,
        0.468_674_31,
        0.420_139_43,
        0.303_195_1,
        -0.112_751_17,
        0.637_390_43,
        0.955_722_41,
        0.702_259_29,
        0.826_084_58,
        0.209_580_84,
        0.426_936_5,
        0.808_911_74,
        0.382_834_47,
        -0.025_371_96,
        0.476_790_3,
    ]
    assert np.allclose(g, g_expected)


def test_hwlet_4_2_vs_matlab():
    expected_h = [
        -0.001_785_33,
        0.013_358_87,
        0.036_090_74,
        -0.034_722_19,
        0.041_525_06,
        0.560_358_37,
        0.774_586_17,
        0.227_520_75,
        -0.160_409_27,
        -0.061_694_25,
        0.017_099_41,
        0.002_285_23,
    ]
    expected_g = [
        -3.570_660_25e-04,
        -1.847_535_05e-04,
        3.259_148_58e-02,
        1.344_990_16e-02,
        -5.846_672_53e-02,
        2.746_430_77e-01,
        7.795_662_24e-01,
        5.409_737_89e-01,
        -4.031_500_79e-02,
        -1.332_013_79e-01,
        -5.912_129_57e-03,
        1.142_614_64e-02,
    ]

    h, g = selesnick_hwlet(4, 2)
    assert h.scaling_filter.start == g.scaling_filter.start == 0
    assert np.allclose(h.scaling_filter.data, expected_h)
    assert np.allclose(g.scaling_filter.data, expected_g)


def test_hwlet_7_3_vs_matlab():
    expected_h = [
        -0.000_008_509_559_837,
        0.000_155_053_328_906,
        0.000_335_908_682_589,
        -0.003_379_348_176_989,
        -0.001_317_563_525_896,
        0.020_806_061_482_011,
        -0.001_260_616_026_056,
        -0.058_104_797_961_116,
        0.054_771_136_286_585,
        0.146_767_682_794_254,
        -0.266_672_541_675_869,
        -0.758_239_803_854_417,
        -0.560_666_055_445_088,
        -0.051_046_983_845_276,
        0.089_849_110_821_292,
        -0.001_431_140_280_180,
        -0.023_599_660_375_478,
        -0.002_713_741_951_713,
        0.001_462_009_640_675,
        0.000_080_237_287_438,
    ]
    expected_g = [
        -0.000_001_215_651_405,
        0.000_002_700_053_073,
        0.000_460_745_831_039,
        -0.001_019_936_542_747,
        -0.004_774_611_651_203,
        0.009_325_818_768_637,
        0.020_111_376_966_657,
        -0.037_222_043_377_477,
        -0.027_543_138_327_351,
        0.140_004_382_772_676,
        0.005_882_790_359_188,
        -0.565_220_412_816_159,
        -0.752_956_521_033_365,
        -0.287_558_708_554_270,
        0.075_533_433_775_397,
        0.046_016_083_257_261,
        -0.025_067_132_737_740,
        -0.011_996_325_750_141,
        0.001_247_491_291_702,
        0.000_561_661_012_064,
    ]

    h, g = selesnick_hwlet(7, 3)
    assert h.scaling_filter.start == g.scaling_filter.start == 0
    assert np.allclose(h.scaling_filter.data, expected_h)
    assert np.allclose(g.scaling_filter.data, expected_g)
