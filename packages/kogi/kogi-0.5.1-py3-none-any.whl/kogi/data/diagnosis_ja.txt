# 全体
多重ミス: 間違いが多過ぎて、どう直したらいいのやら。コギーには厳しい。
コメント忘れ: ここはコメントアウトしてしまった方が良さそうですね。
前行: 前の方に原因があってエラーになっていますね。たぶん。前の方も注意してね。
途中: まだ書いている途中だね。どうしても実行したいならコメントアウトを。
マニュアル読め: [<M>]の使用法が根本的に違います。サンプルコードを探して学んでね。
何したい: ここで__「何がしたい」__の？ もう少し教えて
理解不足: 落ち着いて、お手本のコードを見てね。諦めないで！！
理解不足かも: 落ち着いて、お手本のコードを見てね。諦めないで！！
バグあるよ: 間違いが多過ぎて、まだまだバグがあるんじゃないかな。残念ながら。
レア: あまり見かけないレアなエラーです。検索すると、良い解決策が見つかることもあります。

# 生成
A構文ミス: 書き間違い。
Aインストール忘れ: [`<A>`の]モジュールがない。 @check_pip
Aインポート忘れ: [`<A>`の]インポートし忘れだね。[`<U>` してごらん]
Aタイポ: [`<W>`は|`<B>`は|`<A>`は]ミススペル。[たぶん、`<S>`かな。|お手本をしっかり見て]
 Cタイポかも: [`<W>`は]タイプミスかも。[たぶん、`<S>` かな。|お手本を確認しよう。]

A変数なし: 変数[`<A>`]には、まだ値が代入されてないよ。
 B追加_変数: [変数`<A>`に<E>を代入するか、<E>の別変数に変えよう。]
 C大文字小文字: 変数名は大文字・小文字区別するよ。
A関数なし: 関数[`<A>`]を定義してないよ。
 Cメソッドかも: [`<N>`|`<A>`]は[<E>に]よく似た[<T>|メソッド]があるよ。調べてみよう。
 Cモジュールかも: [`<N>`|`<A>`]は[<E>]モジュールの[<T>|関数]かもよ。[`<E>.<N>`|そん]な気がする。
 C自作なら: 自作クラスなら自分で定義の方も直せるね。

A型ミス: 型エラーだね。
A値ミス: 変数などの値がおかしいよ。

B修正型_レシーバ: [`<N>`<T>の]対象[`<R>`]が[__<E>__|いい感じ]になるように直してみよう。
B修正型_モジュール: [`<E>`]モジュールの[`<N>`]かも。思い切って[`<R>`|`<W>`]を[<E>]にしてみる？
B修正型_クラス: [`<E>`]クラスの[`<N>`]かも。思い切って[`<R>`|`<W>`]を[<E>]にしてみる？
B修正型_列: [`<R>`の__型__が|添字の対象が][__<E>__か]列になるように直そう。
B修正型_引数: [`<N>`<T>の][第<K>]引数[(`<W>`)]が[__<E>__|いい感じ]になるように直そう。
 Cレシーバ型: [`<R>`の型を調べて]
B修正型_添字: [`<R>`の]添字[、つまり`<W>`]が[__<E>__|整数]になるように直そう。

B修正_引数: [`<N>`<T>の][第<K>]引数[(`<W>`)]が[<E>になるように|エラーメッセージを参考に]直そう。
B追加_引数: [`<N>`<T>の|`<H>`に続く|`<A>`の]引数が足らないよ。[<E>が必要な気がする。]
 Cサンプル読め: サンプルコード探してなおそう。
B削除_引数: [`<N>`<T>の|`<H>`に続く|`<A>`の]引数が余分だよ。[`<W>`は]消してもいいんじゃない？
B削除_添字: [`<R>`の添字(`<W>`)|`<W>`|`<R>`の添字|添字]が余分だよ。たぶん。

B修正型_キーワード引数: [`<N>`<T>の]キーワード引数[`<K>`]が[__<E>__|いい感じ]になるように直してみよう。
B修正_キーワード引数: [`<N>`<T>の]キーワード引数[`<K>`]を正しく設定しましょう。
B削除_キーワード引数: [`<N>`<T>の]キーワード引数[`<K>`]はたぶん不要です。[`<K>`は]消してもいいんじゃない？
 C繰り返し: 同じものを繰り返したくないね。
 C両引数同じ: 少なくとも__同じ種類__にしておきたいね。
 C両辺同じ: 少なくとも__同じ種類__にしておきたいね。

B修正型_左辺: [`<N>`|`<P>`]演算子の左辺[`<W>`]が[__<E>__|いい感じ]になるように直してみよう。
B修正型_右辺: [`<N>`|`<P>`]演算子の右辺[`<W>`]が[__<E>__|いい感じ]になるように直してみよう。
B修正_左辺: [`<N>`|`<P>`]演算子の左辺[`<W>`]を[__<E>__になるように]エラーメッセージを参考に直してみよう。
B修正_右辺: [`<N>`|`<P>`]演算子の右辺[`<W>`]を[__<E>__になるように]エラーメッセージを参考に直してみよう。
　
## 構文ミス
修正_スライス: ここではスライスは使えないよ。

B削除_ゴミ: 何か余分なものをコピペしてない。[`<W>`は要らないよ！]
B追加_予約語: [`<H>`のあとに][`<S>`|何か大切な予約語]を忘れてないかい？

B修正_インデントif: インデントが変です。対応する`if`文とインデントの深さをあわせてみよう。
B追加_インデント: 前の行よりインデントを深くしてみましょう。
B削除_インデント: 前の行とインデントの深さを揃えてみよう。

B修正_全角文字: [`<W>`は全角文字だね。]区別つきにくいけど、[`<S>`に打ち直し！|全角文字は半角文字に！] @check_zen2
B修正_全角空白: [`<H>`のあとに|わかりにくいけど、]全角空白があるよ。半角空白で打ち直してね。@check_zen2
 Cインデント深さ: インデントの深さを注意して
B削除_ゼロ幅空白: ゼロ幅空白という謎文字が混ざっているよ！コピペの影響？コピペせずに__打ち直してみよう__。

B追加_閉じ括弧: `)`の閉じ忘れ。もしくは`(`が余分。どちらかに揃えよう。
B削除_閉じ括弧: `)`が多過ぎ。もしくは、`[`が足りない。どちらだろう？
B追加_閉じ四角括弧: `]`の閉じ忘れ。もしくは、`[`が余分。どちらかに揃えよう。
B削除_閉じ四角括弧: `]`が多過ぎ。もしくは、`[`が足りない。どちらだろう？
B追加_閉じ中括弧: `}`の閉じ忘れ。もしくは、`{`が余分。どちらかに揃えよう。
B削除_閉じ中括弧: `}`が多過ぎ。もしくは、`{`が足りない。どちらだろう？
B修正_括弧不一致: 開き括弧__`(`__と閉じ括弧__`]`__が不一致！どちらかに統一しようよ。
B修正_四角括弧不一致: 開き括弧__`[`__と閉じ括弧__`)`__が不一致！どちらかに統一しようよ。
B追加_クオート: 文字列リテラルを閉じ忘れ。文字列は、`'`と`'`でしっかり囲もう。
B追加_ダブルクオート: 文字列リテラルを閉じ忘れ。文字列は、`"`と`"`でしっかり囲もう。
B修正_クオート不一致: 開き引用符と閉じ引用符が不一致！どちらに統一しよ。
B修正_引用符: 特殊な引用符を使ったね。コピペが原因？ ここは`'`に置き換えよう。
B修正_二重引用符: 特殊な引用符を使ったね。コピペが原因？ ここは`"`に置き換えよう。

B追加_カンマ: カンマを忘れてない？ [`<H>`のあとに]`,`を追加してね。
B追加_コロン: コロンを忘れてない？[`<H>`のあとに]`:`を追加してね。
B追加_ピリオド: ピリオドを忘れてない？[`<H>`のあとに]`.`を追加してね。
B追加_空白: 空白を忘れてない？[`<H>`のあとに]空白を追加してね。
B追加_積: なんか`*`を忘れてない？　[`<H>`のあとに]入れてみよう。
 解説_数学式: 数式の書き方は、Pythonと数学は異なります。 Pythonでは、xyは`x * y`, sinxは`sin(x)`のように書きます。

B修正_コロン: [`<H>`のあとの]`:`が変だね。[`<S>`に変えてみようか？]
B修正_セミコロン: [`<H>`のあとの]`;`が変だね。[`<S>`に変えてみようか？]
B修正_カンマ: [`<H>`のあとの]`,`が変だね。[`<S>`に変えてみようか？]
B修正_ピリオド: [`<H>`のあとの]`.`が変だね。[`<S>`に変えてみようか？]
B修正_代入: [`<H>`のあとの]`=`が変かも。[`<S>`に変えてみようか？]

B削除_カンマ: [`<H>`のあとの]`,`は余分かな。削除だね。
B削除_コロン: [`<H>`のあとの]`:`は余分かな。削除だね。
B削除_ピリオド: [`<H>`のあとの]`.`は余分かな。削除だね。
B削除_セミコロン: [`<H>`のあとの]`;`は余分かな。削除だね。
B削除_代入: [`<H>`のあとの]`=`は余分かな。削除だね。
B削除_空白: [`<H>`のあとに]空白は余分かな。削除だね。

B追加_コール: `()`を忘れてない？ 関数やメソッドは`()`を付け忘れると、ややこしいエラーの原因になるよ。
B削除_コール: [`<H>`のあとの]`()`は不要です。取り除いちゃおう。
B修正_添字コール: 関数やメソッドは`()`を使って呼ぶよ。`[]`を使ってもいいことないよ。
B修正_コール添字: 添字は`[]`を使うよ。`()`を使いたのはわかるけど..


## 生成ひとこと
Cもしくは: もしくは、

Cゼロ以外: [`<I>`は]0以外の数値になるようにしてみよう。
Cゼロ以上: [`<I>`は]0以上の数値になるようにしてみよう。
C正規範囲: [`<I>`を]0.0から1.0の範囲にしてみよう。
C空範囲: 範囲が空っぽだよ。少なくともひとつは含まれるように指定しよう。

C書式_文字列: 文字列の書式が間違っているよ。どんな形式なんだろう？
C書式_2進数: 文字列を2進数に変換できる形式になおそう。
C書式_16進数: 文字列を16進数に変換できる形式になおそう
C書式_整数: 文字列を整数に変換できる文字だけにしよう
C書式_浮動小数点数: 文字列を浮動小数点数に変換できる文字だけにしよう
C書式_有理数: 文字列を'1/2'のように有理数に変換できる形式にしよう

E添字元: 添字が使えるのは、リスト、文字列、配列、データ列など順序のある__列__だよ。
C添字範囲: 添字の値が列の大きさを超えてるよ。うまく範囲内で書こう。@hint_うまく範囲内で書くには？
C添字次元: 添字の次元が配列の次元を超えてるよ。次元数を合わせてね。

C形状: データや配列の形状が不一致！ `reshape`すると解決するかも。

C非数: データ[`<I>`][もしくは`<J>`]にはNaNなどの計算できない数値が含まれているよ。

C前処理しろ: ちゃんとデータの__前処理__してね。
Cエラー読め: エラー文にもヒントが書いてあるよ。
 Dバージョン: 古いPythonではサポート外のこともあるよ。
 
修正_要素なし: 要素[<A>]がリスト上にない。あるときだけ処理しよう。
 解説_要素確認: 要素`x`が`A`に存在するか確認するには、`if x in A: ...`のように条件分岐を書きます。
修正_文字なし: 存在しない文字列を指定しています。`find()`を使えば、存在しないときはエラーにならず、-1になります。

# 
修正_空以外: [`<I>`は]空でないリストや列にしてください。
修正_整数値: [`<I>`は]整数値にしてください。
修正_全順序: [`<I>`は]大小を比較できる値にしてください。


####

D予約語: [`<S>`は]予約語だよ
D危険な変数名: 組み込み関数を変数名として使ってない？ @check_builins

E等号記号: `==`は条件演算子の__等しい__。`=`は代入で別物だよ。

# 

追加_引数A: [`<A>`の]引数を何か忘れています。
削除_引数A: [`<A>`の]余分な引数を取り除いてみましょう。
 解説_キーワード引数: キーワード引数は、key=valueの形式で指定する引数です。同じkeyを繰り返してはいけません。通常の引数の__あとに__続けて書きます。



# NameError: name <A> is not defined
タイポA: [`<A>`は]ミススペルです。[正解は、たぶん`<S>`かな。]
タイポB: [`<B>`は]ミススペルです。[正解は、きっと`<S>`かな。]
勘違い: たぶん、単なる勘違い？[`<X>`の代わりに`<S>`に直してみたら？]
修正候補: [ひょっとしたら、`<X>`の代わりに`<S>`に直してみたら？]
    修正: [`<X>`は`<Y>`かな。]
    削除: 不要なものがあるよ。[<Z>は取り除いてみよう。]

原因_未定義変数: 変数[`<A>`]には、まだ値が代入されてないよ。
追加_変数初期化: 先に、`<A> = 0`のように値を設定しましょ。(もちろん、`0`の部分は適切な値に直してね。)
    注意_大文字小文字: [<!> 変数名の大文字/小文字は区別されるよ。]
    初期化_データフレーム: データフレームは、[`<A> = pd.read_csv(ファイル名)`]でファイルから読めるよ。
    初期化_リスト: 空のリストは[`<A> = []`]で初期化しておくと良いよ。
修正_変数文字列: 変数[`<A>`]はひょっとしたら文字列[`"<A>"`]かも
修正_自己代入: 先に、`<A> = 0`のように初期化が必要だよ。

原因_未定義関数: 関数[`<A>`]は、まだ定義されていません。
追加_関数定義: `def <A>(...)`を忘れてません？ @check_function
 クラスかも: [`<A>`]はクラスかも知れません。クラス定義も忘れていないか確認してください。
 メソッドかも: [`<A>`]はメソッドかも知れません。

# 構文エラー
構文ミス: どちらかといえば、文法的な書き間違いに原因があります。
うっかり: たぶん、うっかりミスだね。
言語違い: これはPythonではないね。（変なコードをコピペしないでね） 
追加_改行: 改行をし忘れてますよ。
削除_バックスラッシュ: `\`が使えるのは行末だけ、しかも__改行を無視する__という意味です。これは削除だね。


追加_split: そこは`input().split()`ですかね。


追加_if文: たぶん、if文を忘れています。（条件式で始まることはないからね。）

修正_プリント文: Python3以降は、`print(X, Y)`のように関数として出力します。
 注意_旧バージョン: Pythonの書き方を調べるときは、Python3.0以降の書き方を参考にしましょう。

解説_カラム名: データ列は、カラム名`"A"`を使って`df["A"]`のように指定します。データフレームがないと、単なる文字列です。
解説_カラム列: データフレームdfの複数のカラムは、カラム名のリストを使って`df[["A", "B", "C"]]`のように指定します。
 レンジ忘れ: たぶん、`range()`を使うのを忘れています。
修正_組込関数: 組み込み関数`<F>()`は基本だよ。正しく使おう。


修正_イコール: 条件の「等しい」は`==`で書きます。（`=`は常に代入だからね。）
修正_イコール代入: 代入は`==`です。(`==`は条件で用いて等しいかの判定)
追加_代入: [`<H>`のあとに]`=`を追加してみると.. 
削除_代入: その[`<H>`に続く]`=`は変だね。削除しちゃおう。

 解説_文字列空白: " "や' '内の空白は無視されません。（余分な空白は入れないように）　
削除_空文字列: 余分な空文字列があります。削除しましょう。

追加_両括弧: 括弧が足りません。とにかく、`( )`で囲んでみてね。
削除_両括弧: 括弧が多過ぎ。変に`( )`で囲むと、タプルになるよ。

修正_四角括弧対応: `[` `]`の対応が不一致です。落ち着いて直しましょう。
括弧閉じ忘れ: たぶん、前の行で`)`や`]`を閉じ忘れています。落ち着いて確認しましょう。


修正_引数リスト化: 引数は、`[` `]`で囲んでリスト化した方がいいかも
自作引数かも: 自分で定義した関数やメソッドの場合は、定義側の引数を直した方がいいこともあります。

削除_メソッドコール: たぶん、プロパティです。[`<H>`のあとの]`()`を取り除いてみてください。

修正_代入先: 代入先は変数かプロパティ、または`a[i]`のようなreturn Noneだけですよ。変なものに代入しては嫌。
    解説_for代入: `for x in ...`で代入できるのは、`x`のような変数だけ。面倒だけど、for文の中で最大しよう。

修正_制御構造: 条件分岐やループなどの処理の流れをしっかり把握しましょう。
    解説_break: break文はループから__強制的に__抜けます。ループの外では使ってはダメ。
    解説_continue: break文はループから__強制的に__抜けます。ループの外では使ってはダメ。
追加_空文: 何もしないのは、`pass`と書きます。[<!> 意味はトランプゲームのパスと一緒です。]
修正_return: return文は関数の結果を返します。関数定義の中で使おう。[<!> `print()`と勘違いしていない？]
 


再起動: 組込関数[<X>]を変数名に用いたため、関数として正しく使えなくなっています。　@check_builtins
再起動_モジュール: モジュールの関数に間違って代入したため、正しく使えなくなっています。　@check_builtins

解説_添字: 添字は、`a[i]`のように書きます。`ai`でも`a[i]`でもありません。
解説_一要素リスト: 要素が`x`一つだけのリストは、`[x]`のように書きます。
解説_while: 条件による繰り返しは、`while文`を使います。

# 型エラー
修正_型: [メソッド`<M>`の|関数`<F>`の][レシーバ`<R>`が|`<I>`が]__<E>__になるように直してみよう。

修正_列型: [`<I>`を]添字が使えるようにリストか文字列などの列に直してみましょう。
修正_イン型: [`in <I>`は]リストか文字列などのデータの集まりにしましょう。

解説_ノン型: Noneは、何も値を返さない関数やメソッドの結果です。
 修正_ノンメソッド: [`<R>`は|レシーバは]Noneを返すので、続けてメソッドを呼べません。行を分けて別々にメソッド呼び出しするようにしましょう。
 
 解説_関数型: 関数コールなしに、関数を変数として参照すると関数型の値になります。
 解説_メソッド型: メソッドコールなしに、メソッドをプロパティとして参照するとメソッド型の値になります。
 解説_タイプ型: `int`などのクラス名を変数として参照するとtype型の値になります。
 解説_マップ型: `map()`の結果をそのまま代入するとmap型の変数になります。
 解説_タプル型: タプルは、組を意味する型です。`1,2`や`(1,2)`のように値をカンマで書くと、タプルになります。
 解説_セット: セットは集合を意味する型です。順序が存在しないので、`a[i]`のような添字は使えません。

_メソッドなし: `<A>`クラスに、`<B>`メソッドがない。
_プロパティなし: `<A>`クラスに、`<B>`プロパティがない。
 前行_メソッド実行: プロパティがあるメソッドの結果である場合は、先に実行しないとプロパティが存在しないことも。
修正_メソッド: `<A>`クラスを調べ、適切なメソッド名を探しましょう。
修正_プロパティ: `<A>`クラスを調べ、適切なプロパティを探しましょう。もしくは、`<B>`プロパティのあるクラスを探しましょう。
追加_メソッド追加: 自作クラスならメソッド定義を追加するのも
追加_プロパティ追加: 自作クラスならプロパティを追加するのも。

修正_引数型: [メソッド`<M>`の|関数`<F>`の][第<N>]引数[(`<I>`)]が__<E>__になるように直してみよう。
修正_キーワード引数型: [メソッド`<M>`の|関数`<F>`の]キーワード引数[(`<K>`)]が__<E>__になるように直してみよう。

修正_引数型A: [`<A>`の]引数の型が違います。__<E>__になるようにしましょう。


解説_リスト追加: リスト`a`に値`x`を追加するときは、`a.append(x)`と書きます。
解説_append: `append`は__リスト__に要素を追加するメソッドです。文字列やタプルには追加できません。追加できるのは、一度に__ひとつ__だけです。

修正_インスタンス化: レシーバ[`<R>`]がクラスのまま、正しくインスタンス化されていない恐れがあります。インスタンス化していますか？

修正_ユニバーサル関数: ユニバーサル関数[`<S>`]を使ってみましょう。
 
前代入: エラーより前で、変数`<V>`に__予定外の値__が代入されている箇所を修正しましょう。


修正_余分なメソッド: たぶん、このメソッドコールは必要ありません。

# 引数


修正_キー引数値: キーワード引数[`<K>`]の値を正しく設定しましょう。
 スペルミスかも: 単なるスペルミスも多いです。スペルもしっかり確認してください。

# 演算子

演算型: `<P>`演算子で型エラーです。[<A>型 `<P>` <B>型の計算はおかしくありませんか？]
演算型A: `<A>`演算子で型エラーです。[`<B>型 `<A>` <C>型の計算はおかしくありませんか？]
演算型B: `<P>`演算子で型エラーです。[`<B>型 `<P>` <C>型の計算はおかしくありませんか？]
 修正_左辺: 演算子の左辺[`<X>`]を<E>になるようにしてみましょう。
 修正_右辺: 演算子の右辺[`<X>`]を<E>になるようにしてみましょう。
 修正_左右: 演算子の右辺と右辺を同じ型に揃えてみましょう。
 追加_演算子: 自分で定義したクラスな、演算子オーバーロードを忘れている可能性もあります。

 解説_XOR: よくある間違いですが`X ^ Y`は XとYの排他論理和です。累乗したいときは、`X ** Y`です。ご確認を。
 解説_文字列モジュロ: 文字列へのモジュロは、書式ご確認を。
 
# IndexError
修正_添字: 添字の指定の仕方が間違っています。 @check_index
修正_リスト添字: 添字がリストの要素数を超えています。添字がリストのサイズに収まるようにプログラミングしましょう。 @check_index
修正_文字列添字: 添字が文字列の長さを超えています。 添字がリストのサイズに収まるようにプログラミングしましょう。 @check_index
修正_行列添字: 添字が列の大きさを超えています。 添字がリストのサイズに収まるようにプログラミングしましょう。 @check_index
修正_配列添字: 添字が配列の大きさを超えています。添字がリストのサイズに収まるようにプログラミングしましょう。 @check_index
修正_空ポップ: 空のリストからpop()できません。
修正_添字型: リストや文字列、配列の添字は、整数になるようにしましょう。
 解説_文字列添字: 文字列の添字を使いたいときは、リストの代わりに辞書やデータフレームを使います。
 解説_多次元添字: 多次元リストへの添字は、`a[x,y]`ではなく`a[x][y]`のように書きます。

# ValueError:
修正_値: 値エラーです。[`<I>`を][`<E>`になるように]修正してみよう。


修正_値範囲: 指定できる値の範囲を超えています。
 値ヒントあり: エラーメッセージにをよく読めば、指定できる値のヒントがあります。

修正_数値文字列: [`<I>`に]数値に変換できない文字[<A>]が含まれています。余分な文字を取り除いてから処理してみますか？
修正_整数文字列: [`<I>`に]整数に変換できない文字[<A>]が含まれています。余分な文字を取り除いてから処理してみますか？

修正_変数化: そこは文字列リテラルでなく、変数かも

# データフレーム系

修正_数値データ: データ[`<I>`][もしくは`<J>`]に[<A>のような]数値に変換できないデータが含まれています。しっかり前処理しましょう。
修正_同じサイズ: データ列[`<I>`][と`<J>`]の件数が一致しません。間違ったデータ列の可能性もあります。
修正_データ数: データ[`<I>`][と`<J>`]の件数が一致しません。間違ったデータを与えている可能性もあります。データの形状(`shape`)も確認してください。
修正_特徴量: データ[`<I>`]の特徴量が学習時と異なります。間違ったデータを与えていませんか？

修正_カラム数: カラム数が一致しません。カラム数分の新しいカラム名を設定してください。
修正_列数: データ数が一致しません。データ件数分のデータを設定してください。

修正_ブール列any: 複数のTrueかFalseに対し条件判定するとあいまいです。全てがTrueの場合は`all()`、ひとつでもTrueの場合は`any()`を使いましょう。
修正_ブール列not: 複数のTrueかFalseに対する否定は、`not`ではなく`~`を使います。
修正_ブール列and: 複数のTrueかFalseに対する論理積は、`and`ではなく`&`を使います。
修正_ブール列or: 複数のTrueかFalseに対する論理和は、`or`ではなく`|`を使います。

修正_予測ラベル: 正解ラベルと予測ラベルの種類が違います。正しい正解か予測結果を与えるようにしてください。

# KeyError
キーなし: 指定されたキー[<A>]が辞書にありません。 @check_key
カラム名なし: 指定されたカラム名[<A>]がデータフレームにありません。 @check_column
グループ名なし: 指定されたグループ名[<A>]がカテゴリにありません。 @check_column
修正_列方向: 列方向は`axis=1`だよ。
変なカラム名: 文字列でないカラム名が与えられました。

# FileNotFoundError: <A> No such file or directory: <B>
ファイルなし: ファイルが見つかりません。ファイルをまだダウンロードしていないか、ファイルパスの指定が間違っています。 @check_file


## 入力系

入力: 入力が正しく処理できません。入力形式や問題番号は正しいですか？
入力_数値文字列: 入力に数値に変換できない文字[<A>]が含まれています。
 修正_整数map: 空白区切りの整数は `list(map(int, input().split()))`で処理します。
　入力_カンマ: 入力形式は空白区切りじゃない？
 修正_整数float: 小数点数は、`int`の代わりに`float`で変換します。
 修正_整数str: 整数に変換できません。ここは本当に整数に変換するところですか？文字列のままで良いのなら変換の必要はありません。

展開多: 左側の変数がデータ数に対し多すぎます。変数の数は、データ数に揃えてください。
展開少: 左側の変数がデータ数に対し少なすぎます。変数の数は、データ数に揃えてください。
 解説_リスト化: 可変長個のデータを扱いときは、展開しないでリストで扱うのも便利ですよ。
 解説_多重代入: 多重代入の書き方は `x, y = 1, 2` です。`x = 1, y = 2`ではありません。

解説_入力マップ: 入力から__２つ以上の__整数を読むとき、`map(int, input().split())`のように書きます。ひとつの整数を読むのは、単に`int(input())`です。
解説_入力リスト: 入力から複数個の整数を読むとき、`list(map(int, input().split()))`のようにリスト化します。
　解説_入力文字列: `int`の部分を`str`に変更すれば、文字列が読めます。
　解説_入力数値: `int`の部分を`float`に変更すれば、浮動小数点数が読めます。

前入力_マップ忘れ: 前の入力処理において`map(int, input().split())`のようなmapを忘れていませんか？

## 解説

解説_タプル:
解説_ダブルクオート: ダブルクオート`"`はShiftを押しながら2を打ちます。シングルクオート`'`２つではありません。
解説_空文: Pythonでは、何もしない空文は`pass`と書きます。よろしく。
解説_ソート: リストAのソートは、メソッドとしてA.sort()、関数としてsorted(A)と書きます。それぞれ、動作が異なります。
解説_シェル: シェルコマンドを実行するときは、先頭に!をつけます
解説_キーワード引数A: キーワード引数は、<A_>=...のように指定します。
解説_for: for文は、`for x in X:` のように書き、Xの値を順番に変数xに代入しながら繰り返します。
解説_import: import文は、`import モジュール名 as 別名`のように書き、モジュールをインポートします。`as 別名`は省略できます。特定の関数のみインポートしたい場合は、from文を使います。
解説_from: from文は、`from モジュール名 import 関数名`のように書き、モジュールから指定の__関数のみ__をインポートします。
解説_elif: `elif`は`else if`の意味で__条件式が必要__です。条件式が不要なときは、`else`を使いましょう。
解説_else: `else`は条件にマッチしなかった場合の処理を書きます。__条件式は書けません__。条件式を書きたいときは、`elif`を使いましょう。
解説_インクリメント: Pythonでは、インクリメント演算子は使えません。代わりに、`x += 1`のように自己代入で書きます。
解説_変数名マイナス: 変数名にはマイナスは使えません。代わりにアンダースコア`_`を使うことが多いです。
解説_特殊変数名: `__`で囲まれた変数は特別な意味がある変数名です。空白を入れてはいけません。
解説_関数定義: 関数定義の書き方をおさらいしよう
解説_文字列リテラル: 関数を定義しよう
解説_変更不能: 文字列やタプルはイミュータブル、つまり変更不能できません。これらを変更するメソッドは存在しません。変更可能なリストに変換して操作しましょう。
解説_予期せぬタプル:  `x = A,B` のようにカンマで区切ると、`x` はタプルになってしまいます。
解説_dt: カラムがdatetime型の場合のみ、`.dt`を利用して、年、月といった日付の情報を取得することができます。datetime型への変換は、`pd.to_datetime()`を使います。

注意_組込関数: `<N>`は組み込み関数です。Pythonでは、変数名として使うと__予期せぬバグ__の原因になります。別の名前にしましょう。
注意_sum: `sum`は合計を計算する関数です。Pythonでは、変数名として使うと__予期せぬバグ__の原因になります。
注意_min: `min`は最小値を求める関数です。Pythonでは、変数名として使うと__予期せぬバグ__の原因になります。
注意_max: `max`は最大値を求める関数です。Pythonでは、変数名として使うと__予期せぬバグ__の原因になります。
