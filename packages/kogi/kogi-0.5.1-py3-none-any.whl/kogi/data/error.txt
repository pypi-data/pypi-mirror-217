
## == OK ===

不要_キーワード引数: `<X>`のキーワード引数を取り除いてみては？

自己参照変数: `self`はメソッド内のみで使えます
未定義変数: 変数[<A_>]は未定義です。つまり、まだ一度も[<A_>に]値が代入されていません。
 初期化: 先に、`<A_> = `のように[<E>で]初期化しておきましょう。 @check_var
 修正_変数名: 既に値が代入された適切な変数名に変更してみてください。
 
 初期化忘れ: 先に、`<A_> = 0`のように値を代入して初期化しておこう。@check_var
 初期化忘れ_リスト: 先に、`<A_> = []`のように空のリストを作っておこう
 初期化忘れ_データフレーム: 先に、`<A> = pd.read_csv(...)`を使って、データフレームを読んでおきましょう
 文字列かも: 文字列として`"<A_>"`のように囲むべきかも
 代入ミス: 変数への代入は、`==`ではありません。`=`で行います
 自己代入ミス: 変数を増減するときは、最初に `<A_> = 0`のように初期化しておく必要があります。
 サンプル: <A_>に相当する変数や値に置き換えましょう




値_リスト外: リストの要素にない値を指定しています。先に要素の存在を確認しましょう。
値修正_空リストA: 関数[`<A_>`]の引数が空リストです。空にならないようにしよう。
値修正_範囲A: 関数[`<A_>`]の引数の値が範囲外です。範囲内を与えるようにしよう。
値_値過多: 値が大きすぎます。適切な値に小さくしてください。
値_データ列不一致: データ列の長さが不一致です。同じ長さのデータ列を指定してみよう。
値_次元不一致: データの次元が不一致です。同じ次元になるように修正しよう。
値_次元: データの次元が間違っています。次元数を確認しよう。
値_次元変更: 次元は、変更してもデータ数は変わらないように指定しましょう。
値_少なくとも１つ以上必要: 少なくとも１つ以上必要です。
値_オプション外: オプションに存在しない値を指定しました。オプションから選びましょう。



書き方変: 書き方がどこかしら変です。よくお手本を見てください。
 余分: うまく指摘できませんが、余分なゴミがついています。（変なコピペした？）


 条件必要: `if`文や`while`文には条件式が必要です。
 空白必要: 予約語と変数の間には空白が必要です。
 カンマ: カンマが変だね。
 カンマ必要: カンマが足りません。カンマを追加してください。
 カンマ余分: そこにカンマは不要だね。
 スラッシュ: スラッシュが変だよ。（そこで割ってどうする？）
 コロン: コロンが変だね。
 コロン余分: そこにコロンは不要だよ。
 コロン必要: コロンが必要だよ
 セミコロン: セミコロンが変。（コロンの打ち間違い？）
 ピリオド: ピリオッドが変。（カンマの打ち間違い？）
 ピリオド余分: そこにピリオッドは不要だね。
 コール必要: 関数やメソッドは()を付けて呼び出します。付けないと別の意味になり、型エラーの原因になります。
 f書式内: f書式の`{ }`中にエラーがあります。
 f書式内_文字列: f書式の`{ }`中では文字列は書けません。
 ループ外_break: ループの外では`break`文は使えません
 ループ外_continue: ループの外では`continue`文は使えません
 関数外_return: 関数定義外で`return`文を使っています
 代入先_定数: 数値や定数には代入できません。`=`以降をざっくり消すとうまくいくかも
 代入先_数式: 数式や関数コールへの代入はできません。`=`以降をざっくり消すとうまくいくかも
 括弧閉じ忘れ: `)`を閉じ忘れています。もしくは`(`が余分で多すぎるときもあります。
 括弧ミスマッチ: `(`と`)`の数があいません。
 括弧多_タプル: 括弧が多過ぎて、タプルになっています。
 四角括弧閉じ忘れ: `]`を閉じ忘れています。もしくは`[`が余分なときもあります。
 四角括弧_ミスマッチ: `[`と`]`の数があいません。
 文字列閉じ忘れ: 文字列を閉じ忘れています。`"`と`'`がミスマッチな場合もあります。


型エラー: 型エラーです。期待される値と異なる種類の値を使ったときに発生します。
代入破壊: 関数に間違って代入してしまったため、関数が別の値に書き換えられています。ランタイムの再起動がすること回復します。
代入破壊_sum: `sum`に値を代入したため、`sum`が関数として使えなくなりました。 @restore_builtins

型エラー_キーワード引数A: キーワード引数[`<A_>`]は使えません。タイプミスでなければ、取り除いてみましょう。
型エラー_キーワード引数B: キーワード引数[`<B_>`]は使えません。タイプミスでなければ、取り除いてみましょう。
削除_キーワード引数A: キーワード引数[`<A_>`]は使えません。タイプミスでなければ、とりあえず取り除いてしまいましょう。
削除_キーワード引数B: キーワード引数[`<B_>`]は使えません。タイプミスでなければ、とりあえず取り除いてしまいましょう。
型エラー_多重引数B: 同じパラメータが引数とキーワード引数[`<B_>`]で同時に与えられているので、どちらか取り除いてみましょう。
型エラー_引数必要A: パラメータ数が一致しません。`<A>`に足りない引数を加えましょう。
型エラー_引数余分A: パラメータ数が一致しません。`<A>`から余分な引数を消してください。
型エラー_引数余分: パラメータ数が一致しません。余分な引数を消してください。
 引数リストかも: もしくは、引数を[1,2,3]のようにリスト化すると良いかも
 自作なら: 定義した関数やメソッドを修正した方がいい場合もあります。
 レシーバかも: （どうしてもエラーが解決しないとき）レシーバのインスタンス化が正しく行えず、クラスのままになっていることもあります。

型エラー_関数引数: 関数[`<F>`]の引数の型が間違っています。関数[`<F>`]を確認して引数を直してください。

型エラー_引数型: [`<F>`]の引数の型が間違っていて、内部でエラーになっています。
型エラー_引数型A: 関数[`<A_>`]の引数の型が違います。__<E>__になるようにしましょう。
型エラー_引数型AB: 関数[`<A_>`]の第<B>引数の型が違います。__<E>__になるようにしましょう。
型エラー_引数展開: `*`で展開するためには、リストやタプルを与えましょう。
型エラー_文字列モジュロ: 文字列のモジュロ（余り）を計算しようとしています。数値に変換してから計算してね。
型エラーイテラブルin: `x in A`のAは、文字列やリストなどのイテラブルになるようにしましょう。

メソッドなしAB: `<A_>`クラスには、`<B_>`メソッドはありません。
プロパティなしAB: `<A_>`クラスには、`<B_>`プロパティはありません。
 自作クラスなら: `<A_>`クラスに`<B_>`メソッドを追加してみるのも良いかも
レシーバ修正: たぶんメソッド名はあっているので、レシーバを直してください。
修正_引数型: [`<B_>`の]引数の型がたぶん違います。<E>になるように直してみましょう。
修正_レシーバ型: [`<B_>`の]レシーバの型がおかしくなっています。<E>になるように修正してみましょう。
　変数代入_型: 変数[`<V>`]に[`<A_`>]の値を代入しているところを探して直しましょう。
　変数代入_関数: 変数[`<V>`]に関数コールを忘れて、代入しているところを探して直しましょう。
　変数代入_None: 変数[`<V>`]にNoneを代入しているところを探して直しましょう。
修正_カラム型: データ列の型が期待のものと異なります。<E>になるように修正してみましょう。
前メソッドNone: 前のメソッドコールはNoneを返すので、続けて`<B_>`を呼べません。
None_レシーバ: レシーバの変数名にNoneを代入してしまいました。[`<R>`にNoneを代入している行を探して直してください。] @check_assign
変数None: 変数名[`<N>`]にNoneを代入してしまいました。 @check_assign
レシーバ辞書追加: レシーバは辞書です。要素を追加するためには、辞書の代わりにセット`set()`を使った方が良いかも。
レシーバ関数: レシーバの変数名に関数コールなしで代入していませんか？ (レシーバが関数ですよ) @check_assign
修正_メソッド追加: `<A_`>クラスに`<B_>`メソッドがありません。自作クラスならメソッド定義を追加してみましょう。
修正_プロパティ追加: `<A_`>クラスに`<B_>`プロパティがありません。自作クラスならプロパティを追加してみましょう。
関数名修正: 適切な関数名やメソッド名に変更してください。（たぶん、レシーバはあっています）
カラム名なしB: データフレームには、"`<B_>`"というカラムはありません。名前を確認して
修正_組込関数: メソッドではなく、代わりに__組み込み関数__[`<N>()`]を使います。
修正_プロパティ順序: まだ計算結果が記録されていません。[メソッド`<N>()`の呼び出しを忘れていませんか？]



非関数_プロパティ: プロパティ

ValueError:
値_リスト外: リストの要素にない値を指定しています。先に要素の存在を確認しましょう。
値修正_空リストA: 関数[`<A_>`]の引数が空リストです。空にならないようにしよう。
値修正_範囲A: 関数[`<A_>`]の引数の値が範囲外です。範囲内を与えるようにしよう。
値_値過多: 値が大きすぎます。適切な値に小さくしてください。
値_データ列不一致: データ列の長さが不一致です。同じ長さのデータ列を指定してみよう。
値_次元不一致: データの次元が不一致です。同じ次元になるように修正しよう。
値_次元: データの次元が間違っています。次元数を確認しよう。
値_次元変更: 次元は、変更してもデータ数は変わらないように指定しましょう。
値_少なくとも１つ以上必要: 少なくとも１つ以上必要です。
値_オプション外: オプションに存在しない値を指定しました。オプションから選びましょう。

