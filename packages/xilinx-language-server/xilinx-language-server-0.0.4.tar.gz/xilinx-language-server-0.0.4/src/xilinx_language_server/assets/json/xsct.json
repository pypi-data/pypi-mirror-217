{"builtin_scwutil": "",
"subst": "",
"xsdb": "Matching commands and categories\n\nxsdbserver start      - Start XSDB command server.\nxsdbserver stop       - Stop XSDB command server.\nxsdbserver disconnect - Disconnect active XSDB server connection.\nxsdbserver version    - Return XSDB command server version.\n",
"dow": "NAME\n    dow - Download ELF and binary file to target.\n\nSYNOPSIS\n    dow [options] <file>\n        Download ELF file <file> to active target.\n\n    dow -data <file> <addr>\n        Download binary file <file> to active target address\n        specified by <addr>.\n\nOPTIONS\n    -clear\n        Clear uninitialized data (bss).\n\n    -skip-tcm-clear\n        When the R5 elfs are part of the PDI and use TCM, PLM initializes TCM\n        before loading the elfs. Debugger does the same when the elfs are loaded\n        through debugger, so that TCM banks are initialized properly. Use this\n        option to skip  initializing the TCM.\n\n    -keepsym\n        Keep previously downloaded ELFs in the list of symbol files. Default\n        behavior is to clear the old symbol files while downloading an ELF.\n\n    -force\n        Overwrite access protection. By default, accesses to reserved and invalid\n        address ranges are blocked.\n\n    -bypass-cache-sync\n        Do not flush/invalidate CPU caches during ELF download. Without this\n        option, the debugger flushes/invalidates caches to make sure caches are\n        in sync.\n\n    -relocate-section-map <addr>\n        Relocate the address map of the program sections to <addr>. This option\n        should be used when the code is self-relocating, so that the debugger\n        can find debug symbol information for the code. <addr> is the relative\n        address, to which all the program sections are relocated.\n\n    -vaddr\n        Use <vaddr> from the ELF program headers while downloading the ELF. This\n        option is valid only for ELF files.\n\nRETURNS\n    Nothing.\n\n",
"pwd": "",
"setlib": "",
"yocto": "",
"bpdisable": "NAME\n    bpdisable - Disable breakpoints/watchpoints.\n\nSYNOPSIS\n    bpdisable <id-list> | -all\n        Disable the breakpoints/watchpoints specified by <id-list> or\n        disable all the breakpoints when the -all option is used.\n\nOPTIONS\n    -all\n        Disable all breakpoints.\n\nEXAMPLE\n    bpdisable 0\n        Disable breakpoint 0.\n\n    bpdisable 1 2\n        Disable breakpoints 1 and 2.\n\n    bpdisable -all\n        Disable all breakpoints.\n\nRETURNS\n    Nothing, if the breakpoint is disabled successfully.\n    Error string, if the breakpoint specified by <id> is not set.\n\n",
"petalinux-build": "",
"domain": "NAME\n    domain - Create, configure, list and report domains.\n\nSYNOPSIS\n    domain <sub-command> [options]\n        Create a domain, or perform various other operations on the domain,\n        based on the sub-command specified.\n        Following sub-commands are supported.\n            active - Set/get the active domain.\n            config - Configure the properties of a domain.\n            create - Create a domain in the active platform.\n            list   - List all the domains in active platform.\n            report - Report the details of a domain.\n            remove - Delete a domain.\n        Type 'help' followed by 'app sub-command', or 'app sub-command' followed\n        by '-help' for more details.\n\nOPTIONS\n    Depends on the sub-command. Refer to the sub-command help for details.\n\nEXAMPLE\n    Refer to the sub-command help for details.\n\nRETURNS\n    Depends on the sub-command. Refer to the sub-command help for details.\n\n",
"get_configurable_ip": "",
"unknown": "",
"lrange": "",
"getaddrmap": "NAME\n    getaddrmap - Get the address ranges of IP connected to processor.\n\nSYNOPSIS\n    getaddrmap <hw spec file> <processor-instance>\n        Return the address ranges of all the IP connected to the processor in a\n\ttabular format, along with details like size and access flags of all IP.\n\nOPTIONS\n    None.\n\nEXAMPLE\n    getaddrmap system.xsa ps7_cortexa9_0\n        Return the address map of peripherals connected to ps7_cortexa9_0.\n        system.xsa is the hw specification file exported from Vivado.\n\nRETURNS\n    If successful, this command returns the output of IPs and ranges.\n    Otherwise it returns an error.\n\n",
"bpenable": "NAME\n    bpenable - Enable breakpoints/watchpoints.\n\nSYNOPSIS\n    bpenable <id-list> | -all\n        Enable the breakpoints/watchpoints specified by <id-list> or\n\tenable all the breakpoints when -all option is used.\n\nOPTIONS\n    -all\n        Enable all breakpoints.\n\nEXAMPLE\n    bpenable 0\n        Enable breakpoint 0.\n\n    bpenable 1 2\n        Enable breakpoints 1 and 2.\n\n    bpenable -all\n        Enable all breakpoints.\n\nRETURNS\n    Nothing, if the breakpoint is enabled successfully.\n    Error string, if the breakpoint specified by <id> is not set.\n\n",
"auto_import": "",
"delete_channel": "",
"driver": "NAME\n    driver - Driver assignment to peripherals.\n\nSYNOPSIS\n    Declare, list drivers associated with peripheral.\n\nOPTIONS\n    -list\n         List the driver assignment for all the peripherals.\n\nEXAMPLE\n    driver -list\n       List the driver assignment for all the peripherals.\n\nRETURNS\n    If successful, this command returns nothing.\n    Otherwise it returns an error.\n\n",
"case": "",
"elfverify": "",
"petalinux-config": "",
"break": "Category commands\n\nbpadd     - Set a breakpoint/watchpoint.\nbpdisable - Disable breakpoints/watchpoints.\nbpenable  - Enable breakpoints/watchpoints.\nbplist    - List breakpoints/watchpoints.\nbpremove  - Remove breakpoints/watchpoints.\nbpstatus  - Print breakpoint/watchpoint status.\n\nType 'help' followed by above 'command', or the above 'command' followed by\n'-help' for more details\n",
"auto_execok": "",
"app": "NAME\n    app - Application project management.\n\nSYNOPSIS\n    app <sub-command> [options]\n        Create an application project, or perform various other operations on\n        the application project, based on <sub-command> specified.\n        Following sub-commands are supported.\n            build  - Build the application project.\n            clean  - Clean the application project.\n            config - Configure C/C++ build settings of the application project.\n            create - Create an application project.\n            list   - List all the application projects in workspace.\n            remove - Delete the application project.\n            report - Report the details of the application project.\n            switch - Switch application project to refer another platform.\n        Type 'help' followed by 'app sub-command', or 'app sub-command' followed\n        by '-help' for more details.\n\nOPTIONS\n    Depends on the sub-command. Refer to the sub-command help for details.\n\nEXAMPLE\n    Refer to the sub-command help for examples.\n\nRETURNS\n    Depends on the sub-command. Refer to the sub-command help for details.\n\n",
"pkg_mkIndex": "",
"linsert": "",
"loadipxact": "NAME\n    loadipxact - Load register definitions from ipxact file.\n\nSYNOPSIS\n    loadipxact [options] [ipxact-xml]\n        Load memory mapped register definitions from an ipxact-xml file, or\n        clear previously loaded definitions and return to built-in definitions,\n        or return the XML file that is currently loaded.\n\nOPTIONS\n    -clear\n        Clear definitions loaded from the ipxact file and return to built-in\n        definitions.\n\n    -list\n        Return the ipxact file that is currently loaded.\n\nNOTE\n    Select a target that supports physical memory accesses to load memory\n    mapped register definitions. For example, APU, RPU, PSU, and Versal targets\n    support physical memory accesses. Processor cores (A9, R5, A53, A72, etc.)\n    support virtual memory accesses.\n\nEXAMPLE\n    loadipxact <xml-file>\n        Load register definitions from <xml-file>. This file should be in ipxact\n        format.\n\n    loadipxact -clear\n        Clear previously loaded register definitions from an XML file, and\n        return to built-in definitions.\n\n    loadipxact -list\n        Return the XML file that is currently loaded.\n\nRETURNS\n    Nothing, if the ipxact file is loaded, or previously loaded definitions are\n    cleared successfully. Error string, if load/clear fails.\n    XML file path if -list option is used, and XML file is previously loaded.\n\n",
"catch": "",
"petalinux-util": "",
"u-boot": "",
"if": "",
"loadhw": "NAME\n    loadhw - Load a Vivado hardware design.\n\nSYNOPSIS\n    loadhw [options]\n        Load a Vivado hardware design, and set the memory map for the current\n        target. If the current target is a parent for a group of processors, the\n        memory map is set for all of its child processors. If current target is\n        a processor, the memory map is set for all the child processors of its\n        parent. This command returns the hardware design object.\n\nOPTIONS\n    -hw\n        Hardware design file.\n\n    -list\n        Return a list of open designs for the targets.\n\n    -mem-ranges [list {start1 end1} {start2 end2}]\n        List of memory ranges from which the memory map should be set. The\n        memory map is not set for the addresses outside these ranges. If this\n        option is not specified, the memory map is set for all the addresses in\n        the hardware design.\n\nEXAMPLE\n    targets -filter {name =~ 'APU'}; loadhw design.xsa\n        Load the hardware design named design.hdf and set the memory map for all\n        the child processors of the APU target.\n\n    targets -filter {name =~ 'xc7z045'}; loadhw design.xsa\n        Load the hardware design named design.hdf and set the memory map for all\n        the child processors for which xc7z045 is the parent.\n\nRETURNS\n    Design object, if the hardware design is loaded and the memory map is set\n    successfully.\n    Error string, if the hardware design cannot be opened.\n\n",
"join": "",
"lscript": "NAME\n    lscript - Create linker script.\n\nSYNOPSIS\n    lscript <sub-command> [options]\n        Create a linkerscript, or perform various other operations on\n        the linker script, based on the sub-command specified.\n        Following sub-commands are supported.\n            memory   - List of the memories supported by the active domain.\n            section  - Lists and edit the sections available.\n            def-mem  - Returns default memory for the section type.\n            generate - Generate a linker script.\n\n        Type 'help' followed by 'lscript sub-command', or 'lscript sub-command' followed\n        by '-help' for more details.    \n\nOPTIONS\n    Depends on the sub-command. Refer to the sub-command help for details.\n\nEXAMPLE\n    Refer to the sub-command help for details.\n\nRETURNS\n    Depends on the sub-command. Refer to the sub-command help for details.\n\n",
"petalinux-create": "",
"changebsp": "",
"hsiutils": "",
"bpstatus": "NAME\n    bpstatus - Print breakpoint/watchpoint status.\n\nSYNOPSIS\n    bpstatus <id>\n        Print the status of a breakpoint/watchpoint specified by <id>.\n        Status includes the target information for which the breakpoint is\n        active and also the breakpoint hit count or error message.\n\nOPTIONS\n    None.\n\nRETURNS\n    Breakpoint status, if the breakpoint exists.\n    Error string, if the breakpoint specified by <id> is not set.\n\n",
"mwr": "NAME\n    mwr - Memory write.\n\nSYNOPSIS\n    mwr [options] <address> <values> [num]\n        Write <num> data values from list of <values> to active target memory\n        address specified by <address>.\n        If <num> is not specified, all the <values> from the list are written\n        sequentially from the address specified by <address>.\n        If <num> is greater than the size of the <values> list, the last\n        word in the list is filled at the remaining address locations.\n\n    mwr [options] -bin -file <file-name> <address> [num]\n        Read <num> data values from a binary file and write to active target\n        memory address specified by <address>.\n        If <num> is not specified, all the data from the file is written\n\tsequentially from the address specified by <address>.\n\nOPTIONS\n    -force\n        Overwrite access protection. By default accesses to reserved and invalid\n        address ranges are blocked.\n\n    -bypass-cache-sync\n        Do not flush/invalidate CPU caches during memory write. Without this\n        option, the debugger flushes/invalidates caches to make sure caches are\n        in sync.\n\n    -size <access-size>\n        <access-size> can be one of the values below:\n        b = Bytes accesses\n        h = Half-word accesses\n        w = Word accesses\n        d = Double-word accesses\n        Default access size is w.\n        Address will be aligned to access-size before writing to memory, if the\n        '-unaligned-access' option is not used.\n        If the target does not support double-word access, the debugger uses\n        two word accesses. If number of data values to be written is more than\n        1, the debugger selects the appropriate access size. For example,\n        1. mwr -size b 0x0 {0x0 0x13 0x45 0x56}\n           Debugger writes one word to the memory, combining four bytes.\n        2. mwr -size b 0x0 {0x0 0x13 0x45}\n           Debugger writes one half-word and one byte to the memory,\n           combining the three bytes.\n        3. mwr 0x0 {0x0 0x13 0x45}\n           Debugger writes three words to the memory.\n\n        To write more than 64 bits of data, specify the number of data words\n        along with the address. Data written is in multiples of access size. For\n        example, to write 128 bits of data, run 'mwr -size d <addr> 2' or\n        'mwr -size w <addr> 4'.\n\n    -bin\n        Read binary data from a file and write it to the target address space.\n\n    -file <file-name>\n        File from which binary data is read, to write to the target address\n        space.\n\n    -address-space <name>\n        Access specified memory space instead default memory space of\n        current target.\n\n        For Arm DAP targets, address spaces DPR, APR, and AP<n> can be\n        used to access DP registers, AP registers, and MEM-AP\n        addresses respectively. For backwards compatibility, the -arm-dap\n        and -arm-ap options can be used as shorthand for\n        '-address-space APR' and '-address-space AP<n>' respectively.\n        The APR address range is 0x0 - 0xfffc, where the higher eight bits\n        select an AP and the lower eight bits are the register address for\n        that AP.\n\n    -unaligned-accesses\n        Memory address is not aligned to access size before performing\n        a write operation. Support for unaligned accesses is target\n        architecture dependent. If this option is not specified, addresses\n        are automatically aligned to access size.\n\nNOTE\n    Select an APU target to access Arm DAP and MEM-AP address space.\n\nEXAMPLE\n    mwr 0x0 0x1234\n        Write 0x1234 to address 0x0.\n\n    mwr 0x0 {0x12 0x23 0x34 0x45}\n        Write four words from the list of values to address 0x0.\n\n    mwr 0x0 {0x12 0x23 0x34 0x45} 10\n        Write four words from the list of values to address 0x0\n        and fill the last word from the list at the remaining six\n        address locations.\n\n    mwr -size b 0x1 {0x1 0x2 0x3} 3\n        Write three bytes from the list at address 0x1.\n\n    mwr -size h 0x2 {0x1234 0x5678} 2\n        Write two half-words from the list at address 0x2.\n\n    mwr -bin -file mem.bin 0 100\n        Read 100 words from binary file mem.bin and write the data at\n        target address 0x0.\n\n    mwr -arm-dap 0x100 0x80000042\n        Write 0x80000042 to APB-AP CSW on Zynq.\n        The higher eight bits (0x1) select the APB-AP and the lower eight bits\n        (0x0) are the address of CSW.\n\n    mwr -arm-dap 0x04 0xf8000120\n        Write 0xf8000120 to AHB-AP TAR on Zynq.\n        The higher eight bits (0x0) select the AHB-AP and the lower eight bits\n        (0x4) are the address of TAR.\n\n    mwr -arm-ap 1 0x80090088 0x03186003\n        Write 0x03186003 to address 0x80090088 on DAP APB-AP.\n        AP 1 selects the APB-AP.\n        0x80090088 on APB-AP corresponds to DBGDSCR of Cortex-A9#0, on Zynq.\n\n    mwr -arm-ap 0 0xe000d000 0x80020001\n        Write 0x80020001 to address 0xe000d000 on DAP AHB-AP.\n        AP 0 selects the AHB-AP.\n        0xe000d000 on AHB-AP corresponds to the QSPI device on Zynq.\n\nRETURNS\n    Nothing, if successful.\n    Error string, if the target memory cannot be written.\n\n",
"format": "",
"package": "",
"binary": "",
"get_context_data": "",
"trace": "",
"updatehw": "",
"after": "",
"flush": "",
"bpadd": "NAME\n    bpadd - Set a breakpoint/watchpoint.\n\nSYNOPSIS\n    bpadd <options>\n        Set a software or hardware breakpoint at address, function or\n        <file>:<line>, or set a read/write watchpoint, or set a cross-trigger\n        breakpoint.\n\nOPTIONS\n    -addr <breakpoint-address>\n        Specify the address at which the breakpoint should be set.\n\n    -file <file-name>\n        Specify the <file-name> in which the breakpoint should be set.\n\n    -line <line-number>\n        Specify the <line-number> within the file where the breakpoint should be\n        set.\n\n    -type <breakpoint-type>\n        Specify the breakpoint type\n        <breakpoint-type> can be one of the values below:\n        auto = Auto-breakpoint type is chosen by the hw_server/TCF agent.\n               This is the default type.\n        hw   = hardware breakpoint.\n        sw   = software breakpoint.\n\n    -mode <breakpoint-mode>\n        Specify the access mode that will trigger the breakpoint.\n        <breakpoint-mode> can be a bitwise OR of the values below:\n        0x1 is triggered by a read from the breakpoint location.\n        0x2 is triggered by a write to the breakpoint location.\n        0x4 is triggered by an instruction execution at the breakpoint location.\n               This is the default for line and address breakpoints.\n        0x8 is triggered by a data change (not an explicit write) at the\n               breakpoint location.\n\n    -enable <mode>\n        Specify initial enablement state of breakpoint.  When <mode>\n        is 0 the breakpoint is disabled, otherwise the breakpoint is\n        enabled.  The default is enabled.\n\n    -ct-input <list> -ct-output <list>\n        Specify input and output cross triggers.  <list> is a list of\n        numbers identifying the cross trigger pin.  For Zynq 0-7 it is\n        CTI for core 0, 8-15 is CTI for core 1, 16-23 is CTI ETB and\n        TPIU, and 24-31 is CTI for FTM.\n\n    -skip-on-step <value>\n        Specify the trigger behaviour on stepping. This option is only\n        applicable for cross trigger breakpoints and when DBGACK is\n        used as breakpoint input.\n        0 = trigger every time core is stopped (default).\n        1 = suppress trigger on stepping over a code breakpoint.\n        2 = suppress trigger on any kind of stepping.\n\n    -properties <dict>\n        Specify advanced breakpoint properties.\n\n    -meta-data <dict>\n        Specify metadata of advanced breakpoint properties.\n\n    -target-id <id>\n        Specify a target ID for which the breakpoint should be set. A breakpoint\n        can be set for all the targets by specifying the <id> as 'all'.\n        If this option is not used, the breakpoint is set for the active\n        target selected through targets command. If there is no active target,\n        the breakpoint is set for all targets.\n\nNOTE\n    Breakpoints can be set in XSDB before connecting to hw_server/TCF agent.\n    If there is an active target when a breakpoint is set, the breakpoint\n    will be enabled only for that active target. If there is no active target,\n    the breakpoint will be enabled for all the targets. The target-id option can\n    be used to set a breakpoint for a specific target, or all targets.\n    An address breakpoint or a file:line breakpoint can also be set without the\n    options -addr, -file, or -line. For address breakpoints, specify the address\n    as an argument, after all other options. For file:line breakpoints, specify\n    the file name and line number in the format <file>:<line>, as an argument,\n    after all other options.\n\nEXAMPLE\n    bpadd -addr 0x100000\n        Set a Breakpoint at address 0x100000.\n        Breakpoint type is chosen by hw_server/TCF agent.\n\n    bpadd -addr &main\n        Set a function Breakpoint at main.\n        Breakpoint type is chosen by hw_server/TCF agent.\n\n    bpadd -file test.c -line 23 -type hw\n        Set a hardware breakpoint at test.c:23.\n\n    bpadd -target-id all 0x100\n        Set a breakpoint for all targets, at address 0x100.\n\n    bpadd -target-id 2 test.c:23\n        Set a breakpoint for target 2, at line 23 in test.c.\n\n    bpadd -addr &fooVar -type hw -mode 0x3\n        Set a read/write watchpoint on variable fooVar.\n\n    bpadd -ct-input 0 -ct-output 8\n        Set a cross trigger to stop Zynq core 1 when core 0 stops.\n\nRETURNS\n    Breakpoint id or an error if invalid target id is specified.\n\n",
"closebsp": "",
"system": "",
"continue": "",
"builtin_kernel": "",
"foreach": "",
"setdriver": "",
"createbsp": "",
"createhw": "",
"get_param_value": "",
"memmap": "NAME\n    memmap - Modify memory map.\n\nSYNOPSIS\n    memmap <options>\n        Add/remove a memory map entry for the active target.\n\nOPTIONS\n    -addr <memory-address>\n        Address of the memory region that should be added/removed from\n        the target's memory map.\n\n    -alignment <bytes>\n        Force alignment during memory accesses for a memory region. If alignment\n        is not specified, default alignment is chosen during memory accesses.\n\n    -size <memory-size>\n        Size of the memory region.\n\n    -flags <protection-flags>\n        Protection flags for the memory region.\n        <protection-flags> can be a bitwise OR of the values below:\n        0x1  = Read access is allowed.\n        0x2  = Write access is allowed.\n        0x4  = Instruction fetch access is allowed.\n    Default value of <protection-flags> is 0x3 (Read/Write Access).\n\n    -list\n        List the memory regions added to the active target's memory map.\n\n    -clear\n        Specify whether the memory region should be removed from the target's\n        memory map.\n\n    -relocate-section-map <addr>\n        Relocate the address map of the program sections to <addr>. This option\n        should be used when the code is self-relocating, so that the debugger\n        can find the debug symbol info for the code. <addr> is the relative\n        address, to which all the program sections are relocated.\n\n    -osa\n        Enable OS awareness for the symbol file.\n        Fast process start and fast stepping options are turned off by default.\n        These options can be enabled using the <osa> command. See 'help osa' for\n        more details.\n\n    -properties <dict>\n        Specify advanced memory map properties.\n\n    -meta-data <dict>\n        Specify meta-data of advanced memory map properties.\n\nNOTE\n    Only the memory regions previously added through the memmap command can\n    be removed.\n\nEXAMPLE\n    memmap -addr 0xfc000000 -size 0x1000 -flags 3\n        Add the memory region 0xfc000000 - 0xfc000fff to the target's memory map.\n        Read/Write accesses are allowed to this region.\n\n    memmap -addr 0xfc000000 -clear\n        Remove the previously added memory region at 0xfc000000 from the\n        target's memory map.\n\nRETURNS\n    Nothing, while setting the memory map. A list of memory maps when the -list\n    option is used.\n\n",
"lrepeat": "",
"pconfig": "",
"regenbsp": "",
"unset": "",
"jtagterminal": "NAME\n    jtagterminal - Start/stop JTAG-based hyperterminal.\n\nSYNOPSIS\n    jtagterminal [options]\n        Start/stop a JTAG-based hyperterminal to communicate with the\n        Arm DCC or MDM UART interface.\n\nOPTIONS\n    -start\n        Start the JTAG UART terminal. This is the default option.\n\n    -stop\n        Stop the JTAG UART terminal.\n\n    -socket\n        Return the socket port number instead of starting the terminal.\n        External terminal programs can be used to connect to this port.\n\nNOTE\n    Select a MDM or Arm/MicroBlaze processor target before running this command.\n\nRETURNS\n    Socket port number.\n\n",
"interp": "",
"lindex": "",
"decode_event_counters": "",
"get_context_properties": "",
"openhw": "NAME\n    openhw - Open a hardware design.\n\nSYNOPSIS\n    openhw <hw-proj | xsa file>\n        Open a hardware design exported from Vivado.\n        XSA file exported from Vivado, or the hardware project created\n\tusing 'createhw' command can be passed as argument.\n\nOPTIONS\n    None\n\nEXAMPLE\n    openhw ZC702_hw_platform\n        Open the hardware project ZC702_hw_platform.\n\n    openhw /tmp/wrk/hw1/system.xsa\n        Open the hardware project corresponding to the system.xsa.\n\nRETURNS\n    If successful, this command returns nothing.\n    Otherwise it returns an error.\n\n",
"getprojects": "",
"eof": "",
"getlibs": "",
"list": "",
"setws": "NAME\n    setws - Set Vitis workspace.\n\nSYNOPSIS\n    setws [OPTIONS] [path]\n        Set Vitis workspace to <path>, for creating projects.\n        If <path> does not exist, then the directory is created.\n        If <path> is not specified, then current directory is used.\n\nOPTIONS\n    -switch <path>\n        Close existing workspace and switch to new workspace.\n\nEXAMPLE\n    setws /tmp/wrk/wksp1\n       Set the current workspace to /tmp/wrk/wksp1.\n\n    setws -switch /tmp/wrk/wksp2\n       Close the current workspace and switch to new workspace /tmp/wrk/wksp2.\n\nRETURNS\n    Nothing if the workspace is set successfully.\n    Error string, if the path specified is a file.\n\n",
"init_ps": "NAME\n    init_ps - Run PS initialization sequence.\n\nSYNOPSIS\n    init_ps <init_data>\n        Initialize PS by running initalization sequence specified by init_data.\n        The init_data contains mask_write, mask_poll and mask_delay commands in\n        meta data format. mask_delay adds delay in milli seconds\n\nNOTE\n    This is an helper command for initializing the PS through ps*_init.tcl and\n    is not recommended for external usage\n\nEXAMPLE\n    set init_data {\n        mask_write 0 0x00001FFF 0x00000001\n        mask_delay 1\n        mask_poll 4 1 1\n    }\n    init_ps [subst {$init_data}]\n\nRETURNS\n    Nothing, if successful.\n    Error string, if the memory address cannot be accessed.\n\n",
"auto_load_index": "",
"get_debug_targets_cache_client": "",
"enable_info_messages": "",
"fblocked": "",
"lsearch": "",
"mb_drrd": "NAME\n    mb_drrd - Read from MicroBlaze Debug Register.\n\nSYNOPSIS\n    mb_drrd [options] <cmd> <bitlen>\n        Read a MicroBlaze Debug Register available on MDM. cmd is\n        8-bit MDM command to access a Debug Register.  bitlen is the\n        register width.  Returns hex register value.\n\nOPTIONS\n    -target-id <id>\n        Specify a target id representing MicroBlaze instance to\n        access.  If this option is not used and -user is not\n        specified, then the current target is used.\n\n    -user <bscan number>\n        Specify user bscan port number.\n\n    -which <instance>\n        Specify MicroBlaze instance number.\n\nEXAMPLE\n    mb_drrd 3 28\n        Read MB Status Reg.\n\nRETURNS\n    Register value, if successful.\n\n",
"builtin_bsp": "",
"proc": "",
"lappend": "",
"builtin_uboot": "",
"checkvalidrmxsa": "NAME\n    checkvalidrmxsa - Check if RM XSA is\n    suitable for static XSA.\n\nSYNOPSIS\n    checkvalidrmxsa -hw <static hw spec file> -rm-hw <rm hw spec file>\n        To check if the RM XSA is suitable to work with the static hardware XSA.\n\nOPTIONS\n    None.\n\nEXAMPLE\n    checkvalidrmxsa -hw static.xsa -rm-hw rm.xsa\n        Returns true if RM XSA can be used along with the static XSA.\n\nRETURNS\n    If successful, returns true if the RM hardware XSA is a fit for the static hardware XSA.\n    Returns false if not.\n    Otherwise, it returns an error.\n\n",
"sdk": "",
"disconnect": "NAME\n    disconnect - Disconnect from hw_server/TCF agent.\n\nSYNOPSIS\n    disconnect\n        Disconnect from active channel.\n\n    disconnect <channel-id>\n        Disconnect from specified channel.\n\nRETURNS\n    Nothing, if the connection is closed.\n    Error string, if invalid channel-id is specified.\n\n",
"configbsp": "",
"verify": "NAME\n    verify - Verify if ELF/binary file is downloaded correctly to target.\n\nSYNOPSIS\n    verify [options] <file>\n        Verify if the ELF file specified by <file> is downloaded correctly to\n        the active target.\n\n    verify -data <file> <addr>\n        Verify if the binary file specified by <file> is downloaded correctly to\n        the active target address specified by <addr>.\n\nOPTIONS\n    -force\n        Overwrite access protection. By default accesses to reserved and invalid\n        address ranges are blocked.\n\n    -vaddr\n        Use <vaddr> from the ELF program headers while verifying the ELF data.\n        This option is valid only for ELF files.\n\nRETURNS\n    Nothing, if successful.\n    Error string, if the memory address cannot be accessed or if there is a mismatch.\n\n",
"get_ctx_data": "",
"plnx-install-path": "",
"fconfigure": "",
"xsdbserver": "Matching commands and categories\n\nxsdbserver start      - Start XSDB command server.\nxsdbserver stop       - Stop XSDB command server.\nxsdbserver disconnect - Disconnect active XSDB server connection.\nxsdbserver version    - Return XSDB command server version.\n",
"help": "",
"switch": "",
"auto_qualify": "",
"hsi": "Category commands\n\nhsi add_library            - Add software library to software design.\nhsi close_hw_design        - Close a HW design.\nhsi close_sw_design        - Close a software design.\nhsi create_comp_param      - Add parameter.\nhsi create_dt_node         - Create a DT Node.\nhsi create_dt_tree         - Create a DT tree.\nhsi create_node            - Add node.\nhsi create_property        - Create property for class of object(s).\nhsi create_sw_design       - Create a software design.\nhsi current_dt_tree        - Set or get current tree.\nhsi current_hw_design      - Set or get current hardware design.\nhsi current_sw_design      - Get or set current software design.\nhsi delete_objs            - Delete specified objects.\nhsi generate_app           - Generates Template Application.\nhsi generate_bsp           - Generates Board Support Package.\nhsi generate_target        - Generates Target.\nhsi get_arrays             - Get a list of software Arrays.\nhsi get_cells              - Get a list of cells.\nhsi get_comp_params        - Get a list of parameters.\nhsi get_drivers            - Get a list of software driver instances.\nhsi get_dt_nodes           - Get a list of DT node objects.\nhsi get_dt_trees           - Get a list of dts trees created.\nhsi get_fields             - Get a list of fields of a register.\nhsi get_hw_designs         - Get a list of hardware designs opened.\nhsi get_hw_files           - Get a list of hardware design supporting files.\nhsi get_intf_nets          - Get a list of interface nets.\nhsi get_intf_pins          - Get a list of interface pins.\nhsi get_intf_ports         - Get a list of interface ports.\nhsi get_libs               - Get a list of software libraries.\nhsi get_mem_ranges         - Get a list of memory ranges.\nhsi get_msg_config         - Returns the current message count, limit, or message\n                                configuration rules previously defined by set_msg_config command.\nhsi get_nets               - Get a list of nets.\nhsi get_nodes              - Get a list of child nodes.\nhsi get_os                 - Get OS in the software design.\nhsi get_param              - Get a parameter value.\nhsi get_pins               - Get a list of pins.\nhsi get_ports              - Get a list of external ports.\nhsi get_property           - Get properties of object.\nhsi get_registers          - Get a list of software registers.\nhsi get_sw_cores           - Get a list of software cores like driver, library, os.\nhsi get_sw_designs         - Get a list of software designs opened.\nhsi get_sw_interfaces      - Get a list of software interfaces.\nhsi get_sw_processor       - Get processor of the software design.\nhsi list_features          - List available features.\nhsi list_param             - Get all parameter names.\nhsi list_property          - List properties of object.\nhsi list_property_value    - List legal property values of object.\nhsi load_features          - Load Tcl commands for a specified feature.\nhsi open_hw_design         - Open a hardware design from disk file.\nhsi open_sw_design         - Open a software design from disk file.\nhsi register_proc          - Register a Tcl proc with Vivado.\nhsi report_environment     - Report system information.\nhsi report_param           - Get information about all parameters.\nhsi report_property        - Report properties of object.\nhsi reset_msg_config       - Resets or removes a message control rule previously\n                                defined by the set_msg_config command.\nhsi reset_msg_count        - Reset message count.\nhsi reset_param            - Reset a parameter.\nhsi reset_property         - Reset property of object(s).\nhsi set_msg_config         - Configure how the Vivado tool will display and manage\n                                specific messages, based on message ID, string, or severity.\nhsi set_param              - Set a param value.\nhsi set_property           - Set property of object(s).\nhsi set_repo_path          - Set a list of software repository paths.\nhsi unregister_proc        - Unregister a previously registered Tcl proc.\nhsi write_ps_configuration - Save PS configurations to a file.\n\nType 'help' followed by above 'command', or the above 'command' followed by\n'-help' for more details\n",
"tclPkgUnknown": "",
"close": "NAME\n    closehw - Close a hardware design.\n\nSYNOPSIS\n    closehw <hw project | xsa file>\n        Close a hardware design that was opened using 'openhw' command.\n        XSA file exported from Vivado, or the hardware project created\n\tusing 'createhw' command can be passed as argument.\n\nOPTIONS\n    None.\n\nEXAMPLE\n    closehw ZC702_hw_platform\n       Close the hardware project ZC702_hw_platform.\n\n    closehw /tmp/wrk/hw1/system.xsa\n       Close the hardware project corresponding to the system.xsa.\n\nRETURNS\n    If successful, this command returns nothing.\n    Otherwise it returns an error.\n\n",
"jtag": "Category commands\n\njtag claim             - Claim JTAG device.\njtag device_properties - Get/set device properties.\njtag disclaim          - Disclaim JTAG device.\njtag frequency         - Get/set JTAG frequency.\njtag lock              - Lock JTAG scan chain.\njtag sequence          - Create JTAG sequence object.\njtag servers           - List, open or close JTAG servers.\njtag skew              - Get/set JTAG skew.\njtag targets           - List JTAG targets or switch between JTAG targets.\njtag unlock            - Unlock JTAG scan chain.\n\nType 'help' followed by above 'command', or the above 'command' followed by\n'-help' for more details\n",
"updatemss": "",
"lreverse": "",
"mbprofile": "NAME\n    mbprofile - Configure and run the MB profiler.\n\nSYNOPSIS\n    mbprofile [options]\n        Configure and run the MB profiler, a non-intrusive profiler\n        for profiling the application running on MicroBlaze. The output file is\n        generated in gmon.out format. The results can be viewed using\n        the gprof editor. In case of cycle count, an annotated disassembly\n        file is also generated clearly marking the time taken for execution\n        of instructions.\n\nOPTIONS\n    -low <addr>\n        Low address of the profiling address range.\n\n    -high <addr>\n        High address of the profiling address range.\n\n    -freq <value>\n        MicroBlaze clock frequency in Hz.\n        Default is 100 MHz.\n\n    -count-instr\n        Count number of executed instructions.\n        By default, the number of clock cycles of executed instructions are\n        counted.\n\n    -cumulate\n        Cumulative profiling.\n        Profiling without clearing the profiling buffers.\n\n    -start\n        Enable and start profiling.\n\n    -stop\n        Disable/stop profiling.\n\n    -out <filename>\n        Output profiling data to file. <filename> Name of the output file for\n        writing the profiling data. If the file name is not specified, profiling\n        data is written to gmon.out.\n\nEXAMPLE\n    mbprofile -low 0x0 -high 0x3FFF\n        Configure the mb-profiler with address range 0x0 to 0x3FFF for\n        profiling to count the clock cycles of executed instructions.\n\n    mbprofile -start\n        Enable and start profiling.\n\n    mbprofile -stop -out testgmon.out\n        Output the profile data in testgmon.out.\n\n    mbprofile -count-instr\n        Configure the mb-profiler to profile for entire program address\n        range to count the number of instructions executed.\n\nRETURNS\n    Depends on options used.\n    -low, -high, -freq, -count-instr, -start, -cumulate\n        Returns nothing on successful configuration.\n        Error string, in case of error.\n\n    -stop\n        Returns nothing, and generates a file.\n        Error string, in case of error.\n\n",
"builtin_bifgen": "",
"profile": "NAME\n    profile - Configure and run the GNU profiler.\n\nSYNOPSIS\n    profile [options]\n        Configure and run the GNU profiler. Profiling must be enabled while\n        building the BSP and application to be profiled.\n\nOPTIONS\n    -freq <sampling-freq>\n        Sampling frequency.\n\n    -scratchaddr <addr>\n        Scratch memory for storing the profiling related data. It needs to be\n        assigned carefully, because it should not overlap with the program\n        sections.\n\n    -out <file-name>\n        Name of the output file for writing the profiling data. This option also\n        runs the profiler and collects the data.\n        If a file name is not specified, profiling data is written to gmon.out.\n\nEXAMPLE\n    profile -freq 10000 -scratchaddr 0\n        Configure the profiler with a sampling frequency of 10000\n        and scratch memory at 0x0.\n\n    profile -out testgmon.out\n        Output the profile data in testgmon.out.\n\nRETURNS\n    Depends on options used.\n\n    -scratchaddr, -freq\n        Returns nothing on successful configuration.\n        Error string, in case of error.\n\n    -out\n        Returns nothing, and generates a file.\n        Error string, in case of error.\n\n",
"get_context_datatypes": "",
"set": "NAME\n    setws - Set Vitis workspace.\n\nSYNOPSIS\n    setws [OPTIONS] [path]\n        Set Vitis workspace to <path>, for creating projects.\n        If <path> does not exist, then the directory is created.\n        If <path> is not specified, then current directory is used.\n\nOPTIONS\n    -switch <path>\n        Close existing workspace and switch to new workspace.\n\nEXAMPLE\n    setws /tmp/wrk/wksp1\n       Set the current workspace to /tmp/wrk/wksp1.\n\n    setws -switch /tmp/wrk/wksp2\n       Close the current workspace and switch to new workspace /tmp/wrk/wksp2.\n\nRETURNS\n    Nothing if the workspace is set successfully.\n    Error string, if the path specified is a file.\n\n",
"read": "NAME\n    readjtaguart - Start/stop reading from JTAG UART.\n\nSYNOPSIS\n    readjtaguart [options]\n        Start/stop reading from the Arm DCC or MDM UART TX interface.\n        The JTAG UART output can be printed on stdout or redirected to a file.\n\nOPTIONS\n    -start\n        Start reading the JTAG UART output.\n\n    -stop\n        Stop reading the JTAG UART output.\n\n    -handle <file-handle>\n        Specify the file handle to which the data should be redirected.\n        If no file handle is given, data is printed on stdout.\n\nNOTE\n    Select an MDM or Arm processor target before running this command.\n\n    While running a script in non-interactive mode, the output from JTAG UART\n    cannot be written to the log until 'readjtaguart -stop' is used.\n\nEXAMPLE\n    readjtaguart\n        Start reading from the JTAG UART and print the output on stdout.\n\n    set fp [open test.log w]; readjtaguart -start -handle $fp\n        Start reading from the JTAG UART and print the output to test.log.\n\n    readjtaguart -stop\n        Stop reading from the JTAG UART.\n\nRETURNS\n    Nothing, if successful.\n    Error string, if data cannot be read from the JTAG UART.\n\n",
"bplist": "NAME\n    bplist - List breakpoints/watchpoints.\n\nSYNOPSIS\n    bplist\n        List all the breakpoints/watchpoints along with brief status\n        for each breakpoint and the target on which it is set.\n\nRETURNS\n    List of breakpoints.\n\n",
"seek": "",
"while": "",
"get_context_hierarchy": "",
"library": "NAME\n    library - Library project management.\n\nSYNOPSIS\n    library <sub-command> [options]\n        Create a library project, or perform various other operations on\n        the library project, based on the sub-command specified.\n        Following sub-commands are supported.\n            build  - Build the library project.\n            clean  - Clean the library project.\n            config - Configure C/C++ build settings of the library project.\n            create - Create a library project.\n            list   - List all the library projects in workspace.\n            remove - Delete the library project.\n            report - Report the details of the library project.\n        Type 'help' followed by 'library sub-command', or 'library sub-command' followed\n        by '-help' for more details.\n\nOPTIONS\n    Depends on the sub-command.\n\nEXAMPLE\n    See sub-command help for examples.\n\nRETURNS\n    Depends on the sub-command.\n\n",
"linker": "",
"sysconfig": "",
"gdbremote": "Matching commands and categories\n\ngdbremote connect    - Connect to GDB remote server.\ngdbremote disconnect - Disconnect from GDB remote server.\n",
"mask_poll": "NAME\n    mask_poll - Read an address and poll the bit specified by mask.\n\nSYNOPSIS\n    mask_poll <addr> <mask> [expected-value] [sleep] [timeout]\n        Read the address specified by addr and poll until the bit specified by\n        mask is set to 1 or until timeout. If expected-value is specified, then\n        compare the bit[s] aginst the expected value. A time delay specified by\n        sleep is added between two successive poll cycles. Default sleep is set\n        to 10 msec, and timeout is set to 100 iterations.\n\nNOTE\n    This is an helper command for initializing the PS through ps*_init.tcl and\n    is not recommended for external usage\n\nRETURNS\n    Nothing, if successful.\n    Error on timeout or if the memory address cannot be accessed.\n\n",
"getos": "",
"mbtrace": "NAME\n    mbtrace - Configure and run MB trace.\n\nSYNOPSIS\n    mbtrace [options]\n        Configure and run MB program and event trace for tracing the\n        application running on MB. The output is the disassembly of\n        the executed program.\n\nOPTIONS\n    -start\n        Enable and start trace. After starting trace the execution of the\n        program is captured for later output.\n\n    -stop\n        Stop and output trace.\n\n    -con\n        Output trace after resuming execution of active target until a\n        breakpoint is hit. At least one breakpoint or watchpoint must be\n        set to use this option.\n        This option is only available with embedded trace.\n\n    -stp\n        Output trace after resuming execution of the active target until\n        control reaches instruction that belongs to different line of\n        source code.\n\n    -nxt\n        Output trace after resuming execution of the active target until\n        control reaches instruction that belongs to a different line of\n        source code, but runs any functions called at full speed.\n\n    -out <filename>\n        Output trace data to a file.\n        <filename> Name of the output file for writing the trace data.\n        If not specified, data is output to standard output.\n\n    -level <level>\n        Set the trace level to 'full', 'flow', 'event', or 'cycles'.\n        If not specified, 'flow' is used.\n\n    -halt\n        Set to halt program execution when the trace buffer is full.\n        If not specified, trace is stopped but program execution continues.\n\n    -save\n        Set to enable capture of load and get instruction new data value.\n\n    -low <addr>\n        Set low address of the external trace buffer address range.\n        The address range must indicate an unused accessible memory space.\n        Only used with external trace.\n\n    -high <addr>\n        Set high address of the external trace buffer address range.\n        The address range must indicate an unused accessible memory space.\n        Only used with external trace.\n\n    -format <format>\n        Set external trace data format to 'mdm', 'ftm', or 'tpiu'. If format\n        is not specified, 'mdm' is used. The 'ftm' and 'tpiu' formats are\n        output by Zynq-7000 PS. Only used with external trace.\n\nEXAMPLE\n    mbtrace -start\n        Enable and start trace.\n\n    mbtrace -start -level full -halt\n        Enable and start trace, configuring to save complete trace instead of\n        only program flow and to halt execution when trace buffer is full.\n\n    mbtrace -stop\n        Stop trace and output data to standard output.\n\n    mbtrace -stop -out trace.out\n        Stop trace and output data to trace.out.\n\n    mbtrace -con -out trace.out\n        Continue execution and output data to trace.out.\n\nRETURNS\n    Depends on options used.\n    -start, -out, -level, -halt -save, -low, -high, -format\n        Returns nothing on successful configuration.\n        Error string, in case of error.\n\n    -stop, -con, -stp, -nxt\n        Returns nothing, and outputs trace data to a file or standard output.\n        Error string, in case of error.\n\n",
"rrd": "NAME\n    rrd - Read register for active target.\n\nSYNOPSIS\n    rrd [options] [reg]\n        Read registers or register definitions.\n        For a processor core target, the processor core register can be read.\n        For a target representing a group of processor cores, system registers\n        or IOU registers can be read.\n\nOPTIONS\n    -defs\n        Read register definitions instead of values.\n\n    -no-bits\n        Does not show bit fields along with register values. By default,\n\tbit fields are shown, when available.\n\nEXAMPLE\n    rrd\n        Read top level registers or groups.\n\n    rrd r0\n        Read register r0.\n\n    rrd usr r8\n        Read register r8 in group usr.\n\nRETURNS\n    Register names and values, or register definitions if successful.\n    Error string, if the registers cannot be read or if an invalid register is\n    specified.\n\n",
"load": "Matching commands and categories\n\nloadhw     - Load a Vivado hardware design.\nloadipxact - Load register definitions from ipxact file.\n",
"nxt": "NAME\n    nxt - Step over a line of source code.\n\nSYNOPSIS\n    nxt [count]\n        Resume execution of the active target until control reaches instruction\n        that belongs to a different line of source code, but runs any functions\n        called at full speed.\n        Error is returned if line number information not available.\n        If <count> is greater than 1, repeat <count> times.\n        Default value of count is 1.\n\nRETURNS\n    Nothing, if the target has stepped to the next source line.\n    Error string, if the target is already running or cannot be resumed.\n\n    An information message is printed on the console when the target stops at\n    the next address.\n\n",
"history": "",
"puts": "",
"get_stacktrace_children": "",
"bsp": "NAME\n    bsp - Configure BSP settings of a baremetal domain.\n\nSYNOPSIS\n    bsp <sub-command> [options]\n        Configure the BSP settings, including the library, driver, and OS version of a\n        active domain,  based on the sub-command specified.\n        Following sub-commands are supported.\n            config       - Modify the configurable parameters of BSP settings.\n            getdrivers   - List IP instance and its driver.\n            getlibs      - List the libraries from BSP settings.\n            getos        - List os details from BSP settings.\n            listparams   - List the configurable parameters of os/proc/library.\n            regenerate   - Regenerate BSP sources.\n            reload       - Revert the BSP settings to the earlier saved state.\n            write        - Save the BSP edits.\n            removelib    - Remove library from bsp settings.\n            setdriver    - Sets the driver for the given IP instance.\n            setlib       - Sets the given library.\n            setosversion - Sets version for the given OS.\n        Type 'help' followed by 'bsp sub-command', or 'bsp sub-command' followed\n        by '-help' for more details.\n\nOPTIONS\n    Depends on the sub-command. Refer to the sub-command help for details.\n\nEXAMPLE\n    Refer to the sub-command help for details.\n\nRETURNS\n    Depends on the sub-command. Refer to the sub-command help for details.\n\n",
"version": "NAME\n    version - Get Vitis or hw_server version.\n\nSYNOPSIS\n    version [options]\n        Get Vitis or hw_server version. When no option is specified,\n        the Vitis build version is returned.\n\nOPTIONS\n    -server\n        Get the hw_server build version for the active connection.\n\nRETURNS\n    Vitis or hw_server version, on success.\n    Error string, if server version is requested when there is no connection.\n\n",
"stpout": "NAME\n    stpout - Step out from current function.\n\nSYNOPSIS\n    stpout [count]\n        Resume execution of current target until control returns from current\n\tfunction.\n\tIf <count> is greater than 1, repeat <count> times.\n\tDefault value of count is 1.\n\nRETURNS\n    Nothing, if the target has stepped out of the current function.\n    Error if the target is already running or cannot be resumed.\n\n    An information message is printed on the console when the target stops at the next\n    address.\n\n",
"get_context_list": "",
"socket": "",
"tell": "",
"open": "NAME\n    openhw - Open a hardware design.\n\nSYNOPSIS\n    openhw <hw-proj | xsa file>\n        Open a hardware design exported from Vivado.\n        XSA file exported from Vivado, or the hardware project created\n\tusing 'createhw' command can be passed as argument.\n\nOPTIONS\n    None\n\nEXAMPLE\n    openhw ZC702_hw_platform\n        Open the hardware project ZC702_hw_platform.\n\n    openhw /tmp/wrk/hw1/system.xsa\n        Open the hardware project corresponding to the system.xsa.\n\nRETURNS\n    If successful, this command returns nothing.\n    Otherwise it returns an error.\n\n",
"builtin_rootfs": "",
"exec": "",
"pid": "",
"mb_drwr": "NAME\n    mb_drwr - Write to MicroBlaze debug register.\n\nSYNOPSIS\n    mb_drwr [options] <cmd> <data> <bitlen>\n        Write to the MicroBlaze debug register available on MDM. <cmd> is\n        an 8-bit MDM command to access a debug register.  <data> is the\n        register value and <bitlen> is the register width.\n\nOPTIONS\n    -target-id <id>\n        Specify a target id representing a MicroBlaze instance to\n        access.  If this option is not used and -user is not\n        specified, the current target is used.\n\n    -user <bscan number>\n        Specify user bscan port number.\n\n    -which <instance>\n        Specify MicroBlaze instance number.\n\nEXAMPLE\n    mb_drwr 1 0x282 10\n        Write to MB control register.\n\nRETURNS\n    Nothing, if successful.\n\n",
"stop": "NAME\n    stop - Stop active target.\n\nSYNOPSIS\n    stop\n        Suspend execution of active target.\n\nRETURNS\n    Nothing, if the target is suspended.\n    Error string, if the target is already stopped or cannot be stopped.\n\n    An information message is printed on the console when the target is suspended.\n\n",
"isstaticxsa": "NAME\n    isstaticxsa - Check if hardware design is a static XSA.\n\nSYNOPSIS\n    isstaticxsa <hw spec file>\n        Checks if the hardware design is a static XSA.\n\nOPTIONS\n    None.\n\nEXAMPLE\n    isstaticxsa static.xsa\n        Returns true if XSA is static.\n\nRETURNS\n    If successful, returns true if hardware design is static,\n    returns false if hardware design is not static.\n    Otherwise, it returns an error.\n\n",
"stpi": "NAME\n    stpi - Execute a machine instruction.\n\nSYNOPSIS\n    stpi [count]\n        Execute a single machine instruction. If the instruction is a function\n        call, stop at the first instruction of the function code.\n        If <count> is greater than 1, repeat <count> times.\n        Default value of count is 1.\n\nRETURNS\n    Nothing, if the target has single stepped.\n    Error if the target is already running or cannot be resumed.\n\n    An information message is printed on the console when the target stops at\n    the next address.\n\n",
"osa": "NAME\n    osa - Configure OS awareness for a symbol file.\n\nSYNOPSIS\n    osa -file <file-name> [options]\n        Configure OS awareness for the symbol file <file-name> specified.\n        If no symbol file is specified and only one symbol file exists in\n        target's memory map, that symbol file is used.\n        If no symbol file is specified and multiple symbol files exist in\n        target's memory map, an error is thrown.\n\nOPTIONS\n    -disable\n        Disable OS awareness for a symbol file. If this option is not specified,\n        OS awareness is enabled.\n\n    -fast-exec\n        Enable fast process start. New processes will not be tracked for debug\n        and are not visible in the debug targets view.\n\n    -fast-step\n        Enable fast stepping. Only the current process will be re-synced after\n        stepping. All other processes will not be resynced when this flag is\n\tturned on.\n\nNOTE\n    The <fast-exec> and <fast-step> options are not valid with disable option.\n\nEXAMPLE\n    osa -file <symbol-file> -fast-step -fast-exec\n        Enable OSA for <symbol-file> and turn on fast-exec and fast-step modes.\n\n    osa -disable -file <symbol-file>\n        Disable OSA for <symbol-file>.\n\nRETURNS\n    Nothing, if the OSA is configured successfully.\n    Error, if ambiguous options are specified.\n\n",
"boot": "",
"notify_newctxs": "",
"setosversion": "",
"device-tree": "",
"return": "",
"kernel": "",
"rst": "NAME\n    rst - Target reset.\n\nSYNOPSIS\n    rst [options]\n        Reset the active target.\n\nOPTIONS\n    -processor\n        Reset the active processor target.\n\n    -cores\n        Reset the active processor group. This reset type is supported only on\n        Zynq, Zynq UltraScale+ MPSoC, and Versal devices. A processor group is\n        defined as a set of processor cores and on-chip peripherals like OCM.\n\n    -dap\n        Reset Arm DAP. This reset type is supported only with targets that\n        represent Arm DAP. Examples of such targets are APU, RPU, PSU, and\n        Versal.\n\n    -system\n        Reset the active system. The is the default reset.\n\n    -srst\n        Generate system reset for active target. With JTAG, this is\n        done by generating a pulse on the SRST pin on the JTAG cable\n        associated with the active target.\n\n    -por\n        Generate power on reset for active target.  With JTAG, this is\n        done by generating a pulse on the POR pin on the JTAG cable\n        associated with the active target.\n\n    -ps\n        Generate PS only reset on Zynq UltraScale+ MPSoC. This is supported only\n        through MicroBlaze PMU target.\n\n    -stop\n        Suspend cores after reset. If this option is not specified, the debugger\n        choses the default action, which is to resume the cores for -system,\n        and suspend the cores for -processor, and -cores. This option is only\n        supported with the -processor, -cores, and -system options.\n\n    -start\n        Resume the cores after reset. See the description of the -stop option\n        for more details.\n\n    -endianness <value>\n        Set the data endianness to <value>. The following values are supported:\n        le - Little endian;\n        be - Big endian.\n        This option is supported with APU, RPU, A9, A53, and A72 targets. If\n        this option is not specified, the current configuration is not changed.\n\n    -code-endianness <value>\n        Set the instruction endianness to <value>. The following values are\n        supported:\n        le - Little endian;\n        be - Big endian.\n        This option is supported with APU, RPU, A9, A53, and A72 targets. If\n        this option is not specified, the current configuration is not changed.\n\n    -isa <isa-name>\n        Set ISA to <isa-name>. Supported isa-names are ARM/A32, A64, and Thumb.\n        This option is supported with APU, RPU, A9, A53, and A72 targets. If\n        this option is not specified, the current configuration is not changed.\n\n    -clear-registers\n        Clear CPU registers after a reset is triggered. This option is useful\n        while triggering a reset after the device is powered up. Otherwise,\n        debugger can end up reading invalid system addresses based on the\n        register contents. Clearing the registers will avoid unpredictable\n        behavior.\n        This option is supported for ARM targets, when used with '-processor'\n        and '-cores'.\n\n    -type <reset type>\n        The following reset types are supported:\n        pmc-por, pmc-srst, ps-por, ps-srst, pl-por, and pl-srst.\n        This option is supported only for Versal devices.\n\nNOTE\n    For Versal devices, the default subsystem is activated through IPI channel5,\n    before triggering the processor reset. This is needed because PLM does not\n    activate the subsystem when PS ELFs are not part of the PDI. If the IPI\n    channel is not enabled in the Vivado design, the subsystem cannot be\n    activated. This causes runtime issues if PM API are used.\n\nRETURNS\n    Nothing, if reset if successful.\n    Error string, if reset is unsupported.\n\n",
"error": "",
"split": "",
"tcf": "",
"export_to_ds5": "",
"array": "",
"lreplace": "",
"concat": "",
"bpremove": "NAME\n    bpremove - Remove breakpoints/watchpoints.\n\nSYNOPSIS\n    bpremove <id-list> | -all\n        Remove the breakpoints/watchpoints specified by <id-list> or\n        remove all the breakpoints when the -all option is used.\n\nOPTIONS\n    -all\n        Remove all breakpoints.\n\nEXAMPLE\n    bpremove 0\n        Remove breakpoint 0.\n\n    bpremove 1 2\n        Remove breakpoints 1 and 2.\n\n    bpremove -all\n        Remove all breakpoints.\n\nRETURNS\n    Nothing, if the breakpoint is removed successfully.\n    Error string, if the breakpoint specified by <id> is not set.\n\n",
"fcopy": "",
"mdm_drrd": "NAME\n    mdm_drrd - Read from MDM debug register.\n\nSYNOPSIS\n    mdm_drrd [options] <cmd> <bitlen>\n        Read an MDM debug register. <cmd> is an 8-bit MDM command to access\n        a debug register and <bitlen> is the register width.  Returns\n        hex register value.\n\nOPTIONS\n    -target-id <id>\n        Specify a target id representing the MicroBlaze debug module or\n        MicroBlaze instance to access.  If this option is not used and\n        -user is not specified, the current target is used.\n\n    -user <bscan number>\n        Specify user bscan port number.\n\nEXAMPLE\n    mdm_drrd 0 32\n        Read XMDC ID register.\n\nRETURNS\n    Register value, if successful.\n\n",
"builtin_platform": "",
"update": "",
"setup_hsm_environment": "",
"platform": "NAME\n    platform - Create, configure, list, and report platforms.\n\nSYNOPSIS\n    platform <sub-command> [options]\n        Create a platform project, or perform various other operations on\n        the platform project, based on the sub-command specified.\n        Following sub-commands are supported.\n            active   - Set or return the active platform.\n            clean    - Clean platform.\n            config   - Configure the properties of a platform.\n            create   - Create/define a platform.\n            generate - Build the platform.\n            list     - List all the platforms in workspace.\n            report   - Report the details of a platform.\n            read     - Read the platform settings from a file.\n            remove   - Delete the platform.\n            write    - Save the platform settings to a file.\n        Type 'help' followed by 'platform sub-command', or 'platform sub-command' followed\n        by '-help' for more details.\n\nOPTIONS\n    Depends on the sub-command. Refer to the sub-command help for details.\n\nEXAMPLE\n    Refer to the sub-command help for details.\n\nRETURNS\n    Depends on the sub-command. Refer to the sub-command help for details.\n\n",
"print": "NAME\n    print - Get or set the value of an expression.\n\nSYNOPSIS\n    print [options] [expression]\n        Get or set the value of an expression specified by <expression>.\n        The <expression> can include constants, local/global variables,\n        CPU registers, or any operator, but pre-processor macros defined\n        through #define are not supported. CPU registers can be specified\n        in the format {$r1}, where r1 is the register name.\n        Elements of complex data types, like structures, can be accessed\n        through the '.' operator. For example, the var1.int_type refers to the\n        int_type element in the var1 struct.\n        Array elements can be accessed through their indices. For example,\n        array1[0] refers to the element at index 0 in array1.\n\nOPTIONS\n    -add <expression>\n        Add the <expression> to the auto expression list. The values or\n        definitions of the expressions in the auto expression list are displayed\n        when the expression name is not specified. Frequently used expressions\n        should be added to the auto expression list.\n\n    -defs [expression]\n        Return the expression definitions like address, type, size, and RW\n        flags. Not all definitions are available for all the expressions.\n        For example, the address is available only for variables and not when\n        the expression includes an operator.\n\n    -dict [expression]\n        Return the result in Tcl dict format, with variable names as dict keys\n        and variable values as dict values. For complex data like structures,\n        names are in the form of parent.child.\n\n    -remove [expression]\n        Remove the expression from auto expression list. Only expressions\n        previously added to the list through -add option can be removed. When\n        the expression name is not specified, all the expressions in the\n        auto expression list are removed.\n\n    -set <expression>\n        Set the value of a variable. It is not possible to set the value of an\n        expression which includes constants or operators.\n\nEXAMPLE\n    print Int_Glob\n        Return the value of variable Int_Glob.\n\n    print -a Microseconds\n        Add the variable Microseconds to auto expression list and return\n        its value.\n\n    print -a Int_Glob*2 + 1\n        Add the expression (Int_Glob*2 + 1) to auto expression list and\n        return its value.\n\n    print tmp_var.var1.int_type\n        Return the value of int_type element in var1 struct, where var1\n        is a member of tmp_var struct.\n\n    print tmp_var.var1.array1[0]\n        Return the value of the element at index 0 in array array1. array1 is\n        a member of var1 struct, which is in turn a member of tmp_var struct.\n\n    print\n        Return the values of all the expressions in auto expression list.\n\n    print -defs\n        Return the definitions of all the expressions in auto expression list.\n\n    print -set Int_Glob 23\n        Set the value of the variable Int_Glob to 23.\n\n    print -remove Microseconds\n        Remove the expression Microseconds from auto expression list.\n\n    print {$r1}\n        Return the value of CPU register r1.\n\nRETURNS\n    The return value depends on the options used.\n\n    -add or <none>\n        Expression value(s)\n\n    -defs\n        Expression definition(s)\n\n    -remove or -set\n        Nothing.\n\n    Error string, if the expression value cannot be read or set.\n\n",
"for": "",
"append": "",
"auto_load": "",
"add_channel": "",
"petalinux-package": "",
"petalinux-boot": "",
"scan": "",
"removelib": "",
"builtin_domain": "",
"apply": "",
"ishwexpandable": "NAME\n    ishwexpandable - Check if hardware design is expandable.\n\nSYNOPSIS\n    ishwexpandable <hw spec file>\n        Checks if the hardware design is expandable or fixed.\n\nOPTIONS\n    None.\n\nEXAMPLE\n    ishwexpandable system.xsa\n        Returns true if XSA is expandable/extensible.\n\nRETURNS\n    If successful, returns true if hardware design is expandable/extensible,\n    returns false if hardware design is fixed.\n    Otherwise, it returns an error.\n\n",
"con": "NAME\n    con - Resume active target.\n\nSYNOPSIS\n    con [options]\n        Resume execution of active target.\n\nOPTIONS\n    -addr <address>\n        Resume execution from address specified by <address>.\n\n    -block\n        Block until the target stops or a timeout is reached.\n\n    -timeout <sec>\n        Timeout value in seconds.\n\nEXAMPLE\n    con -addr 0x100000\n        Resume execution of the active target from address 0x100000.\n\n    con -block\n        Resume execution of the active target and wait until the target stops.\n\n    con -block -timeout 5\n        Resume execution of the active target and wait until the target stops\n        or until the five second timeout is reached.\n\nRETURNS\n    Nothing, if the target is resumed.\n    Error string, if the target is already running or cannot be resumed or does\n    not halt within timeout after being resumed.\n\n    An information message is printed on the console when the target is resumed.\n\n",
"pmc": "NAME\n    pmc - IPI commands to PMC.\n\nSYNOPSIS\n    pmc [options] <command> <data>\n        Trigger IPI command specified by <command> to Versal PMC. <data> is one\n        or more arguments to the <command>.\n\n        Supported IPI commands are:\n            features <api-id>\n            get_device_id\n            get_board <addr max-size>\n\n            request_device <node-id> <capabilities> <qos> <ack-type>\n            release_device <node-id>\n            set_requirement <node-id> <capabilities> <qos> <ack-type>\n            self_suspend <node-id> <wakeup-latency> <power-state> <resume-addr>\n            request_suspend <subsystem-id> <ack-type> <wakeup-latency> <power-state>\n            request_wakeup <node-id> <resume-addr> <ack-type>\n            abort_suspend <abort-reason> <node-id>\n            setup_wakeup_source <subsystem-id> <node-id> <flag>\n            get_device_status <node-id>\n            device_ioctl <node-id> <ioctl-id>\n            set_max_latency <node-id> <latency>\n\n            reset_assert <node-id> <flag>\n            reset_get_state <node-id>\n\n            pin_control_request <node-id>\n            pin_control_release <node-id>\n            pin_get_fuction <node-id>\n            pin_set_fuction <node-id> <function-id>\n            pin_get_config_param <node-id> <param-id>\n            pin_set_config_param <node-id> <param-id> <param-value>\n\n            clock_enable <node-id>\n            clock_disable <node-id>\n            clock_get_state <node-id>\n            clock_set_divider <node-id> <divider>\n            clock_get_divider <node-id> resp <divider>\n            clock_set_parent <node-id> <parent-index>\n            clock_get_parent <node-id> resp <parent-index>\n\n            pll_set_param <node-id> <param-id> <param-value>\n            pll_set_param <node-id> <param-id> resp <param-value>\n            pll_set_mode <node-id> <pll-mode>\n            pll_get_mode <node-id> resp <pll-mode>\n\n            force_power_down <node-id> <ack-type>\n            system_shutdown <shutdown-type> <sub-type>\n\n        All the <addr> arguments can be 32-bit or 64-bit.\n        Refer to CDO specification for more details about each command.\n\n        Apart from these commands, a generic command is also supported.\n            generic [-response-size <num>] <command> <args>\n        <command> should be numeric value of the actual CDO command, for example\n        0x1030115 for get_board. <args> should be the arguments corresponding\n        to that command.\n        If the command is expected to return a response, then -response-size\n        should specify the number of words the command would return. This data\n        is returned as the command result.\n\nOPTIONS\n    -ipi\n        IPI buffer to be used to trigger the <command>. It can be in the range\n        of 0 - 5 for Versal. Default buffer is 0.\n        This buffer shouldn't be used by other applications while IPI commands\n        are triggered through this command.\n\nEXAMPLE\n    pmc get_board 0xffff0000 0x100\n        Write the board details to address 0xffff0000. Max buffer size is 256\n        bytes. The result of the command is status and the response length.\n\n    pmc generic -response-size 2 0x1030115 0xffff0000 0x100\n        Same as previous example, but use generic command instead of get_board.\n\nRETURNS\n    Nothing, if IPI command is trigered successfully.\n    Error string, if IPI command cannot be triggered.\n\n",
"device": "Category commands\n\ndevice authjtag - Secure debug BIN.\ndevice program  - Program PDI/BIT.\ndevice status   - Return JTAG register status.\n\nType 'help' followed by above 'command', or the above 'command' followed by\n'-help' for more details\n",
"plm": "NAME\n    plm - PLM logging.\n\nSYNOPSIS\n    plm <sub-command> [options]\n        Configure PLM log-level/log-memory, or copy/retrieve PLM log, based on\n        the sub-command specified.\n        The 'copy-debug-log' sub-command allows you to copy the PLM debug log to\n        user memory.\n        The 'set-debug-log' sub-command allows you to configure the memory for\n        the PLM debug log.\n        The 'set-log-level' sub-command allows you to configure the PLM log\n        level.\n        The 'log' command allows you to retrieve the PLM debug log.\n\n        Type 'help' followed by 'plm sub-command', or 'plm sub-command' followed\n        by '-help' for more details.\n\nOPTIONS\n    Depends on the sub-command. Refer to the help for the relevant sub-command\n    for details.\n\nEXAMPLE\n     Refer to the help for the relevant sub-command for details.\n\nRETURNS\n    Depends on the sub-command. Refer to the help for the relevant sub-command\n    for details.\n\n",
"projects": "Category commands\n\napp             - Application project management.\nbsp             - Configure BSP settings of a baremetal domain.\ncheckvalidrmxsa - Check if RM XSA is\n    suitable for static XSA.\nclosehw         - Close a hardware design.\ncreatedts       - Creates device tree.\ndomain          - Create, configure, list and report domains.\ngetaddrmap      - Get the address ranges of IP connected to processor.\ngetperipherals  - Get a list of all peripherals in the HW design.\ngetprocessors   - Get a list of all processors in the hardware design.\ngetws           - Get Vitis workspace.\nimportprojects  - Import projects to workspace.\nimportsources   - Import sources to an application project.\nishwexpandable  - Check if hardware design is expandable.\nisstaticxsa     - Check if hardware design is a static XSA.\nlibrary         - Library project management.\nlscript         - Create linker script.\nopenhw          - Open a hardware design.\nplatform        - Create, configure, list, and report platforms.\nrepo            - Get, set, or modify software repositories.\nsetws           - Set Vitis workspace.\nsysproj         - System project management.\ntoolchain       - Set or get toolchain used for building projects.\n\nType 'help' followed by above 'command', or the above 'command' followed by\n'-help' for more details\n",
"builtin_driver": "",
"chan": "",
"get_slaves": "",
"get_design_properties": "",
"mask_write": "NAME\n    mask_write - Read, modify, and write an address.\n\nSYNOPSIS\n    mask_write <addr> <mask>\n        Read the address specified by addr, clear the bits specified by mask,\n        set the bits specified by data and write back the result to addr\n\nNOTE\n    This is an helper command for initializing the PS through ps*_init.tcl and\n    is not recommended for external usage\n\nRETURNS\n    Nothing, if successful.\n    Error string, if the memory address cannot be accessed.\n\n",
"openbsp": "",
"dispose_exprs": "",
"fileevent": "",
"rwr": "NAME\n    rwr - Write to register.\n\nSYNOPSIS\n    rwr <reg> <value>\n        Write the <value> to active target register specified by <reg>.\n        For a processor core target, the processor core register can be written\n        to. For a target representing a group of processor cores, system\n        registers or IOU registers can be written to.\n\nEXAMPLE\n    rwr r8 0x0\n        Write 0x0 to register r8.\n\n    rwr usr r8 0x0\n        Write 0x0 to register r8 in group usr.\n\nRETURNS\n    Nothing, if successful.\n    Error string, if an invalid register is specified or the register cannot be\n    written to.\n\n",
"nxti": "NAME\n    nxti - Step over a machine instruction.\n\nSYNOPSIS\n    nxti [count]\n        Step over a single machine instruction. If the instruction is a function\n        call, execution continues until control returns from the function.\n        If <count> is greater than 1, repeat <count> times.\n        Default value of count is 1.\n\nRETURNS\n    Nothing, if the target has stepped to the next address.\n    Error string, if the target is already running or cannot be resumed.\n\n    An information message is printed on the console when the target stops at\n    the next address.\n\n",
"regexp": "",
"getprocessors": "NAME\n    getprocessors - Get a list of all processors in the hardware design.\n\nSYNOPSIS\n    getprocessors <xsa>\n        Return the list of all the processors in the hardware design\n\nOPTIONS\n    None.\n\nEXAMPLE\n    getprocessors system.xsa\n        Return a list of processors in the hardware design.\n\nRETURNS\n    If successful, this command returns the list of processors.\n    Otherwise, it returns an error.\n\n",
"set_debug_target_id": "",
"stapl": "Category commands\n\nstapl config - Configure stapl target.\nstapl start  - Start stapl recording.\nstapl stop   - Stop stapl recording.\n\nType 'help' followed by above 'command', or the above 'command' followed by\n'-help' for more details\n",
"sdtgen": "Category commands\n\nsdtgen copy_hw_files - Copy hardware artifacts into given output directory.\nsdtgen generate_sdt  - Generate system device tree.\nsdtgen get_dt_param  - Return the device tree parameters like xsa, board and ouput directory.\nsdtgen set_dt_param  - Set the device tree parameters like xsa, board and ouput directory.\n\nType 'help' followed by above 'command', or the above 'command' followed by\n'-help' for more details\n",
"upvar": "",
"encoding": "",
"getdrivers": "",
"backtrace": "NAME\n    backtrace - Stack back trace.\n\nSYNOPSIS\n    backtrace [options]\n        Return stack trace for current target.  Target must be\n        stopped.  Use debug information for best result.\n        The alias for backtrace is 'bt' and can be used interchangeably.\n\nOPTIONS\n    -maxframes <num>\n        Maximum number of frames in stack trace. The default value is 10.\n        The actual number of frames could be less depending on program state.\n        To read all the available frames, use -1.\n\n\nEXAMPLE\n    bt\n        Return top 10 frames from stack trace.\n\n    bt -maxframes 5\n        Return top 5 frames from stack trace.\n\n    bt -maxframes -1\n        Return all the available frames from stack trace.\n\nRETURNS\n    Stack trace, if successful.\n    Error string, if stack trace cannot be read from the target.\n\n",
"getws": "NAME\n    getws - Get Vitis workspace.\n\nSYNOPSIS\n    getws\n        Return the current vitis workspace.\n\nRETURNS\n    Current workspace.\n\n",
"targets": "NAME\n    targets - List targets or switch between targets.\n\nSYNOPSIS\n    targets [options]\n        List available targets.\n\n    targets <target id>\n        Select <target id> as active target.\n\nOPTIONS\n    -set\n        Set current target to entry single entry in list.  This is\n        useful in combination with the -filter option.  An error is\n        generated if the list is empty or contains more than one entry.\n    -regexp\n        Use regexp for filter matching\n    -nocase\n        Use case insensitive filter matching\n    -filter <filter-expression>\n        Specify filter expression to control which targets are\n        included in list based on its properties.  Filter expressions\n        are similar to Tcl expr syntax.  Target properties are\n        referenced by name, while Tcl variables are accessed using the\n        $ syntax string must be quoted.  Operators ==, !=, <=, >=, <,\n        >, &&, and || are supported as well as ().  These operators\n        behave like Tcl expr operators.  String matching operators =~\n        and !~ match the LHS string with the RHS pattern using either regexp\n        or string match.\n    -target-properties\n        Returns a Tcl list of dicts containing target properties.\n    -index <index>\n        Include targets based on the JTAG scan chain position.  This is\n        identical to specifying -filter {jtag_device_index==<index>}.\n    -timeout <sec>\n        Poll until the targets specified by filter option are found\n        on the scan chain, or until timeout. This option is valid only\n        with filter option.\n        The timeout value is in seconds. Default timeout is three seconds.\n\n\nEXAMPLE\n    targets\n        List all targets.\n\n    targets -filter {name =~ 'ARM*#1'}\n        List targets with name starting with 'ARM' and ending with '#1'.\n\n    targets 2\n        Set target with id 2 as the current target.\n\n    targets -set -filter {name =~ 'ARM*#1'}\n        Set current target to target with name starting with 'ARM' and\n        ending with '#1'.\n\n    targets -set -filter {name =~ 'MicroBlaze*'} -index 0\n        Set current target to target with name starting with 'MicroBlaze'\n        and which is on the first JTAG device.\n\nRETURNS\n    The return value depends on the options used.\n\n    <none>\n        Targets list when no options are used.\n\n    -filter\n        Filtered targets list.\n\n    -target-properties\n        Tcl list consisting of target properties.\n\n    An error is returned when target selection fails.\n\n",
"exit": "",
"event_notify": "",
"incr": "",
"tclLog": "",
"get_processes": "",
"get_regs": "",
"set_jtag_node_id": "",
"glob": "",
"createapp": "",
"get_jtag_nodes": "",
"get_jtag_nodes_cache_client": "",
"time": "",
"eval": "",
"dis": "NAME\n    dis - Disassemble instructions.\n\nSYNOPSIS\n    dis <address> [num]\n\tDisassemble <num> instructions at address specified by <address>\n\tThe keyword 'pc' can be used to disassemble instructions at the current PC.\n\tDefault value for <num> is 1.\n\nEXAMPLE\n    dis\n        Disassemble an instruction at the current PC value.\n\n    dis pc 2\n\tDisassemble two instructions at the current PC value.\n\n    dis 0x0 2\n\tDisassemble two instructions at address 0x0.\n\nRETURNS\n    Disassembled instructions if successful.\n    Error string, if the target instructions cannot be read.\n\n",
"lassign": "",
"sysproj": "NAME\n    sysproj - System project management.\n\nSYNOPSIS\n    sysproj <sub-command> [options]\n        Build, list and report system project, based on <sub-command> specified.\n        Following sub-commands are supported.\n            build  - Build the system project.\n            clean  - Clean the system project.\n            list   - List all system projects in workspace.\n            remove - Delete the system project.\n            report - Report the details of the system project.\n        Type 'help' followed by 'sysproj sub-command', or 'sysproj sub-command' followed\n        by '-help' for more details.\n\nOPTIONS\n    Depends on the sub-command.\n\nEXAMPLE\n    See sub-command help for examples.\n\nRETURNS\n    Depends on the sub-command.\n\n",
"builtin_boot": "",
"connect": "NAME\n    connect - Connect to hw_server/TCF agent.\n\nSYNOPSIS\n    connect [options]\n        Allows users to connect to a server, list connections, or switch\n        between connections.\n\nOPTIONS\n    -host <host name/ip>\n        Name/IP address of the host machine.\n\n    -port <port num>\n        TCP port number.\n\n    -url <url>\n        URL description of hw_server/TCF agent.\n\n    -list\n        List open connections.\n\n    -set <channel-id>\n        Set active connection.\n\n    -new\n        Create a new connection, even one existing to the same URL.\n\n    -xvc-url <url>\n        Open Xilinx virtual cable connection.\n\n    -symbols\n        Launch symbol server to enable source-level debugging\n        for remote connections.\n\nEXAMPLE\n    connect -host localhost -port 3121\n        Connect to hw_server/TCF agent on host localhost and port 3121.\n\n    connect -url tcp:localhost:3121\n\tIdentical to the previous example.\n\nRETURNS\n    The return value depends on the options used.\n\n    -port, -host, -url, -new\n        <channel-id> of the new connection or error if the connection fails.\n\n    -list\n        List of open channels or nothing when there are no open channels.\n\n    -set\n        Nothing.\n\n",
"builtin_system": "",
"gets": "",
"importprojects": "NAME\n    importprojects - Import projects to workspace.\n\nSYNOPSIS\n    importprojects <path>\n        Import all the Vitis projects from <path> to workspace.\n\nEXAMPLE\n    importprojects /tmp/wrk/wksp1/hello1\n        Import Vitis project(s) into the current workspace.\n\nRETURNS\n    Nothing, if the projects are imported successfully.\n    Error string, if project path is not specified or if the projects cannot be\n    imported.\n\n",
"variable": "",
"llength": "",
"state": "NAME\n    state - Display the current state of the target.\n\nSYNOPSIS\n    state\n        Return the current execution state of target.\n\n",
"redirect_channel": "",
"info": "",
"clock": "",
"tfile": "Category commands\n\ntfile close    - Close file handle.\ntfile copy     - Copy target file.\ntfile fsetstat - Set file attributes for handle.\ntfile fstat    - Get file attributes from handle.\ntfile ls       - List directory contents.\ntfile lstat    - Get link file attributes from path.\ntfile mkdir    - Create directory.\ntfile open     - Open file.\ntfile opendir  - Open directory.\ntfile read     - Read file handle.\ntfile readdir  - Read directory.\ntfile readlink - Read symbolic link.\ntfile realpath - Get real path.\ntfile remove   - Remove path.\ntfile rename   - Rename path.\ntfile rmdir    - Remove directory.\ntfile roots    - Get file system roots.\ntfile setstat  - Set file attributes for path.\ntfile stat     - Get file attributes from path.\ntfile symlink  - Create symbolic link.\ntfile user     - Get user attributes.\ntfile write    - Write file handle.\n\nType 'help' followed by above 'command', or the above 'command' followed by\n'-help' for more details\n",
"pread": "",
"mdm_drwr": "NAME\n    mdm_drwr - Write to MDM debug register.\n\nSYNOPSIS\n    mdm_drwr [options] <cmd> <data> <bitlen>\n        Write to MDM debug register. <cmd> is an 8-bit MDM command to\n        access a debug register.  <data> is the register value and\n        <bitlen> is the register width.\n\nOPTIONS\n    -target-id <id>\n        Specify a target id representing the MicroBlaze debug module or\n        MicroBlaze instance to access.  If this option is not used and\n        '-user' is not specified, the current target is used.\n\n    -user <bscan number>\n        Specify user bscan port number.\n\nEXAMPLE\n    mdm_drwr 8 0x40 8\n        Write to MDM break/reset control register.\n\nRETURNS\n    Nothing, if successful.\n\n",
"huddle": "",
"readjtaguart": "NAME\n    readjtaguart - Start/stop reading from JTAG UART.\n\nSYNOPSIS\n    readjtaguart [options]\n        Start/stop reading from the Arm DCC or MDM UART TX interface.\n        The JTAG UART output can be printed on stdout or redirected to a file.\n\nOPTIONS\n    -start\n        Start reading the JTAG UART output.\n\n    -stop\n        Stop reading the JTAG UART output.\n\n    -handle <file-handle>\n        Specify the file handle to which the data should be redirected.\n        If no file handle is given, data is printed on stdout.\n\nNOTE\n    Select an MDM or Arm processor target before running this command.\n\n    While running a script in non-interactive mode, the output from JTAG UART\n    cannot be written to the log until 'readjtaguart -stop' is used.\n\nEXAMPLE\n    readjtaguart\n        Start reading from the JTAG UART and print the output on stdout.\n\n    set fp [open test.log w]; readjtaguart -start -handle $fp\n        Start reading from the JTAG UART and print the output to test.log.\n\n    readjtaguart -stop\n        Stop reading from the JTAG UART.\n\nRETURNS\n    Nothing, if successful.\n    Error string, if data cannot be read from the JTAG UART.\n\n",
"builtin_isolate": "",
"getperipherals": "NAME\n    getperipherals - Get a list of all peripherals in the HW design.\n\nSYNOPSIS\n    getperipherals <xsa> <processor-instance>\n        Return the list of all the peripherals in the hardware design, along\n        with version and type. If [processor-instance] is specified, return\n        only a list of slave peripherals connected to that processor.\n\nOPTIONS\n    None.\n\nEXAMPLE\n    getperipherals system.xsa\n        Return a list of peripherals in the hardware design.\n\n    getperipherals system.xsa ps7_cortexa9_0\n        Return a list of peripherals connected to processor ps7_cortexa9_0 in\n        the hardware design.\n\nRETURNS\n    If successful, this command returns the list of peripherals.\n    Otherwise it returns an error.\n\n",
"global": "",
"source": "",
"builtin_device-tree": "",
"get_context_children": "",
"closehw": "NAME\n    closehw - Close a hardware design.\n\nSYNOPSIS\n    closehw <hw project | xsa file>\n        Close a hardware design that was opened using 'openhw' command.\n        XSA file exported from Vivado, or the hardware project created\n\tusing 'createhw' command can be passed as argument.\n\nOPTIONS\n    None.\n\nEXAMPLE\n    closehw ZC702_hw_platform\n       Close the hardware project ZC702_hw_platform.\n\n    closehw /tmp/wrk/hw1/system.xsa\n       Close the hardware project corresponding to the system.xsa.\n\nRETURNS\n    If successful, this command returns nothing.\n    Otherwise it returns an error.\n\n",
"createdts": "NAME\n    createdts - Creates device tree.\n\nSYNOPSIS\n    createdts [options]\n        Create a device tree for the hardware definition file.\n\nOPTIONS\n    -platform-name <software-platform name>\n        Name of the software platform to be generated.\n\n    -board <board name>\n        Board name for device tree to be generated.\n        Board names available at <DTG Repo>/device_tree/data/kernel_dtsi.\n\n    -hw <handoff-file>\n        Hardware description file to be used to create the device tree.\n\n    -out <output-directory>\n        The directory where the software platform needs to be created.\n        Workspace will be default directory, if this option is not specified.\n\n    -local-repo <directory location>\n        Location of the directory were bsp for git repo is available.\n        Device tree repo will be cloned from git,\n        if this option is not specified.\n\n    -git-url <Git URL>\n        Git URL of the dtg repo to be cloned.\n        Default repo is https://github.com/Xilinx/device-tree-xlnx.git.\n\n    -git-branch <Git Branch>\n        Git branch to be checked out. 'xlnx_rel_v<Vitis-release>' is selected\n        by default.\n\n    -zocl\n        Set zocl flag to enable zocl driver support, default set to False.\n        zocl should only be used when the designs are PL enabled.\n        Only master and xlnx_rel_v2021.2 branch supports zocl property.\n\n    -overlay\n        Set overlay flag to enable device-tree overlay support,\n        default set to False.\n\n    -dtsi <custom-dtsi-file list>\n        Include custom-dtsi file in the device tree, if specified.\n        The filepaths must be in the list format.\n\n    -compile\n        Specify this option to compile the generated dts to create dtb.\n        If this option is not specified, users can manually use dts\n        to compile dtb.\n        For example,\n        dtc -I dts -O dtb -o <file_name>.dtb <file_name>.dts\n            Compile dts(device tree source) or\n            dtsi(device tree source include) files.\n\n        dtc -I dts -O dtb -f <file_name>.dts -o <file_name>.dtb\n            Convert dts(device tree source) to dtb(device tree blob).\n\n        dtc -I dtb -O dts -f <file_name>.dtb -o <file_name>.dts\n            Convert dtb(device tree blob) to dts(device tree source).\n\n    -update\n        Set update flag to enable existing device tree platform\n        to update with new xsa.\n\nNOTE\n    This command is a shortcut for creating a device tree domain and\n    generating the device tree. It clones the device tree repo, creates a\n    platform with device_tree as OS, and configures and generates the\n    platform to create dts.\n    -zocl should only be used when the designs are PL enabled.\n    Only master and xlnx_rel_v2021.2 branch supports zocl property.\n    Git 1.5.4 or later is required to avoid any issues with the git commands\n    used by the createdts command.\n\nEXAMPLE\n    createdts -hw zcu102.xsa -platform-name my_devicetree\n        Create a device tree for the handoff-file with\n        default repo as 'https://github.com/Xilinx/device-tree-xlnx.git'\n        and default branch as 'xlnx_rel_v<Vitis-release>'.\n\n    createdts -hw zcu102.xsa -platform-name my_devicetree -git-url <Git URL>\n            -git-branch <Git Branch>\n        Create a device tree for the handoff-file with\n        user repo as repo mentioned in <Git URL>\n        and user branch as <Git Branch>.\n\n    createdts -hw zc702.xsa -platform-name my_devicetree\n            -local-repo /my_local_git_repo\n        Create a device tree for the handoff-file and use the local repo.\n\n    createdts -hw vck190.xsa -platform-name my_devicetree\n            -out /device-tree_output_directory\n        Create a device tree at the out directory specified\n        by device-tre output directory.\n\n    createdts -hw zcu102.xsa -platform-name my_devicetree -overlay\n            -zocl -compile\n        Create device tree for the handoff-file with overlay and zocl node.\n        Compile flag compiles the device tree blob file from the DTS.\n\n    createdts -hw zcu102.xsa -platform-name my_devicetree -board <Board Name>\n        Creates a device tree adding board value to the library,\n        Board names available at <DTG Repo>/device_tree/data/kernel_dtsi.\n\n    createdts -update -hw newdesign.xsa\n        Updates existing device tree platform with new XSA.\n\n    createdts -hw vck190 -platform-name vck190 -out <out_dir>\n            -dtsi [list path/system-conf.dtsi path/system-user.dtsi]\n        Create device tree with custom-dtsi-files included.\n\nRETURNS\n    None.\n\n",
"importsources": "NAME\n    importsources - Import sources to an application project.\n\nSYNOPSIS\n    importsources [OPTIONS]\n        Import sources from a path to application project in workspace.\n\nOPTIONS\n    -name <project-name>\n        Application Project to which the sources should be imported.\n\n    -path <source-path>\n        Path from which the source files should be imported.\n        If <source-path> is a file, it is imported to application project.\n        If <source-path> is a directory, all the files/sub-directories from\n        the <source-path> are imported to application project. All existing\n        source files will be overwritten in the application, and new files\n        will be copied. Linker script will not be copied to the application\n        directory, unless -linker-script option is used.\n\n    -soft-link\n        Links the sources from source-path and does not copy the source.\n\n    -target-path <dir-path>\n        Directory to which the sources have to be linked or copied.\n        If target-path option is not used, source files will be linked\n        or copied to 'src' directory.\n\n    -linker-script\n        Copies the linker script as well.\n\nEXAMPLE\n    importsources -name hello1 -path /tmp/wrk/wksp2/hello2\n        Import the 'hello2' project sources to 'hello1' application project\n        without the linker script.\n\n    importsources -name hello1 -path /tmp/wrk/wksp2/hello2 -linker-script\n        Import the 'hello2' project sources to 'hello1' application project\n        along with the linker script.\n\n    importsources -name hello1 -path /tmp/wrk/wksp2/hello_app -soft-link\n        Create a soft-link to hello1 application project from hello_app\n        application project.\n\nRETURNS\n    Nothing, if the project sources are imported successfully.\n    Error string, if invalid options are used or if the project sources cannot\n    be read/imported.\n\n",
"builtin_app": "",
"cd": "",
"process": "",
"petalinux-install-path": "NAME\n    petalinux-install-path - Set or get PetaLinux installation path.\n\nSYNOPSIS\n    petalinux-install-path <path>\n        Set PetaLinux installation path. XSCT uses this installation path to\n        run the Petalinux commands.\n        The following Petalinux commands are available:\n            petalinux-boot\n            petalinux-build\n            petalinux-config\n            petalinux-create\n            petalinux-package\n            petalinux-util\n\n        Help for these Petalinux commands is available by running\n        <petalinux-command> -help, after setting the installation path.\n\nRETURNS\n    Installation path, if no arguments are specified.\n    Nothing, if a valid installtion path is specified.\n    Error string, if path is not a valid installation or Wrong # of args are\n    specified.\n\n",
"file": "",
"unload": "NAME\n    unloadhw - Unload a Vivado hardware design.\n\nSYNOPSIS\n    unloadhw\n        Close the Vivado hardware design which was opened during the loadhw\n        command, and clear the memory map for the current target.\n        If the current target is a parent for a group of processors, the memory\n        map is cleared for all its child processors. If the current target is a\n        processor, the memory map is cleared for all the child processors of its\n        parent. This command does not clear the memory map explicitly set by\n        users through the memmap command.\n\nRETURNS\n    Nothing.\n\n",
"mrd": "NAME\n    mrd - Memory read.\n\nSYNOPSIS\n    mrd [options] <address> [num]\n        Read <num> data values from the active target's memory address specified\n        by <address>.\n\nOPTIONS\n    -force\n        Overwrite access protection. By default accesses to reserved and invalid\n        address ranges are blocked.\n\n    -size <access-size>\n        <access-size> can be one of the values below:\n        b = Bytes accesses\n        h = Half-word accesses\n        w = Word accesses\n        d = Double-word accesses\n        Default access size is w.\n        Address is aligned to access-size before reading memory, if the\n        '-unaligned-access' option is not used.\n        For targets that do not support double-word access, the debugger uses\n        two word accesses. If the number of data values to be read is more than\n        1, the debugger selects the appropriate access size. For example,\n        1. mrd -size b 0x0 4\n           Debugger accesses one word from the memory, displays four bytes.\n        2. mrd -size b 0x0 3\n           Debugger accesses one half-word and one byte from the memory,\n           displays three bytes.\n        3. mrd 0x0 3\n           Debugger accesses three words from the memory and displays three\n           words.\n\n        To read more than 64 bits of data, specify the number of data words\n        along with the address. Data read is in multiples of access size. For\n        example, to read 128 bits of data, run 'mrd -size d <addr> 2' or\n        'mrd -size w <addr> 4'.\n\n    -value\n        Return a Tcl list of values, instead of displaying the result on the\n        console.\n\n    -bin\n        Return data read from the target in binary format.\n\n    -file <file-name>\n        Write binary data read from the target to <file-name>.\n\n    -address-space <name>\n        Access specified memory space instead default memory space of\n        current target.\n\n        For Arm DAP targets, address spaces DPR, APR and AP<n> can be\n        used to access DP registers, AP registers, and MEM-AP\n        addresses respectively.  For backwards compatibility, the -arm-dap\n        and -arm-ap options can be used as shorthand for\n        '-address-space APR' and '-address-space AP<n>' respectively.\n        The APR address range is 0x0 - 0xfffc, where the higher eight bits\n        select an AP and the lower eight bits are the register address for\n        that AP.\n\n    -unaligned-access\n        The memory address is not aligned to the access size before performing\n        a read operation. Support for unaligned accesses is target\n        architecture dependent. If this option is not specified, addresses\n        are automatically aligned to access size.\n\nNOTE\n    Select an APU target to access ARM DAP and MEM-AP address space.\n\nEXAMPLE\n    mrd 0x0\n        Read a word at 0x0.\n\n    mrd 0x0 10\n        Read 10 words at 0x0.\n\n    mrd -value 0x0 10\n        Read 10 words at 0x0 and return a Tcl list of values.\n\n    mrd -size b 0x1 3\n        Read three bytes at address 0x1.\n\n    mrd -size h 0x2 2\n        Read two half-words at address 0x2.\n\n    mrd -bin -file mem.bin 0 100\n        Read 100 words at address 0x0 and write the binary data to mem.bin.\n\n    mrd -address-space APR 0x100\n        Read APB-AP CSW on Zynq.\n        The higher eight bits (0x1) select the APB-AP and the lower eight bits\n        (0x0) are the address of CSW.\n\n    mrd -address-space APR 0x04\n        Read AHB-AP TAR on Zynq.\n        The higher eight bits (0x0) select the AHB-AP and the lower eight bits\n        (0x4) are the address of TAR.\n\n    mrd -address-space AP1 0x80090088\n        Read address 0x80090088 on DAP APB-AP.\n        AP 1 selects the APB-AP.\n        0x80090088 on APB-AP corresponds to DBGDSCR of Cortex-A9#0, on Zynq.\n\n    mrd -address-space AP0 0xe000d000\n        Read address 0xe000d000 on DAP AHB-AP.\n        AP 0 selects the AHB-AP.\n        0xe000d000 on AHB-AP corresponds to QSPI device on Zynq.\n\nRETURNS\n    Memory addresses and data in requested format, if successful.\n    Error string, if the target memory cannot be read.\n\n",
"rootfs": "",
"namespace": "",
"bt": "NAME\n    bt - Stack back trace.\n\nSYNOPSIS\n    backtrace [options]\n        Return stack trace for current target.  Target must be\n        stopped.  Use debug information for best result.\n        The alias for backtrace is 'bt' and can be used interchangeably.\n\nOPTIONS\n    -maxframes <num>\n        Maximum number of frames in stack trace. The default value is 10.\n        The actual number of frames could be less depending on program state.\n        To read all the available frames, use -1.\n\n\nEXAMPLE\n    bt\n        Return top 10 frames from stack trace.\n\n    bt -maxframes 5\n        Return top 5 frames from stack trace.\n\n    bt -maxframes -1\n        Return all the available frames from stack trace.\n\nRETURNS\n    Stack trace, if successful.\n    Error string, if stack trace cannot be read from the target.\n\n",
"fpga": "NAME\n    fpga - Configure FPGA.\n\nSYNOPSIS\n    fpga <bitstream-file>\n        Configure FPGA with given bitstream.\n\n    fpga [options]\n        Configure FPGA with bitstream specified options, or\n        read FPGA state.\n\nOPTIONS\n    -file <bitstream-file>\n        Specify file containing bitstream.\n\n    -partial\n        Configure FPGA without first clearing the current configuration.\n        This option should be used while configuring partial bitstreams\n        created before 2014.3 or any partial bitstreams in binary format.\n\n    -no-revision-check\n        Disable bitstream versus silicon revision revision compatibility check.\n\n    -skip-compatibility-check\n        Disable bitstream versus FPGA device compatibility check.\n\n    -state\n        Return whether the FPGA is configured.\n\n    -config-status\n        Return configuration status.\n\n    -ir-status\n        Return IR capture status.\n\n    -boot-status\n        Return boot history status.\n\n    -timer-status\n        Return watchdog timer status.\n\n    -cor0-status\n        Return configuration option 0 status.\n\n    -cor1-status\n        Return configuration option 1 status.\n\n    -wbstar-status\n        Return warm boot start address status.\n\nNOTE\n    If no target is selected or if the current target is not a\n    supported FPGA device, and only one supported FPGA device is found\n    in the targets list, this device will be configured.\n\nRETURNS\n    Depends on options used.\n\n    -file, -partial\n        Nothing, if FPGA is configured, or an error if the configuration failed.\n\n    One of the other options\n        Configuration value.\n\n",
"configapp": "",
"stp": "NAME\n    stp - Step into a line of source code.\n\nSYNOPSIS\n    stp [count]\n        Resume execution of the active target until control reaches instruction\n        that belongs to different line of source code. If a function is called,\n        stop at first line of the function code.\n        Error is returned if line number information not available.\n        If <count> is greater than 1, repeat <count> times.\n        Default value of count is 1.\n\nRETURNS\n    Nothing, if the target has single stepped.\n    Error string, if the target is already running or cannot be resumed.\n\n    An information message is printed on the console when the target stops at the next\n    address.\n\n",
"vwait": "",
"dict": "",
"deleteprojects": "",
"uplevel": "",
"svf": "Category commands\n\nsvf con      - Record resuming of core to SVF file.\nsvf config   - Configure options for SVF file.\nsvf delay    - Record delay in tcks to SVF file.\nsvf dow      - Record elf download to SVF file.\nsvf generate - Generate recorded SVF file.\nsvf mwr      - Record memory write to SVF file.\nsvf rst      - Reset.\nsvf stop     - Record stopping of core to SVF file.\n\nType 'help' followed by above 'command', or the above 'command' followed by\n'-help' for more details\n",
"rename": "",
"lset": "",
"toolchain": "NAME\n    toolchain - Set or get toolchain used for building projects.\n\nSYNOPSIS\n    toolchain\n        Return a list of available toolchains and supported processor types.\n\n    toolchain <processor-type>\n        Get the current toolchain for <processor-type>.\n\n    toolchain <processor-type> <tool-chain>\n        Set the <toolchain> for <processor-type>. Any new projects created\n        will use the new toolchain during build.\n\nRETURNS\n    Depends on the arguments specified.\n\n    <none>\n        List of available toolchains and supported processor types.\n\n    <processor-type>\n        Current toolchain for processor-type.\n\n    <processor-type> <tool-chain>\n        Nothing if the tool-chain is set, or error, if unsupported tool-chain\n        is specified.\n\n",
"unloadhw": "NAME\n    unloadhw - Unload a Vivado hardware design.\n\nSYNOPSIS\n    unloadhw\n        Close the Vivado hardware design which was opened during the loadhw\n        command, and clear the memory map for the current target.\n        If the current target is a parent for a group of processors, the memory\n        map is cleared for all its child processors. If the current target is a\n        processor, the memory map is cleared for all the child processors of its\n        parent. This command does not clear the memory map explicitly set by\n        users through the memmap command.\n\nRETURNS\n    Nothing.\n\n",
"configparams": "NAME\n    configparams - List, get, or set configuration parameters.\n\nSYNOPSIS\n    configparams <options>\n        List the name and description for available configuration\n        parameters.  Configuration parameters can be global or\n        connection specific, therefore the list of available\n        configuration parameters and their value might change\n        depending on the current connection.\n\n    configparams <options> <name>\n        Get configuration parameter value(s).\n\n    configparams <options> <name> <value>\n        Set configuration parameter value.\n\nOPTIONS\n    -all\n        Include values for all contexts in result.\n\n    -context [context]\n        Specify context of value to get or set.  The default context\n\tis '', which represents the global default.  Not all options\n\tsupport context-specific values.\n\n    -target-id <id>\n        Specify target id or value to get or set.  This is an\n        alternative to the -context option.\n\nEXAMPLE\n    configparams force-mem-accesses 1\n        Disable access protection for the <dow>, <mrd>, and <mwr> commands.\n\n    configparams vitis-launch-timeout 100\n        Change the Vitis launch timeout to 100 seconds (used for running\n        Vitis batch mode commands).\n\nRETURNS\n    Depends on the arguments specified.\n\n    <none>\n        List of parameters and description of each parameter.\n\n    <parameter name>\n        Parameter value or error, if unsupported parameter is specified.\n\n    <parameter name> <parameter value>\n        Nothing if the value is set, or error, if the unsupported parameter is\n        specified.\n\n",
"createlib": "",
"get_context_cache_client": "",
"locals": "NAME\n    locals - Get or set the value of a local variable.\n\nSYNOPSIS\n    locals [options] [variable-name [variable-value]]\n        Get or set the value of a variable specified by <variable-name>.\n        When the variable name and value are not specified, values of all the\n        local variables are returned.\n        Elements of complex data types like structures can be accessed\n        through the '.' operator. For example, the var1.int_type refers to the\n        int_type element in the var1 struct.\n        Array elements can be accessed through their indices. For example,\n        array1[0] refers to the element at index 0 in array1.\n\nOPTIONS\n    -defs\n        Return the variable definitions like address, type, size, and RW flags.\n\n    -dict\n        Return the result in Tcl dict format, with variable names as dict keys\n        and variable values as dict values. For complex data like structures,\n        names are in the form of parent.child.\n\nEXAMPLE\n    locals Int_Loc\n        Return the value of the local variable Int_Loc.\n\n    locals\n        Return the values of all the local variables in the current stack frame.\n\n    locals -defs\n        Return definitions of all the local variables in the current stack frame.\n\n    locals Int_Loc 23\n        Set the value of the local variable Int_Loc to 23.\n\n    locals tmp_var.var1.int_type\n        Return the value of the int_type element in the var1 struct, where var1\n        is a member of the tmp_var struct.\n\n    locals tmp_var.var1.array1[0]\n        Return the value of the element at index 0 in array array1. array1 is\n        a member of the var1 struct, which is in turn a member of the tmp_var\n        struct.\n\nRETURNS\n    The return value depends on the options used.\n\n    <none>\n        Variable value(s)\n\n    -defs\n        Variable definition(s)\n\n    Nothing, when variable value is set.\n    Error string, if variable value  cannot be read or set.\n\n",
"tclPkgSetup": "",
"repo": "NAME\n    repo - Get, set, or modify software repositories.\n\nSYNOPSIS\n    repo [OPTIONS]\n        Get/set the software repositories path currently used.\n        This command is used to scan the repositories, to get the list\n        of OS/libs/drivers/apps from repository.\n\nOPTIONS\n    -set <path-list>\n        Set the repository path and load all the software cores available.\n        Multiple repository paths can be specified as Tcl list.\n\n    -get\n        Get the repository path(s).\n\n    -scan\n        Scan the repositories.\n        Used this option to scan the repositories, when some changes are done.\n\n    -os\n        Return a list of all the OS from the repositories.\n\n    -libs\n        Return a list of all the libs from the repositories.\n\n    -drivers\n        Return a list of all the drivers from the repositories.\n\n    -apps\n       \tReturn a list of all the applications from repositories along with the following details.\n            Supported processor - Processors for which the application can be built.\n            Supported OS        - OS for which the application can be built.\n            Platform required   - Indicates whether a platform is required to create the application.\n                                  AIE applications need a platform while other applications can be \n                                  created using a platform or xsa.\n\n    -add-platforms <platforms directory>\n        Add the specified directory to the platform repository.\n\n    -remove-platforms-dir  <platforms directory>\n        Remove the specified directory from the platform repository.\n\nEXAMPLE\n    repo -set <repo-path>\n        Set the repository path to the path specified by <repo-path>.\n\n    repo -os\n        Return a list of OS from the repo.\n\n    repo -libs\n        Return a list of libraries from the repo.\n\nRETURNS\n    Depends on the OPTIONS specified.\n\n    -scan, -set\n        Returns nothing.\n\n    -get\n        Returns the current repository path.\n\n    -os, -libs, -drivers, -apps\n        Returns the list of OS/libs/drivers/apps respectively.\n\n\n",
"expr": "",
"get_debug_targets": "",
"regsub": "",
"builtin_library": "",
"lsort": "",
"string": "",
"get_context_pair": ""
}
