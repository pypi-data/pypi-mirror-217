# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fb

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Query(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Query()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsQuery(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Query
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Query
    def BoundingboxStamped(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from seerep.fb.BoundingboxStamped import BoundingboxStamped
            obj = BoundingboxStamped()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Query
    def Timeinterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from seerep.fb.TimeInterval import TimeInterval
            obj = TimeInterval()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Query
    def Label(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from seerep.fb.LabelsWithCategory import LabelsWithCategory
            obj = LabelsWithCategory()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Query
    def LabelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Query
    def LabelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Query
    def MustHaveAllLabels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Query
    def Projectuuid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Query
    def ProjectuuidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Query
    def ProjectuuidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Query
    def Instanceuuid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Query
    def InstanceuuidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Query
    def InstanceuuidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Query
    def Datauuid(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Query
    def DatauuidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Query
    def DatauuidIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Query
    def Withoutdata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Query
    def MaxNumData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(9)
def QueryStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddBoundingboxStamped(builder, boundingboxStamped): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(boundingboxStamped), 0)
def QueryAddBoundingboxStamped(builder, boundingboxStamped):
    """This method is deprecated. Please switch to AddBoundingboxStamped."""
    return AddBoundingboxStamped(builder, boundingboxStamped)
def AddTimeinterval(builder, timeinterval): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timeinterval), 0)
def QueryAddTimeinterval(builder, timeinterval):
    """This method is deprecated. Please switch to AddTimeinterval."""
    return AddTimeinterval(builder, timeinterval)
def AddLabel(builder, label): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)
def QueryAddLabel(builder, label):
    """This method is deprecated. Please switch to AddLabel."""
    return AddLabel(builder, label)
def StartLabelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def QueryStartLabelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartLabelVector(builder, numElems)
def AddMustHaveAllLabels(builder, mustHaveAllLabels): builder.PrependBoolSlot(3, mustHaveAllLabels, 0)
def QueryAddMustHaveAllLabels(builder, mustHaveAllLabels):
    """This method is deprecated. Please switch to AddMustHaveAllLabels."""
    return AddMustHaveAllLabels(builder, mustHaveAllLabels)
def AddProjectuuid(builder, projectuuid): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(projectuuid), 0)
def QueryAddProjectuuid(builder, projectuuid):
    """This method is deprecated. Please switch to AddProjectuuid."""
    return AddProjectuuid(builder, projectuuid)
def StartProjectuuidVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def QueryStartProjectuuidVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartProjectuuidVector(builder, numElems)
def AddInstanceuuid(builder, instanceuuid): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(instanceuuid), 0)
def QueryAddInstanceuuid(builder, instanceuuid):
    """This method is deprecated. Please switch to AddInstanceuuid."""
    return AddInstanceuuid(builder, instanceuuid)
def StartInstanceuuidVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def QueryStartInstanceuuidVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartInstanceuuidVector(builder, numElems)
def AddDatauuid(builder, datauuid): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(datauuid), 0)
def QueryAddDatauuid(builder, datauuid):
    """This method is deprecated. Please switch to AddDatauuid."""
    return AddDatauuid(builder, datauuid)
def StartDatauuidVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def QueryStartDatauuidVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDatauuidVector(builder, numElems)
def AddWithoutdata(builder, withoutdata): builder.PrependBoolSlot(7, withoutdata, 0)
def QueryAddWithoutdata(builder, withoutdata):
    """This method is deprecated. Please switch to AddWithoutdata."""
    return AddWithoutdata(builder, withoutdata)
def AddMaxNumData(builder, maxNumData): builder.PrependUint32Slot(8, maxNumData, 0)
def QueryAddMaxNumData(builder, maxNumData):
    """This method is deprecated. Please switch to AddMaxNumData."""
    return AddMaxNumData(builder, maxNumData)
def End(builder): return builder.EndObject()
def QueryEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)