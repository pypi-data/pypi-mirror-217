# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ..core.datetime_utils import serialize_datetime
from .public_link_error import PublicLinkError
from .public_link_state import PublicLinkState


class LinkStateChangedWebhook(pydantic.BaseModel):
    webhook_event: typing.Optional[typing_extensions.Literal["link.state_changed"]]
    webhook_major_version: typing.Optional[str]
    webhook_minor_version: typing.Optional[str]
    webhook_idempotency_key: str
    webhook_timestamp: str
    link_id: str
    link_tags: typing.List[str]
    state: PublicLinkState
    error: typing.Optional[PublicLinkError]
    error_message: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
