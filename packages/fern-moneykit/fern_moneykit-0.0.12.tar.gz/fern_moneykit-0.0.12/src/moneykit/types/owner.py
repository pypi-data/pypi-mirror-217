# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .address import Address
from .email import Email
from .phone_number import PhoneNumber


class Owner(pydantic.BaseModel):
    names: typing.List[str] = pydantic.Field(description=("A list of names for the account owner.\n"))
    addresses: typing.List[Address] = pydantic.Field(
        description=("A list of addresses for the account owner. Some addresses can appear as incomplete.\n")
    )
    phone_numbers: typing.List[PhoneNumber] = pydantic.Field(
        description=("A list of phone numbers for the account owner.\n")
    )
    emails: typing.List[Email] = pydantic.Field(description=("A list of email addresses for the account owner.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
