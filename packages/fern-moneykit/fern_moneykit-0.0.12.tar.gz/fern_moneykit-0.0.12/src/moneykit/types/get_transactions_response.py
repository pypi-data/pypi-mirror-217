# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .account import Account
from .link_common import LinkCommon
from .transaction import Transaction


class GetTransactionsResponse(pydantic.BaseModel):
    total: int = pydantic.Field(description=("The total number of results for this query.\n"))
    page: int = pydantic.Field(description=("The page number corresponding to this batch of results.\n"))
    size: int = pydantic.Field(description=("The number of results in this batch.\n"))
    transactions: typing.List[Transaction] = pydantic.Field(description=("A list of transactions.\n"))
    accounts: typing.List[Account] = pydantic.Field(
        description=("A list of accounts for which transactions are being returned.\n")
    )
    link: LinkCommon = pydantic.Field(description=("The link that these accounts belong to.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
