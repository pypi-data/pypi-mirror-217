# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PublicLinkError(str, enum.Enum):
    """
    An enumeration.
    """

    SYSTEM_ERROR = "system_error"
    PROVIDER_ERROR = "provider_error"
    INSTITUTION_ERROR = "institution_error"
    USER_ERROR = "user_error"
    AUTH_EXPIRED = "auth_expired"
    INCOMPLETE = "incomplete"

    def visit(
        self,
        system_error: typing.Callable[[], T_Result],
        provider_error: typing.Callable[[], T_Result],
        institution_error: typing.Callable[[], T_Result],
        user_error: typing.Callable[[], T_Result],
        auth_expired: typing.Callable[[], T_Result],
        incomplete: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is PublicLinkError.SYSTEM_ERROR:
            return system_error()
        if self is PublicLinkError.PROVIDER_ERROR:
            return provider_error()
        if self is PublicLinkError.INSTITUTION_ERROR:
            return institution_error()
        if self is PublicLinkError.USER_ERROR:
            return user_error()
        if self is PublicLinkError.AUTH_EXPIRED:
            return auth_expired()
        if self is PublicLinkError.INCOMPLETE:
            return incomplete()
