# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import BaseMoneyKitEnvironment
from .resources.access_token.client import AccessTokenClient, AsyncAccessTokenClient
from .resources.accounts.client import AccountsClient, AsyncAccountsClient
from .resources.identity.client import AsyncIdentityClient, IdentityClient
from .resources.institutions.client import AsyncInstitutionsClient, InstitutionsClient
from .resources.link_session.client import AsyncLinkSessionClient, LinkSessionClient
from .resources.links.client import AsyncLinksClient, LinksClient
from .resources.products.client import AsyncProductsClient, ProductsClient
from .resources.transactions.client import AsyncTransactionsClient, TransactionsClient
from .types.supported_version import SupportedVersion


class BaseMoneyKit:
    def __init__(
        self,
        *,
        environment: BaseMoneyKitEnvironment = BaseMoneyKitEnvironment.PRODUCTION,
        moneykit_version: typing.Optional[SupportedVersion] = None,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60
    ):
        self._client_wrapper = SyncClientWrapper(
            moneykit_version=moneykit_version, token=token, httpx_client=httpx.Client(timeout=timeout)
        )
        self.accounts = AccountsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.access_token = AccessTokenClient(environment=environment, client_wrapper=self._client_wrapper)
        self.identity = IdentityClient(environment=environment, client_wrapper=self._client_wrapper)
        self.institutions = InstitutionsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.link_session = LinkSessionClient(environment=environment, client_wrapper=self._client_wrapper)
        self.links = LinksClient(environment=environment, client_wrapper=self._client_wrapper)
        self.transactions = TransactionsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.products = ProductsClient(environment=environment, client_wrapper=self._client_wrapper)


class AsyncBaseMoneyKit:
    def __init__(
        self,
        *,
        environment: BaseMoneyKitEnvironment = BaseMoneyKitEnvironment.PRODUCTION,
        moneykit_version: typing.Optional[SupportedVersion] = None,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60
    ):
        self._client_wrapper = AsyncClientWrapper(
            moneykit_version=moneykit_version, token=token, httpx_client=httpx.AsyncClient(timeout=timeout)
        )
        self.accounts = AsyncAccountsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.access_token = AsyncAccessTokenClient(environment=environment, client_wrapper=self._client_wrapper)
        self.identity = AsyncIdentityClient(environment=environment, client_wrapper=self._client_wrapper)
        self.institutions = AsyncInstitutionsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.link_session = AsyncLinkSessionClient(environment=environment, client_wrapper=self._client_wrapper)
        self.links = AsyncLinksClient(environment=environment, client_wrapper=self._client_wrapper)
        self.transactions = AsyncTransactionsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.products = AsyncProductsClient(environment=environment, client_wrapper=self._client_wrapper)
