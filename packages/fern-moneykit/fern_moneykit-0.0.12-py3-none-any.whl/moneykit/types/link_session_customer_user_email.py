# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class LinkSessionCustomerUserEmail(pydantic.BaseModel):
    address: str = pydantic.Field(
        description=('The user\'s email address. <span style="white-space: nowrap">`<= 254 characters`</span> \n')
    )
    customer_verified_at: typing.Optional[str] = pydantic.Field(
        description=(
            "Optional timestamp that marks when you last verified this email (such as when the user most\n"
            "        recently clicked a verification url sent to this address).\n"
            "        Only include this field if you verified the address.  You may supply zeros if the time (but not the date)\n"
            "        is unknown.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
