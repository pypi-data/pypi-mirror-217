# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .transaction_type import TransactionType


class Transaction(pydantic.BaseModel):
    transaction_id: str = pydantic.Field(description=("The unique ID for this transaction.\n"))
    account_id: str = pydantic.Field(description=("The ID of the account in which this transaction occurred.\n"))
    amount: str = pydantic.Field(
        description=(
            "The amount of this transaction, denominated in account currency.  This amount is always\n"
            "        non-negative.  The `type` field indicates whether it is entering or leaving the account.\n"
        )
    )
    type: TransactionType = pydantic.Field(
        description=(
            "`debit` indicates money leaving the account (*e.g.*, a payment); `credit` indicates\n"
            "            money entering the account (*e.g.*, a deposit).\n"
        )
    )
    currency: str = pydantic.Field(description=("The ISO-4217 currency code of the transaction.\n"))
    date: str = pydantic.Field(
        description=(
            "The effective (posted) date the transaction, in ISO-8601 format.  For pending transactions,\n"
            "            this date is when the transaction was initiated.\n"
        )
    )
    description: typing.Optional[str] = pydantic.Field(
        description=(
            "A normalized, cleaned transaction description suitable for presentation to the end user.\n"
            "            Commonly this will be the merchant or counterparty name.\n"
        )
    )
    raw_description: typing.Optional[str] = pydantic.Field(
        description=("The raw transaction description as provided by the institution, where available.\n")
    )
    pending: bool = pydantic.Field(
        description=(
            "If true, this transaction is pending or unsettled and has not yet affected the account.\n"
            "        Commonly these are credit card transactions, particularly approvals (holds) such as for hotel or restaurant\n"
            "        reservations placed in advance where the final amount is still to be determined.\n"
        )
    )
    category: typing.Optional[str] = pydantic.Field(
        description=(
            "The category for this transaction, given as a dotted string indicating a hierarchical\n"
            "        categorization.  See <a href=/pages/categories>Transaction Categories</a> for the list of possible transaction types.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
