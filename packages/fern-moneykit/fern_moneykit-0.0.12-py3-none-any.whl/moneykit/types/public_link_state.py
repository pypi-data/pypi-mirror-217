# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PublicLinkState(str, enum.Enum):
    """
    An enumeration.
    """

    CONNECTING = "connecting"
    AWAITING_TOKEN_EXCHANGE = "awaiting_token_exchange"
    CONNECTED = "connected"
    DELETED = "deleted"
    ERROR = "error"

    def visit(
        self,
        connecting: typing.Callable[[], T_Result],
        awaiting_token_exchange: typing.Callable[[], T_Result],
        connected: typing.Callable[[], T_Result],
        deleted: typing.Callable[[], T_Result],
        error: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is PublicLinkState.CONNECTING:
            return connecting()
        if self is PublicLinkState.AWAITING_TOKEN_EXCHANGE:
            return awaiting_token_exchange()
        if self is PublicLinkState.CONNECTED:
            return connected()
        if self is PublicLinkState.DELETED:
            return deleted()
        if self is PublicLinkState.ERROR:
            return error()
