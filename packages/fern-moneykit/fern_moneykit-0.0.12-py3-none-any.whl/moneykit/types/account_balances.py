# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .currency import Currency


class AccountBalances(pydantic.BaseModel):
    currency: Currency = pydantic.Field(
        description=(
            "A three-character currency code (ISO-4217 or similar, *e.g.*, `USD`, `CAD`) for the account balances.\n"
        )
    )
    available: typing.Optional[float] = pydantic.Field(
        description=(
            "The amount of funds available for use.  Not all institutions report the available balance.\n"
            "            <p>Note that the available balance typically does not include overdraft limits.\n"
        )
    )
    current: typing.Optional[float] = pydantic.Field(
        description=(
            "The total amount of funds in the account.\n"
            "            <p>For credit or loan accounts, a positive number indicates the amount owed by the account holder.\n"
            "            If the balance is negative (this is rare), this indicates an amount owed **to** the account holder.\n"
            "            <p>For depository or investment accounts, a positive number is the asset value of the account.\n"
            "            If the balance is negative (this is rare), this indicates an overdraft or margin condition.\n"
        )
    )
    limit: typing.Optional[float] = pydantic.Field(
        description=(
            "The credit limit on the account.  Typically this exists only for credit-type accounts.\n"
            "            <p>In some cases, this may represent the overdraft limit for depository accounts.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
