# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class Address(pydantic.BaseModel):
    city: typing.Optional[str] = pydantic.Field(description=("The city of the address.\n"))
    country: typing.Optional[str] = pydantic.Field(description=("The country of the address.\n"))
    postal_code: typing.Optional[str] = pydantic.Field(description=("The postal or zip code of the address.\n"))
    region: typing.Optional[str] = pydantic.Field(description=("The region or state of the address.\n"))
    street: typing.Optional[str] = pydantic.Field(description=("The street of the address.\n"))
    primary: typing.Optional[bool] = pydantic.Field(
        description=("Indicates if this is the primary address for the account owner.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
