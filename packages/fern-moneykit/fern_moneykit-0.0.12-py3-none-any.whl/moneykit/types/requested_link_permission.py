# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .link_permission_scope import LinkPermissionScope


class RequestedLinkPermission(pydantic.BaseModel):
    scope: LinkPermissionScope = pydantic.Field(description=("A permission type.\n"))
    reason: str = pydantic.Field(
        description=(
            "A **brief** description of the reason your app wants this data.\n"
            "        This description will be displayed to the user when permission is requested.\n"
        )
    )
    required: bool = pydantic.Field(
        description=(
            "If true, only institutions that support this data type will be available,\n"
            "        and the user **must** grant this permission or the link will not be created.  If false, then the available\n"
            "        institutions list may include those that do not support this data type, and even if the user declines to\n"
            "        grant this permission, the link will still be created (so long as at least one permission is granted).\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
