# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .country import Country


class Institution(pydantic.BaseModel):
    institution_id: str = pydantic.Field(description=("MoneyKit's unique ID for this institution.\n"))
    institution_id_aliases: typing.List[str] = pydantic.Field(
        description=("Alternative institution IDs that point to this institution that can be used for lookup.\n")
    )
    name: str = pydantic.Field(description=("The name of the institution.\n"))
    country: Country = pydantic.Field(
        description=(
            "The two-letter country code for this institution.  Note that British institutions are\n"
            "            designated GB (not UK).  Possible values are: `US, GB, CA`.\n"
        )
    )
    domain: typing.Optional[str] = pydantic.Field(
        description=("The domain of the institution's customer-facing website.\n")
    )
    color: str = pydantic.Field(description=("The primary color of this institution, represented as hexcode.\n"))
    color_dark: typing.Optional[str] = pydantic.Field(
        description=("The dark-mode primary color of this institution, represented as hexcode.\n")
    )
    is_featured: bool = pydantic.Field(
        description=("True for institutions that should be visually promoted to the end-user.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
