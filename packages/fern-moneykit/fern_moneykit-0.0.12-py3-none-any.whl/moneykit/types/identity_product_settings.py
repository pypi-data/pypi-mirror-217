# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class IdentityProductSettings(pydantic.BaseModel):
    required: typing.Optional[bool] = pydantic.Field(
        description=("If true, only institutions supporting this product will be available.\n")
    )
    prefetch: typing.Optional[bool] = pydantic.Field(
        description=(
            "If true, the data will be available as soon as possible after linking, even if `required` is false. If false, the data will be available after the first manual data refresh.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
