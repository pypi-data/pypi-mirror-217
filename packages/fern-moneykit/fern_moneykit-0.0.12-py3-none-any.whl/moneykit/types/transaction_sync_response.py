# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .cursor_pagination import CursorPagination
from .link_common import LinkCommon
from .transaction_diff import TransactionDiff


class TransactionSyncResponse(pydantic.BaseModel):
    transactions: TransactionDiff = pydantic.Field(description=("list of created, updated and removed transactions.\n"))
    cursor: CursorPagination = pydantic.Field(description=("Pagination information\n"))
    has_more: bool = pydantic.Field(
        description=(
            "This condition indicates the presence of transaction updates exceeding the requested count.\n"
            "        If true, additional updates can be retrieved by making an additional request with cursor set to next_cursor.\n"
        )
    )
    link: LinkCommon = pydantic.Field(description=("The link that these transactions belong to.\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
