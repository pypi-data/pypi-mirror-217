# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .customer_app import CustomerApp


class IntrospectClientResponse(pydantic.BaseModel):
    """
    MoneyKit API client for an application.
    """

    client_id: str = pydantic.Field(description=("Your application's MoneyKit client ID.\n"))
    client_name: str = pydantic.Field(description=("Friendly API client name for identification.\n"))
    scope: str = pydantic.Field(description=("Actions allowed by the client.\n"))
    app: CustomerApp = pydantic.Field(description=("Application to which the API keys belong.\n"))
    disabled_at: typing.Optional[str] = pydantic.Field(
        description=("Set to timestamp if the client has been disabled.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
