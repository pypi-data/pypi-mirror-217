# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .link_session_customer_user_email import LinkSessionCustomerUserEmail
from .link_session_customer_user_phone import LinkSessionCustomerUserPhone


class LinkSessionCustomerUser(pydantic.BaseModel):
    id: str = pydantic.Field(
        description=(
            "Your own unique ID for this user.  Typically this will be a UUID or primary key\n"
            '        from your application. <span style="white-space: nowrap">`<= 150 characters`</span> \n'
        )
    )
    email: typing.Optional[LinkSessionCustomerUserEmail] = pydantic.Field(
        description=(
            "The user's email address.  This field is optional, but either email or phone must be provided\n"
            "        to enable improved link conversion via the MoneyID system.\n"
        )
    )
    phone: typing.Optional[LinkSessionCustomerUserPhone] = pydantic.Field(
        description=(
            "The user's mobile phone number.  This field is optional, but either email or phone must be\n"
            "        provided to enable improved link conversion via the MoneyID system.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
