# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...environment import BaseMoneyKitEnvironment
from ...errors.forbidden_error import ForbiddenError
from ...errors.not_found_error import NotFoundError
from ...errors.too_many_requests_error import TooManyRequestsError
from ...errors.unauthorized_error import UnauthorizedError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.api_error_rate_limit_exceeded_response import ApiErrorRateLimitExceededResponse
from ...types.link_error_bad_state_response import LinkErrorBadStateResponse
from ...types.product import Product

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProductsClient:
    def __init__(
        self,
        *,
        environment: BaseMoneyKitEnvironment = BaseMoneyKitEnvironment.PRODUCTION,
        client_wrapper: SyncClientWrapper,
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def refresh_products(self, id: str, *, products: typing.List[Product]) -> None:
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"links/{id}/products"),
            json=jsonable_encoder({"products": products}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProductsClient:
    def __init__(
        self,
        *,
        environment: BaseMoneyKitEnvironment = BaseMoneyKitEnvironment.PRODUCTION,
        client_wrapper: AsyncClientWrapper,
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def refresh_products(self, id: str, *, products: typing.List[Product]) -> None:
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"links/{id}/products"),
            json=jsonable_encoder({"products": products}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
