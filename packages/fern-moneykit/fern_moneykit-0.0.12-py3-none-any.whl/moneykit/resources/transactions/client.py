# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...environment import BaseMoneyKitEnvironment
from ...errors.forbidden_error import ForbiddenError
from ...errors.not_found_error import NotFoundError
from ...errors.too_many_requests_error import TooManyRequestsError
from ...errors.unauthorized_error import UnauthorizedError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.api_error_rate_limit_exceeded_response import ApiErrorRateLimitExceededResponse
from ...types.get_transactions_response import GetTransactionsResponse
from ...types.get_user_transactions_response import GetUserTransactionsResponse
from ...types.link_error_bad_state_response import LinkErrorBadStateResponse
from ...types.transaction_sync_response import TransactionSyncResponse
from ...types.transaction_type_filter import TransactionTypeFilter


class TransactionsClient:
    def __init__(
        self,
        *,
        environment: BaseMoneyKitEnvironment = BaseMoneyKitEnvironment.PRODUCTION,
        client_wrapper: SyncClientWrapper,
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def get_transactions(
        self,
        id: str,
        *,
        account_ids: typing.Union[typing.Optional[str], typing.List[str]],
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
    ) -> GetTransactionsResponse:
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"links/{id}/transactions"),
            params={
                "account_ids": account_ids,
                "page": page,
                "size": size,
                "start_date": start_date,
                "end_date": end_date,
            },
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetTransactionsResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_transactions_diff(
        self, id: str, *, cursor: typing.Optional[str] = None, size: typing.Optional[int] = None
    ) -> TransactionSyncResponse:
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"links/{id}/transactions/sync"),
            params={"cursor": cursor, "size": size},
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TransactionSyncResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_user_transactions(
        self,
        id: str,
        *,
        transaction_type: typing.Union[typing.Optional[TransactionTypeFilter], typing.List[TransactionTypeFilter]],
        category: typing.Union[typing.Optional[str], typing.List[str]],
        account_id: typing.Union[typing.Optional[str], typing.List[str]],
        institution_id: typing.Union[typing.Optional[str], typing.List[str]],
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
    ) -> GetUserTransactionsResponse:
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"users/{id}/transactions"),
            params={
                "transaction_type": transaction_type,
                "category": category,
                "account_id": account_id,
                "institution_id": institution_id,
                "page": page,
                "size": size,
                "start_date": start_date,
                "end_date": end_date,
            },
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetUserTransactionsResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTransactionsClient:
    def __init__(
        self,
        *,
        environment: BaseMoneyKitEnvironment = BaseMoneyKitEnvironment.PRODUCTION,
        client_wrapper: AsyncClientWrapper,
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def get_transactions(
        self,
        id: str,
        *,
        account_ids: typing.Union[typing.Optional[str], typing.List[str]],
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
    ) -> GetTransactionsResponse:
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"links/{id}/transactions"),
            params={
                "account_ids": account_ids,
                "page": page,
                "size": size,
                "start_date": start_date,
                "end_date": end_date,
            },
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetTransactionsResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_transactions_diff(
        self, id: str, *, cursor: typing.Optional[str] = None, size: typing.Optional[int] = None
    ) -> TransactionSyncResponse:
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"links/{id}/transactions/sync"),
            params={"cursor": cursor, "size": size},
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TransactionSyncResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic.parse_obj_as(LinkErrorBadStateResponse, _response.json())  # type: ignore
            )
        if _response.status_code == 429:
            raise TooManyRequestsError(
                pydantic.parse_obj_as(ApiErrorRateLimitExceededResponse, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_user_transactions(
        self,
        id: str,
        *,
        transaction_type: typing.Union[typing.Optional[TransactionTypeFilter], typing.List[TransactionTypeFilter]],
        category: typing.Union[typing.Optional[str], typing.List[str]],
        account_id: typing.Union[typing.Optional[str], typing.List[str]],
        institution_id: typing.Union[typing.Optional[str], typing.List[str]],
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
    ) -> GetUserTransactionsResponse:
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"users/{id}/transactions"),
            params={
                "transaction_type": transaction_type,
                "category": category,
                "account_id": account_id,
                "institution_id": institution_id,
                "page": page,
                "size": size,
                "start_date": start_date,
                "end_date": end_date,
            },
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetUserTransactionsResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
