# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...environment import BaseMoneyKitEnvironment
from ...errors.bad_request_error import BadRequestError
from ...errors.forbidden_error import ForbiddenError
from ...errors.unauthorized_error import UnauthorizedError
from ...types.create_link_session_response import CreateLinkSessionResponse
from ...types.exchange_token_response import ExchangeTokenResponse
from ...types.link_session_customer_user import LinkSessionCustomerUser
from ...types.link_session_setting_overrides import LinkSessionSettingOverrides
from ...types.money_link_features import MoneyLinkFeatures

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class LinkSessionClient:
    def __init__(
        self,
        *,
        environment: BaseMoneyKitEnvironment = BaseMoneyKitEnvironment.PRODUCTION,
        client_wrapper: SyncClientWrapper,
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def create_link_session(
        self,
        *,
        settings: typing.Optional[LinkSessionSettingOverrides] = OMIT,
        customer_user: LinkSessionCustomerUser,
        existing_link_id: typing.Optional[str] = OMIT,
        redirect_uri: typing.Optional[str] = OMIT,
        webhook: typing.Optional[str] = OMIT,
        link_tags: typing.Optional[typing.List[str]] = OMIT,
        moneylink_features: typing.Optional[MoneyLinkFeatures] = OMIT,
    ) -> CreateLinkSessionResponse:
        _request: typing.Dict[str, typing.Any] = {"customer_user": customer_user}
        if settings is not OMIT:
            _request["settings"] = settings
        if existing_link_id is not OMIT:
            _request["existing_link_id"] = existing_link_id
        if redirect_uri is not OMIT:
            _request["redirect_uri"] = redirect_uri
        if webhook is not OMIT:
            _request["webhook"] = webhook
        if link_tags is not OMIT:
            _request["link_tags"] = link_tags
        if moneylink_features is not OMIT:
            _request["moneylink_features"] = moneylink_features
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "link-session"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateLinkSessionResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def exchange_token(self, *, exchangeable_token: str) -> ExchangeTokenResponse:
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "link-session/exchange-token"),
            json=jsonable_encoder({"exchangeable_token": exchangeable_token}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ExchangeTokenResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncLinkSessionClient:
    def __init__(
        self,
        *,
        environment: BaseMoneyKitEnvironment = BaseMoneyKitEnvironment.PRODUCTION,
        client_wrapper: AsyncClientWrapper,
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def create_link_session(
        self,
        *,
        settings: typing.Optional[LinkSessionSettingOverrides] = OMIT,
        customer_user: LinkSessionCustomerUser,
        existing_link_id: typing.Optional[str] = OMIT,
        redirect_uri: typing.Optional[str] = OMIT,
        webhook: typing.Optional[str] = OMIT,
        link_tags: typing.Optional[typing.List[str]] = OMIT,
        moneylink_features: typing.Optional[MoneyLinkFeatures] = OMIT,
    ) -> CreateLinkSessionResponse:
        _request: typing.Dict[str, typing.Any] = {"customer_user": customer_user}
        if settings is not OMIT:
            _request["settings"] = settings
        if existing_link_id is not OMIT:
            _request["existing_link_id"] = existing_link_id
        if redirect_uri is not OMIT:
            _request["redirect_uri"] = redirect_uri
        if webhook is not OMIT:
            _request["webhook"] = webhook
        if link_tags is not OMIT:
            _request["link_tags"] = link_tags
        if moneylink_features is not OMIT:
            _request["moneylink_features"] = moneylink_features
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "link-session"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateLinkSessionResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def exchange_token(self, *, exchangeable_token: str) -> ExchangeTokenResponse:
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "link-session/exchange-token"),
            json=jsonable_encoder({"exchangeable_token": exchangeable_token}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ExchangeTokenResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
